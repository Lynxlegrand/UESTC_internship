
UESTC_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005264  08005264  00007150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800526c  0800526c  00007150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08005274  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000150  080053c4  00007150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  080053c4  0000752c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe27  00000000  00000000  00007179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab4  00000000  00000000  00016fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00019a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d17  00000000  00000000  0001ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001924a  00000000  00000000  0001b85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d8d  00000000  00000000  00034aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddab  00000000  00000000  00047836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d55e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000d5624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000da240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000150 	.word	0x20000150
 8000128:	00000000 	.word	0x00000000
 800012c:	08004eb0 	.word	0x08004eb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000154 	.word	0x20000154
 8000148:	08004eb0 	.word	0x08004eb0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <DC_Motor_SetDuty>:
        ramps[i].active = 0;
    }
}

void DC_Motor_SetDuty(uint8_t motor_id, float duty)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
    if (motor_id < 1 || motor_id > 4) return;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d045      	beq.n	80007f6 <DC_Motor_SetDuty+0x9e>
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d842      	bhi.n	80007f6 <DC_Motor_SetDuty+0x9e>

    if (duty < 0) duty = 0;
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	6838      	ldr	r0, [r7, #0]
 8000776:	f7ff ffa7 	bl	80006c8 <__aeabi_fcmplt>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <DC_Motor_SetDuty+0x2e>
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
    if (duty > 100) duty = 100;
 8000786:	491e      	ldr	r1, [pc, #120]	@ (8000800 <DC_Motor_SetDuty+0xa8>)
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f7ff ffbb 	bl	8000704 <__aeabi_fcmpgt>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <DC_Motor_SetDuty+0x40>
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <DC_Motor_SetDuty+0xa8>)
 8000796:	603b      	str	r3, [r7, #0]

    // ARR = 9 → période PWM = 10 ticks (0..9)
    uint32_t pulse = (uint32_t)((duty * 10) / 100);
 8000798:	491a      	ldr	r1, [pc, #104]	@ (8000804 <DC_Motor_SetDuty+0xac>)
 800079a:	6838      	ldr	r0, [r7, #0]
 800079c:	f7ff fdf6 	bl	800038c <__aeabi_fmul>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4917      	ldr	r1, [pc, #92]	@ (8000800 <DC_Motor_SetDuty+0xa8>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fea5 	bl	80004f4 <__aeabi_fdiv>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ffb3 	bl	8000718 <__aeabi_f2uiz>
 80007b2:	4603      	mov	r3, r0
 80007b4:	60fb      	str	r3, [r7, #12]

    switch (motor_id) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d81c      	bhi.n	80007f8 <DC_Motor_SetDuty+0xa0>
 80007be:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <DC_Motor_SetDuty+0x6c>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	080007d5 	.word	0x080007d5
 80007c8:	080007dd 	.word	0x080007dd
 80007cc:	080007e7 	.word	0x080007e7
 80007d0:	080007ef 	.word	0x080007ef
        case 1: TIM1->CCR1 = pulse; break;
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <DC_Motor_SetDuty+0xb0>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6353      	str	r3, [r2, #52]	@ 0x34
 80007da:	e00d      	b.n	80007f8 <DC_Motor_SetDuty+0xa0>
        case 2: TIM2->CCR3 = pulse; break;
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007e4:	e008      	b.n	80007f8 <DC_Motor_SetDuty+0xa0>
        case 3: TIM3->CCR1 = pulse; break;
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <DC_Motor_SetDuty+0xb4>)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80007ec:	e004      	b.n	80007f8 <DC_Motor_SetDuty+0xa0>
        case 4: TIM4->CCR3 = pulse; break;
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <DC_Motor_SetDuty+0xb8>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007f4:	e000      	b.n	80007f8 <DC_Motor_SetDuty+0xa0>
    if (motor_id < 1 || motor_id > 4) return;
 80007f6:	bf00      	nop
    }
}
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	42c80000 	.word	0x42c80000
 8000804:	41200000 	.word	0x41200000
 8000808:	40012c00 	.word	0x40012c00
 800080c:	40000400 	.word	0x40000400
 8000810:	40000800 	.word	0x40000800

08000814 <DC_Motor_RampTick>:

    DC_Motor_SetDuty(motor_id, start);
}

void DC_Motor_RampTick(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	e079      	b.n	8000914 <DC_Motor_RampTick+0x100>
        Ramp_t *r = &ramps[i];
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4a3e      	ldr	r2, [pc, #248]	@ (8000924 <DC_Motor_RampTick+0x110>)
 800082c:	4413      	add	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
        if (!r->active) continue;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	7d1b      	ldrb	r3, [r3, #20]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d069      	beq.n	800090c <DC_Motor_RampTick+0xf8>

        r->counter_ms++;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	611a      	str	r2, [r3, #16]
        if (r->counter_ms >= r->interval_ms) {
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	691a      	ldr	r2, [r3, #16]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	429a      	cmp	r2, r3
 800084c:	d35f      	bcc.n	800090e <DC_Motor_RampTick+0xfa>
            r->counter_ms = 0;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]

            if (r->current_duty < r->target_duty) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f7ff ff32 	bl	80006c8 <__aeabi_fcmplt>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d01b      	beq.n	80008a2 <DC_Motor_RampTick+0x8e>
                r->current_duty += r->step;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4619      	mov	r1, r3
 8000874:	4610      	mov	r0, r2
 8000876:	f7ff fc81 	bl	800017c <__addsf3>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	601a      	str	r2, [r3, #0]
                if (r->current_duty > r->target_duty)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4619      	mov	r1, r3
 800088c:	4610      	mov	r0, r2
 800088e:	f7ff ff39 	bl	8000704 <__aeabi_fcmpgt>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02e      	beq.n	80008f6 <DC_Motor_RampTick+0xe2>
                    r->current_duty = r->target_duty;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e029      	b.n	80008f6 <DC_Motor_RampTick+0xe2>
            }
            else if (r->current_duty > r->target_duty) {
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4610      	mov	r0, r2
 80008ae:	f7ff ff29 	bl	8000704 <__aeabi_fcmpgt>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d01b      	beq.n	80008f0 <DC_Motor_RampTick+0xdc>
                r->current_duty -= r->step;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4610      	mov	r0, r2
 80008c4:	f7ff fc58 	bl	8000178 <__aeabi_fsub>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	601a      	str	r2, [r3, #0]
                if (r->current_duty < r->target_duty)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f7ff fef4 	bl	80006c8 <__aeabi_fcmplt>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d007      	beq.n	80008f6 <DC_Motor_RampTick+0xe2>
                    r->current_duty = r->target_duty;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e002      	b.n	80008f6 <DC_Motor_RampTick+0xe2>
            }
            else {
                r->active = 0; // fin rampe
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	751a      	strb	r2, [r3, #20]
            }

            DC_Motor_SetDuty(i + 1, r->current_duty);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	4610      	mov	r0, r2
 8000906:	f7ff ff27 	bl	8000758 <DC_Motor_SetDuty>
 800090a:	e000      	b.n	800090e <DC_Motor_RampTick+0xfa>
        if (!r->active) continue;
 800090c:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b03      	cmp	r3, #3
 8000918:	dd82      	ble.n	8000820 <DC_Motor_RampTick+0xc>
        }
    }
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000016c 	.word	0x2000016c

08000928 <BLE_SendCommand>:

#define huart_BLE huart1
extern UART_HandleTypeDef huart_BLE;

// Fonction d'envoi générique
void BLE_SendCommand(const char* cmd) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fc15 	bl	8000160 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	4803      	ldr	r0, [pc, #12]	@ (8000950 <BLE_SendCommand+0x28>)
 8000942:	f002 ffce 	bl	80038e2 <HAL_UART_Transmit>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000300 	.word	0x20000300

08000954 <BLE_SendTrame>:

void BLE_SendTrame(const uint8_t* cmd) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, cmd, strlen((const char*)cmd), HAL_MAX_DELAY);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fbff 	bl	8000160 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	4803      	ldr	r0, [pc, #12]	@ (800097c <BLE_SendTrame+0x28>)
 800096e:	f002 ffb8 	bl	80038e2 <HAL_UART_Transmit>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000300 	.word	0x20000300

08000980 <BLE_AT>:

// Test AT
void BLE_AT(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT\r\n");
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <BLE_AT+0x10>)
 8000986:	f7ff ffcf 	bl	8000928 <BLE_SendCommand>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08004ec8 	.word	0x08004ec8

08000994 <BLE_Reset>:

// Redémarrage du module
void BLE_Reset(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESET\r\n");
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <BLE_Reset+0x10>)
 800099a:	f7ff ffc5 	bl	8000928 <BLE_SendCommand>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	08004ed0 	.word	0x08004ed0

080009a8 <BLE_RestoreDefaults>:

// Restauration usine
void BLE_RestoreDefaults(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESTORE\r\n");
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <BLE_RestoreDefaults+0x10>)
 80009ae:	f7ff ffbb 	bl	8000928 <BLE_SendCommand>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08004edc 	.word	0x08004edc

080009bc <BLE_ReadVersion>:

// Lire version du firmware
void BLE_ReadVersion(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+VER\r\n");
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <BLE_ReadVersion+0x10>)
 80009c2:	f7ff ffb1 	bl	8000928 <BLE_SendCommand>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08004eec 	.word	0x08004eec

080009d0 <BLE_ReadName>:

// Lire nom BLE
void BLE_ReadName(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLENAME\r\n");
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <BLE_ReadName+0x10>)
 80009d6:	f7ff ffa7 	bl	8000928 <BLE_SendCommand>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08004ef8 	.word	0x08004ef8

080009e4 <BLE_SetName>:

// Définir nom BLE
void BLE_SetName(const char* name) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b092      	sub	sp, #72	@ 0x48
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLENAME=%s\r\n", name);
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <BLE_SetName+0x28>)
 80009f4:	2140      	movs	r1, #64	@ 0x40
 80009f6:	f003 fd8f 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff92 	bl	8000928 <BLE_SendCommand>
}
 8000a04:	bf00      	nop
 8000a06:	3748      	adds	r7, #72	@ 0x48
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08004f08 	.word	0x08004f08

08000a10 <BLE_ReadMAC>:

// Lire l’adresse MAC BLE
void BLE_ReadMAC(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLEMAC\r\n");
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <BLE_ReadMAC+0x10>)
 8000a16:	f7ff ff87 	bl	8000928 <BLE_SendCommand>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08004f18 	.word	0x08004f18

08000a24 <BLE_ReadRole>:

// Lire le rôle actuel
void BLE_ReadRole(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ROLE\r\n");
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <BLE_ReadRole+0x10>)
 8000a2a:	f7ff ff7d 	bl	8000928 <BLE_SendCommand>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08004f24 	.word	0x08004f24

08000a38 <BLE_SetRole>:

// Définir rôle (0 = slave, 1 = master)
void BLE_SetRole(uint8_t role) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ROLE=%d\r\n", role);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f107 0008 	add.w	r0, r7, #8
 8000a48:	4a06      	ldr	r2, [pc, #24]	@ (8000a64 <BLE_SetRole+0x2c>)
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	f003 fd64 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff67 	bl	8000928 <BLE_SendCommand>
}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	08004f30 	.word	0x08004f30

08000a68 <BLE_SetPIN>:

// Définir mot de passe
void BLE_SetPIN(const char* pin6digits) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+PIN=%s\r\n", pin6digits);
 8000a70:	f107 0008 	add.w	r0, r7, #8
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a06      	ldr	r2, [pc, #24]	@ (8000a90 <BLE_SetPIN+0x28>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	f003 fd4d 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff50 	bl	8000928 <BLE_SendCommand>
}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	08004f40 	.word	0x08004f40

08000a94 <BLE_SetSecurity>:

// Définir le niveau de sécurité
void BLE_SetSecurity(uint8_t level) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SECURITY=%d\r\n", level);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f107 0008 	add.w	r0, r7, #8
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <BLE_SetSecurity+0x2c>)
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	f003 fd36 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff39 	bl	8000928 <BLE_SendCommand>
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	08004f4c 	.word	0x08004f4c

08000ac4 <BLE_ReadSecurity>:

// Lire niveau de sécurité
void BLE_ReadSecurity(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SECURITY\r\n");
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <BLE_ReadSecurity+0x10>)
 8000aca:	f7ff ff2d 	bl	8000928 <BLE_SendCommand>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08004f60 	.word	0x08004f60

08000ad8 <BLE_ReadPIN>:

// Lire PIN actuel
void BLE_ReadPIN(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+PIN\r\n");
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <BLE_ReadPIN+0x10>)
 8000ade:	f7ff ff23 	bl	8000928 <BLE_SendCommand>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08004f70 	.word	0x08004f70

08000aec <BLE_EnterATMode>:

// Passer en mode AT
void BLE_EnterATMode(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>9\r\n");
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <BLE_EnterATMode+0x10>)
 8000af2:	f7ff ff19 	bl	8000928 <BLE_SendCommand>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08004f7c 	.word	0x08004f7c

08000b00 <BLE_EnterBLEMode>:

// Revenir au mode BLE
void BLE_EnterBLEMode(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>8\r\n");
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <BLE_EnterBLEMode+0x10>)
 8000b06:	f7ff ff0f 	bl	8000928 <BLE_SendCommand>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	08004f84 	.word	0x08004f84

08000b14 <BLE_SetLog>:

// Activer/désactiver le log
void BLE_SetLog(uint8_t enable) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LOG=%d\r\n", enable);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f107 0008 	add.w	r0, r7, #8
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <BLE_SetLog+0x2c>)
 8000b26:	2120      	movs	r1, #32
 8000b28:	f003 fcf6 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fef9 	bl	8000928 <BLE_SendCommand>
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08004f8c 	.word	0x08004f8c

08000b44 <BLE_ReadLog>:

// Lire état du log
void BLE_ReadLog(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LOG\r\n");
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <BLE_ReadLog+0x10>)
 8000b4a:	f7ff feed 	bl	8000928 <BLE_SendCommand>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08004f98 	.word	0x08004f98

08000b58 <BLE_SetLED>:

// Réglage LED d’état
void BLE_SetLED(uint8_t mode) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LED=%d\r\n", mode);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f107 0008 	add.w	r0, r7, #8
 8000b68:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <BLE_SetLED+0x2c>)
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	f003 fcd4 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fed7 	bl	8000928 <BLE_SendCommand>
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	08004fa4 	.word	0x08004fa4

08000b88 <BLE_ReadLED>:

// Lire mode LED
void BLE_ReadLED(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LED\r\n");
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <BLE_ReadLED+0x10>)
 8000b8e:	f7ff fecb 	bl	8000928 <BLE_SendCommand>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08004fb0 	.word	0x08004fb0

08000b9c <BLE_SetRFPower>:

// Définir puissance d’émission (0 à 9)
void BLE_SetRFPower(uint8_t level) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+RFPWR=%d\r\n", level);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f107 0008 	add.w	r0, r7, #8
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <BLE_SetRFPower+0x2c>)
 8000bae:	2120      	movs	r1, #32
 8000bb0:	f003 fcb2 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff feb5 	bl	8000928 <BLE_SendCommand>
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08004fbc 	.word	0x08004fbc

08000bcc <BLE_ReadUUID>:

// Lire UUID
void BLE_ReadUUID(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+UUID\r\n");
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <BLE_ReadUUID+0x10>)
 8000bd2:	f7ff fea9 	bl	8000928 <BLE_SendCommand>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	08004fcc 	.word	0x08004fcc

08000be0 <BLE_SetUUID>:

// Modifier UUID d’un service ou caractéristique
void BLE_SetUUID(uint8_t index, const char* uuid) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0a4      	sub	sp, #144	@ 0x90
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+UUID=%d,%s\r\n", index, uuid);
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	f107 0008 	add.w	r0, r7, #8
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <BLE_SetUUID+0x38>)
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	f003 fc8c 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe8f 	bl	8000928 <BLE_SendCommand>
    BLE_Reset();  // UUID settings require reboot
 8000c0a:	f7ff fec3 	bl	8000994 <BLE_Reset>
}
 8000c0e:	bf00      	nop
 8000c10:	3788      	adds	r7, #136	@ 0x88
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08004fd8 	.word	0x08004fd8

08000c1c <BLE_ReadAdvData>:

// Lire données du paquet de broadcast
void BLE_ReadAdvData(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVDATA\r\n");
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <BLE_ReadAdvData+0x10>)
 8000c22:	f7ff fe81 	bl	8000928 <BLE_SendCommand>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08004fe8 	.word	0x08004fe8

08000c30 <BLE_SetAdvData>:

// Définir données broadcast personnalisées
void BLE_SetAdvData(const char* adv_data_hex) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0a2      	sub	sp, #136	@ 0x88
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+ADVDATA=%s\r\n", adv_data_hex);
 8000c38:	f107 0008 	add.w	r0, r7, #8
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <BLE_SetAdvData+0x28>)
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	f003 fc69 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe6c 	bl	8000928 <BLE_SendCommand>
}
 8000c50:	bf00      	nop
 8000c52:	3788      	adds	r7, #136	@ 0x88
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	08004ff8 	.word	0x08004ff8

08000c5c <BLE_ReadAdvInterval>:

// Lire intervalle broadcast
void BLE_ReadAdvInterval(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVPARAM\r\n");
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <BLE_ReadAdvInterval+0x10>)
 8000c62:	f7ff fe61 	bl	8000928 <BLE_SendCommand>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	08005008 	.word	0x08005008

08000c70 <BLE_SetAdvInterval>:

// Définir intervalle broadcast (10~4000 ms)
void BLE_SetAdvInterval(uint16_t interval_ms) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b092      	sub	sp, #72	@ 0x48
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+ADVPARAM=%d\r\n", interval_ms);
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f107 0008 	add.w	r0, r7, #8
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <BLE_SetAdvInterval+0x2c>)
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	f003 fc48 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe4b 	bl	8000928 <BLE_SendCommand>
}
 8000c92:	bf00      	nop
 8000c94:	3748      	adds	r7, #72	@ 0x48
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08005018 	.word	0x08005018

08000ca0 <BLE_SetBroadcast>:

// Activer/désactiver le broadcast
void BLE_SetBroadcast(uint8_t enable) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ADV=%d\r\n", enable);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f107 0008 	add.w	r0, r7, #8
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <BLE_SetBroadcast+0x2c>)
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	f003 fc30 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe33 	bl	8000928 <BLE_SendCommand>
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800502c 	.word	0x0800502c

08000cd0 <BLE_SetLowPowerMode>:

// Activer ou désactiver le mode low power
void BLE_SetLowPowerMode(uint8_t enable) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LPM=%d\r\n", enable);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f107 0008 	add.w	r0, r7, #8
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <BLE_SetLowPowerMode+0x2c>)
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	f003 fc18 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe1b 	bl	8000928 <BLE_SendCommand>
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08005038 	.word	0x08005038

08000d00 <BLE_ReadLowPowerMode>:

// Lire état low power
void BLE_ReadLowPowerMode(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LPM\r\n");
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <BLE_ReadLowPowerMode+0x10>)
 8000d06:	f7ff fe0f 	bl	8000928 <BLE_SendCommand>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08005044 	.word	0x08005044

08000d14 <BLE_ConnectTo>:
void BLE_Scan(void) {
    BLE_SendCommand("AT+SCAN=1\r\n");
}

// Connexion à un périphérique BLE (master mode)
void BLE_ConnectTo(const char* mac_addr) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b092      	sub	sp, #72	@ 0x48
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+CONN=%s\r\n", mac_addr);
 8000d1c:	f107 0008 	add.w	r0, r7, #8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <BLE_ConnectTo+0x28>)
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	f003 fbf7 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fdfa 	bl	8000928 <BLE_SendCommand>
}
 8000d34:	bf00      	nop
 8000d36:	3748      	adds	r7, #72	@ 0x48
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0800505c 	.word	0x0800505c

08000d40 <BLE_Disconnect>:

// Déconnexion (nécessite d’abord AT>9)
void BLE_Disconnect(uint8_t mode) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+DISC=%d\r\n", mode);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f107 0008 	add.w	r0, r7, #8
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <BLE_Disconnect+0x2c>)
 8000d52:	2120      	movs	r1, #32
 8000d54:	f003 fbe0 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fde3 	bl	8000928 <BLE_SendCommand>
}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	0800506c 	.word	0x0800506c

08000d70 <BLE_Sleep>:

// Mise en veille (soft shutdown)
void BLE_Sleep(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SLEEP\r\n");
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <BLE_Sleep+0x10>)
 8000d76:	f7ff fdd7 	bl	8000928 <BLE_SendCommand>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	0800507c 	.word	0x0800507c

08000d84 <BLE_ReadBaudrate>:
// Lire le baudrate
void BLE_ReadBaudrate(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BAUD\r\n");
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <BLE_ReadBaudrate+0x10>)
 8000d8a:	f7ff fdcd 	bl	8000928 <BLE_SendCommand>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08005088 	.word	0x08005088

08000d98 <BLE_SetBaudrate>:

// Définir le baudrate (ex: 9600, 115200, etc.)
void BLE_SetBaudrate(uint32_t baudrate) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+BAUD=%lu\r\n", baudrate);
 8000da0:	f107 0008 	add.w	r0, r7, #8
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <BLE_SetBaudrate+0x28>)
 8000da8:	2120      	movs	r1, #32
 8000daa:	f003 fbb5 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fdb8 	bl	8000928 <BLE_SendCommand>
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08005094 	.word	0x08005094

08000dc4 <BLE_ReadMode>:

// Lire le mode (0 = BLE / 1 = BLE&SPP)
void BLE_ReadMode(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+MODE\r\n");
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <BLE_ReadMode+0x10>)
 8000dca:	f7ff fdad 	bl	8000928 <BLE_SendCommand>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080050a4 	.word	0x080050a4

08000dd8 <BLE_SetMode>:

// Définir le mode BLE ou BLE+SPP
void BLE_SetMode(uint8_t mode) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+MODE=%d\r\n", mode);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f107 0008 	add.w	r0, r7, #8
 8000de8:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <BLE_SetMode+0x2c>)
 8000dea:	2120      	movs	r1, #32
 8000dec:	f003 fb94 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fd97 	bl	8000928 <BLE_SendCommand>
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	080050b0 	.word	0x080050b0

08000e08 <BLE_ReadSPPName>:

// Lire nom SPP
void BLE_ReadSPPName(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPNAME\r\n");
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <BLE_ReadSPPName+0x10>)
 8000e0e:	f7ff fd8b 	bl	8000928 <BLE_SendCommand>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	080050c0 	.word	0x080050c0

08000e1c <BLE_SetSPPName>:

// Définir nom SPP
void BLE_SetSPPName(const char* name) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b092      	sub	sp, #72	@ 0x48
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPNAME=%s\r\n", name);
 8000e24:	f107 0008 	add.w	r0, r7, #8
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <BLE_SetSPPName+0x28>)
 8000e2c:	2140      	movs	r1, #64	@ 0x40
 8000e2e:	f003 fb73 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fd76 	bl	8000928 <BLE_SendCommand>
}
 8000e3c:	bf00      	nop
 8000e3e:	3748      	adds	r7, #72	@ 0x48
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	080050d0 	.word	0x080050d0

08000e48 <BLE_ReadSPPMAC>:

// Lire MAC SPP
void BLE_ReadSPPMAC(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPMAC\r\n");
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <BLE_ReadSPPMAC+0x10>)
 8000e4e:	f7ff fd6b 	bl	8000928 <BLE_SendCommand>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080050e0 	.word	0x080050e0

08000e5c <BLE_SetBLEMAC>:

// Définir MAC BLE
void BLE_SetBLEMAC(const char* mac12) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b092      	sub	sp, #72	@ 0x48
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLEMAC=%s\r\n", mac12);
 8000e64:	f107 0008 	add.w	r0, r7, #8
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <BLE_SetBLEMAC+0x28>)
 8000e6c:	2140      	movs	r1, #64	@ 0x40
 8000e6e:	f003 fb53 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fd56 	bl	8000928 <BLE_SendCommand>
}
 8000e7c:	bf00      	nop
 8000e7e:	3748      	adds	r7, #72	@ 0x48
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	080050ec 	.word	0x080050ec

08000e88 <BLE_SetSPPMAC>:

// Définir MAC SPP
void BLE_SetSPPMAC(const char* mac12) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b092      	sub	sp, #72	@ 0x48
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPMAC=%s\r\n", mac12);
 8000e90:	f107 0008 	add.w	r0, r7, #8
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <BLE_SetSPPMAC+0x28>)
 8000e98:	2140      	movs	r1, #64	@ 0x40
 8000e9a:	f003 fb3d 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fd40 	bl	8000928 <BLE_SendCommand>
}
 8000ea8:	bf00      	nop
 8000eaa:	3748      	adds	r7, #72	@ 0x48
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	080050fc 	.word	0x080050fc

08000eb4 <BLE_SetTargetUUID>:

// Définir UUID cible pour connexion (client mode)
void BLE_SetTargetUUID(const char* uuid) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0a2      	sub	sp, #136	@ 0x88
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TARGETUUID=%s\r\n", uuid);
 8000ebc:	f107 0008 	add.w	r0, r7, #8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a06      	ldr	r2, [pc, #24]	@ (8000edc <BLE_SetTargetUUID+0x28>)
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	f003 fb27 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd2a 	bl	8000928 <BLE_SendCommand>
}
 8000ed4:	bf00      	nop
 8000ed6:	3788      	adds	r7, #136	@ 0x88
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	0800510c 	.word	0x0800510c

08000ee0 <BLE_ScanStart>:

// Scanner les périphériques BLE
void BLE_ScanStart(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SCAN=1\r\n");
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <BLE_ScanStart+0x10>)
 8000ee6:	f7ff fd1f 	bl	8000928 <BLE_SendCommand>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08005050 	.word	0x08005050

08000ef4 <BLE_SetScanLimits>:

// Configurer paramètres de scan (nombre, timeout)
void BLE_SetScanLimits(uint8_t count, uint8_t timeout_sec) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	@ 0x30
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SCANM=%d,%d\r\n", count, timeout_sec);
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	f107 0008 	add.w	r0, r7, #8
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <BLE_SetScanLimits+0x38>)
 8000f12:	2120      	movs	r1, #32
 8000f14:	f003 fb00 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fd03 	bl	8000928 <BLE_SendCommand>
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08005120 	.word	0x08005120

08000f30 <BLE_SetScanParams>:

// Configurer scan params (mode, interval, window)
void BLE_SetScanParams(uint8_t active, uint8_t interval, uint8_t window) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	@ 0x50
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SCANPARAM=%d,%d,%d\r\n", active, interval, window);
 8000f42:	79f9      	ldrb	r1, [r7, #7]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	797a      	ldrb	r2, [r7, #5]
 8000f48:	f107 0008 	add.w	r0, r7, #8
 8000f4c:	9201      	str	r2, [sp, #4]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	460b      	mov	r3, r1
 8000f52:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <BLE_SetScanParams+0x3c>)
 8000f54:	2140      	movs	r1, #64	@ 0x40
 8000f56:	f003 fadf 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fce2 	bl	8000928 <BLE_SendCommand>
}
 8000f64:	bf00      	nop
 8000f66:	3748      	adds	r7, #72	@ 0x48
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	08005134 	.word	0x08005134

08000f70 <BLE_ClearBindings>:

// Effacer les liaisons enregistrées
void BLE_ClearBindings(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+CLRBIND\r\n");
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <BLE_ClearBindings+0x10>)
 8000f76:	f7ff fcd7 	bl	8000928 <BLE_SendCommand>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800514c 	.word	0x0800514c

08000f84 <BLE_SetAutoConnect>:

// Configurer auto-connexion (client mode uniquement)
void BLE_SetAutoConnect(const char* mac) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b092      	sub	sp, #72	@ 0x48
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SERVER=%s\r\n", mac);
 8000f8c:	f107 0008 	add.w	r0, r7, #8
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <BLE_SetAutoConnect+0x2c>)
 8000f94:	2140      	movs	r1, #64	@ 0x40
 8000f96:	f003 fabf 	bl	8004518 <sniprintf>
    BLE_SendCommand(cmd);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fcc2 	bl	8000928 <BLE_SendCommand>
    BLE_Reset();  // Reboot pour appliquer
 8000fa4:	f7ff fcf6 	bl	8000994 <BLE_Reset>
}
 8000fa8:	bf00      	nop
 8000faa:	3748      	adds	r7, #72	@ 0x48
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800515c 	.word	0x0800515c

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f000 fe0c 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f81c 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f000 fa3c 	bl	800143c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fc4:	f000 f886 	bl	80010d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fc8:	f000 f906 	bl	80011d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fcc:	f000 f95c 	bl	8001288 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fd0:	f000 f9b2 	bl	8001338 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fd4:	f000 fa08 	bl	80013e8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000fd8:	f000 f860 	bl	800109c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4904      	ldr	r1, [pc, #16]	@ (8000ff0 <main+0x3c>)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <main+0x40>)
 8000fe2:	f002 fd09 	bl	80039f8 <HAL_UART_Receive_IT>
  // chaque caractère va être écrit dans le buff et une interruption sera envoyée à HAL_UART_RxCpltCallback

  //Config du module BLE
  config_BLE();
 8000fe6:	f000 fb35 	bl	8001654 <config_BLE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fea:	bf00      	nop
 8000fec:	e7fd      	b.n	8000fea <main+0x36>
 8000fee:	bf00      	nop
 8000ff0:	20000348 	.word	0x20000348
 8000ff4:	20000300 	.word	0x20000300

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	@ 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	2228      	movs	r2, #40	@ 0x28
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fabc 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001028:	2309      	movs	r3, #9
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f97a 	bl	8002338 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800104a:	f000 fa7d 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fbe7 	bl	800283c <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001074:	f000 fa68 	bl	8001548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800107c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fd67 	bl	8002b58 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001090:	f000 fa5a 	bl	8001548 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	@ 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_RTC_Init+0x30>)
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <MX_RTC_Init+0x34>)
 80010a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_RTC_Init+0x30>)
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_RTC_Init+0x30>)
 80010b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_RTC_Init+0x30>)
 80010b8:	f001 feba 	bl	8002e30 <HAL_RTC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80010c2:	f000 fa41 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001cc 	.word	0x200001cc
 80010d0:	40002800 	.word	0x40002800

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b092      	sub	sp, #72	@ 0x48
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2220      	movs	r2, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fa40 	bl	8004584 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001104:	4b32      	ldr	r3, [pc, #200]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001106:	4a33      	ldr	r2, [pc, #204]	@ (80011d4 <MX_TIM1_Init+0x100>)
 8001108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800110c:	2213      	movs	r2, #19
 800110e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001118:	2209      	movs	r2, #9
 800111a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b29      	ldr	r3, [pc, #164]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001130:	f001 ffd0 	bl	80030d4 <HAL_TIM_PWM_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800113a:	f000 fa05 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001146:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800114a:	4619      	mov	r1, r3
 800114c:	4820      	ldr	r0, [pc, #128]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800114e:	f002 fac9 	bl	80036e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001158:	f000 f9f6 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	@ 0x60
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001182:	f001 fff7 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800118c:	f000 f9dc 	bl	8001548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 80011b4:	f002 faf4 	bl	80037a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80011be:	f000 f9c3 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c2:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 80011c4:	f000 fb7a 	bl	80018bc <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3748      	adds	r7, #72	@ 0x48
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001e0 	.word	0x200001e0
 80011d4:	40012c00 	.word	0x40012c00

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_TIM2_Init+0xac>)
 80011fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001204:	2213      	movs	r2, #19
 8001206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_TIM2_Init+0xac>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001210:	2209      	movs	r2, #9
 8001212:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM2_Init+0xac>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001220:	4818      	ldr	r0, [pc, #96]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001222:	f001 ff57 	bl	80030d4 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 f98c 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4619      	mov	r1, r3
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001240:	f002 fa50 	bl	80036e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800124a:	f000 f97d 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	@ 0x60
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2208      	movs	r2, #8
 8001262:	4619      	mov	r1, r3
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001266:	f001 ff85 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001270:	f000 f96a 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001274:	4803      	ldr	r0, [pc, #12]	@ (8001284 <MX_TIM2_Init+0xac>)
 8001276:	f000 fb21 	bl	80018bc <HAL_TIM_MspPostInit>

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000228 	.word	0x20000228

08001288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <MX_TIM3_Init+0xac>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012b2:	2213      	movs	r2, #19
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012be:	2209      	movs	r2, #9
 80012c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ce:	4818      	ldr	r0, [pc, #96]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012d0:	f001 ff00 	bl	80030d4 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80012da:	f000 f935 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	4619      	mov	r1, r3
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <MX_TIM3_Init+0xa8>)
 80012ee:	f002 f9f9 	bl	80036e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80012f8:	f000 f926 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	@ 0x60
 80012fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM3_Init+0xa8>)
 8001314:	f001 ff2e 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800131e:	f000 f913 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM3_Init+0xa8>)
 8001324:	f000 faca 	bl	80018bc <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000270 	.word	0x20000270
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <MX_TIM4_Init+0xac>)
 800135e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 8001362:	2213      	movs	r2, #19
 8001364:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 800136e:	2209      	movs	r2, #9
 8001370:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 8001380:	f001 fea8 	bl	80030d4 <HAL_TIM_PWM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800138a:	f000 f8dd 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4619      	mov	r1, r3
 800139c:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 800139e:	f002 f9a1 	bl	80036e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80013a8:	f000 f8ce 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ac:	2360      	movs	r3, #96	@ 0x60
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2208      	movs	r2, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 80013c4:	f001 fed6 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013ce:	f000 f8bb 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM4_Init+0xa8>)
 80013d4:	f000 fa72 	bl	80018bc <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002b8 	.word	0x200002b8
 80013e4:	40000800 	.word	0x40000800

080013e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_USART1_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001420:	f002 fa0f 	bl	8003842 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f88d 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000300 	.word	0x20000300
 8001438:	40013800 	.word	0x40013800

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_GPIO_Init+0x58>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a07      	ldr	r2, [pc, #28]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <MX_GPIO_Init+0x58>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

////////////////////////////////////////////////////////////////// CODE RX


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_UART_RxCpltCallback+0x94>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d13b      	bne.n	8001522 <HAL_UART_RxCpltCallback+0x8a>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 80014aa:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <HAL_UART_RxCpltCallback+0x98>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80014b0:	d81a      	bhi.n	80014e8 <HAL_UART_RxCpltCallback+0x50>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <HAL_UART_RxCpltCallback+0x98>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	491d      	ldr	r1, [pc, #116]	@ (8001530 <HAL_UART_RxCpltCallback+0x98>)
 80014ba:	600a      	str	r2, [r1, #0]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_UART_RxCpltCallback+0x9c>)
 80014be:	7811      	ldrb	r1, [r2, #0]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_UART_RxCpltCallback+0xa0>)
 80014c2:	54d1      	strb	r1, [r2, r3]
            if((char)rx_it_buffer == '\n'){
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_UART_RxCpltCallback+0x9c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	d10d      	bne.n	80014e8 <HAL_UART_RxCpltCallback+0x50>
            	if (!debut_de_trame){
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <HAL_UART_RxCpltCallback+0xa4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_UART_RxCpltCallback+0x4a>
            		debut_de_trame = true;
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <HAL_UART_RxCpltCallback+0xa4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e002      	b.n	80014e8 <HAL_UART_RxCpltCallback+0x50>
            	}
            	else{
            		fin_de_trame = true;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_UART_RxCpltCallback+0xa8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_UART_RxCpltCallback+0xa8>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_UART_RxCpltCallback+0x80>
        	process_trame_rx(receive_buffer);  // traite la trame
 80014f0:	4811      	ldr	r0, [pc, #68]	@ (8001538 <HAL_UART_RxCpltCallback+0xa0>)
 80014f2:	f000 f877 	bl	80015e4 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 80014f6:	2240      	movs	r2, #64	@ 0x40
 80014f8:	2100      	movs	r1, #0
 80014fa:	480f      	ldr	r0, [pc, #60]	@ (8001538 <HAL_UART_RxCpltCallback+0xa0>)
 80014fc:	f003 f842 	bl	8004584 <memset>
            receive_index = 0;              // réinitialise l'index
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_UART_RxCpltCallback+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_UART_RxCpltCallback+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_UART_RxCpltCallback+0xa8>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_UART_RxCpltCallback+0x9c>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]


        }

        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	4906      	ldr	r1, [pc, #24]	@ (8001534 <HAL_UART_RxCpltCallback+0x9c>)
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <HAL_UART_RxCpltCallback+0xac>)
 800151e:	f002 fa6b 	bl	80039f8 <HAL_UART_Receive_IT>
    }
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013800 	.word	0x40013800
 8001530:	2000034c 	.word	0x2000034c
 8001534:	20000348 	.word	0x20000348
 8001538:	20000354 	.word	0x20000354
 800153c:	20000350 	.word	0x20000350
 8001540:	20000351 	.word	0x20000351
 8001544:	20000300 	.word	0x20000300

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <handle_BLE_DISC>:
    {"\r\nBLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <handle_BLE_DISC+0x14>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200003d4 	.word	0x200003d4

0800156c <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <handle_BLE_CONN+0x14>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200003d4 	.word	0x200003d4

08001584 <handle_OK>:

void handle_OK(void){
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	flags.OK = true;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <handle_OK+0x14>)
 800158a:	2201      	movs	r2, #1
 800158c:	70da      	strb	r2, [r3, #3]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200003d4 	.word	0x200003d4

0800159c <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <handle_ERR_CMD+0x14>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	711a      	strb	r2, [r3, #4]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200003d4 	.word	0x200003d4

080015b4 <handle_RSTING>:

void handle_RSTING(void){
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <handle_RSTING+0x14>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	715a      	strb	r2, [r3, #5]
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200003d4 	.word	0x200003d4

080015cc <handle_CONNECTING>:
void handle_CONNECTING(void){
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <handle_CONNECTING+0x14>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	719a      	strb	r2, [r3, #6]
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200003d4 	.word	0x200003d4

080015e4 <process_trame_rx>:


// fonctions
void process_trame_rx(char* receive_buffer) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d025      	beq.n	8001640 <process_trame_rx+0x5c>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e017      	b.n	800162a <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 80015fa:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <process_trame_rx+0x64>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7fe fda1 	bl	800014c <strcmp>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <process_trame_rx+0x64>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <process_trame_rx+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 8001622:	e00e      	b.n	8001642 <process_trame_rx+0x5e>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b05      	cmp	r3, #5
 800162e:	dde4      	ble.n	80015fa <process_trame_rx+0x16>
			}
		}
		flags.UNKNOW_COMMAND = true;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <process_trame_rx+0x68>)
 8001632:	2201      	movs	r2, #1
 8001634:	709a      	strb	r2, [r3, #2]
		strcpy(receive_buffer, unknow_command); //utile pr le debug
 8001636:	4906      	ldr	r1, [pc, #24]	@ (8001650 <process_trame_rx+0x6c>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f002 ffd7 	bl	80045ec <strcpy>
		return;
 800163e:	e000      	b.n	8001642 <process_trame_rx+0x5e>
		return;
 8001640:	bf00      	nop
		}
}
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000c4 	.word	0x200000c4
 800164c:	200003d4 	.word	0x200003d4
 8001650:	20000394 	.word	0x20000394

08001654 <config_BLE>:

bool flag_timeout_err = false;


// config du module BLE
void config_BLE(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	BLE.EnterATMode();           // AT>9
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <config_BLE+0x80>)
 800165a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800165e:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001660:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001664:	481c      	ldr	r0, [pc, #112]	@ (80016d8 <config_BLE+0x84>)
 8001666:	f000 f843 	bl	80016f0 <wait_until_flag>
	BLE.SetRole(BLE_ROLE);              // CLIENT
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <config_BLE+0x80>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	2001      	movs	r0, #1
 8001670:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001672:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001676:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <config_BLE+0x84>)
 8001678:	f000 f83a 	bl	80016f0 <wait_until_flag>
	BLE.SetTargetUUID(BLE_UUID);   // UUID du service du drone
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <config_BLE+0x80>)
 800167e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001680:	4816      	ldr	r0, [pc, #88]	@ (80016dc <config_BLE+0x88>)
 8001682:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001684:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001688:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <config_BLE+0x84>)
 800168a:	f000 f831 	bl	80016f0 <wait_until_flag>
	BLE.SetAutoConnect(BLE_MAC_DRONE);  // MAC du drone
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <config_BLE+0x80>)
 8001690:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <config_BLE+0x8c>)
 8001696:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001698:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800169c:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <config_BLE+0x84>)
 800169e:	f000 f827 	bl	80016f0 <wait_until_flag>
	BLE.SetName(NOM_DE_LA_MANETTE);
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <config_BLE+0x80>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	480f      	ldr	r0, [pc, #60]	@ (80016e4 <config_BLE+0x90>)
 80016a8:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80016aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016ae:	480a      	ldr	r0, [pc, #40]	@ (80016d8 <config_BLE+0x84>)
 80016b0:	f000 f81e 	bl	80016f0 <wait_until_flag>
	BLE.Reset();                 // Redémarre pour appliquer
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <config_BLE+0x80>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4798      	blx	r3
	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
 80016ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016be:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <config_BLE+0x94>)
 80016c0:	f000 f816 	bl	80016f0 <wait_until_flag>
	wait_until_flag(&flags.CONNECTING,BLE_TIMEOUT_MS);
 80016c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <config_BLE+0x98>)
 80016ca:	f000 f811 	bl	80016f0 <wait_until_flag>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000
 80016d8:	200003d7 	.word	0x200003d7
 80016dc:	080051c8 	.word	0x080051c8
 80016e0:	080051d0 	.word	0x080051d0
 80016e4:	080051e0 	.word	0x080051e0
 80016e8:	200003d9 	.word	0x200003d9
 80016ec:	200003da 	.word	0x200003da

080016f0 <wait_until_flag>:

void wait_until_flag(volatile bool* flag, uint32_t timeout_ms) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 80016fa:	f000 fac3 	bl	8001c84 <HAL_GetTick>
 80016fe:	60f8      	str	r0, [r7, #12]

    while (!(*flag)) {
 8001700:	e00d      	b.n	800171e <wait_until_flag+0x2e>
        if (HAL_GetTick() - start >= timeout_ms) {
 8001702:	f000 fabf 	bl	8001c84 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d805      	bhi.n	800171e <wait_until_flag+0x2e>
            flag_timeout_err = true;      // Indique qu'un timeout s’est produit
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <wait_until_flag+0x50>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
            TIMEOUT_ERR_HANDLER();        // Fonction de traitement personnalisée
 8001718:	f000 f814 	bl	8001744 <TIMEOUT_ERR_HANDLER>
            return;                       // Sort de la fonction
 800171c:	e00d      	b.n	800173a <wait_until_flag+0x4a>
    while (!(*flag)) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e9      	bne.n	8001702 <wait_until_flag+0x12>
        }
    }

    *flag = false;                        // Réinitialise le flag une fois traité
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
    flag_timeout_err = false;             // Tout s’est bien passé
 8001734:	4b02      	ldr	r3, [pc, #8]	@ (8001740 <wait_until_flag+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200003db 	.word	0x200003db

08001744 <TIMEOUT_ERR_HANDLER>:


void TIMEOUT_ERR_HANDLER(void){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	//Ecrire ça plus tard
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001800 <HAL_RTC_MspInit+0x4c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d118      	bne.n	80017f8 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80017c6:	f000 fdab 	bl	8002320 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_RTC_MspInit+0x50>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <HAL_RTC_MspInit+0x50>)
 80017d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_RTC_MspInit+0x50>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_RTC_MspInit+0x54>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 fb2a 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f000 fb43 	bl	8001e7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40002800 	.word	0x40002800
 8001804:	40021000 	.word	0x40021000
 8001808:	4242043c 	.word	0x4242043c

0800180c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <HAL_TIM_PWM_MspInit+0xa0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10c      	bne.n	8001838 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001836:	e034      	b.n	80018a2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d10c      	bne.n	800185c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
}
 800185a:	e022      	b.n	80018a2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_TIM_PWM_MspInit+0xa8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	e010      	b.n	80018a2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_TIM_PWM_MspInit+0xac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_TIM_PWM_MspInit+0xa4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800

080018bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	@ (80019cc <HAL_TIM_MspPostInit+0x110>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d119      	bne.n	8001910 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a3b      	ldr	r2, [pc, #236]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2302      	movs	r3, #2
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	4619      	mov	r1, r3
 8001908:	4832      	ldr	r0, [pc, #200]	@ (80019d4 <HAL_TIM_MspPostInit+0x118>)
 800190a:	f000 fb85 	bl	8002018 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800190e:	e059      	b.n	80019c4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001918:	d118      	bne.n	800194c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a2c      	ldr	r2, [pc, #176]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001932:	2304      	movs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	4619      	mov	r1, r3
 8001944:	4823      	ldr	r0, [pc, #140]	@ (80019d4 <HAL_TIM_MspPostInit+0x118>)
 8001946:	f000 fb67 	bl	8002018 <HAL_GPIO_Init>
}
 800194a:	e03b      	b.n	80019c4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <HAL_TIM_MspPostInit+0x11c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d118      	bne.n	8001988 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196e:	2340      	movs	r3, #64	@ 0x40
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	4619      	mov	r1, r3
 8001980:	4814      	ldr	r0, [pc, #80]	@ (80019d4 <HAL_TIM_MspPostInit+0x118>)
 8001982:	f000 fb49 	bl	8002018 <HAL_GPIO_Init>
}
 8001986:	e01d      	b.n	80019c4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <HAL_TIM_MspPostInit+0x120>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d118      	bne.n	80019c4 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_TIM_MspPostInit+0x114>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2302      	movs	r3, #2
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	4619      	mov	r1, r3
 80019be:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <HAL_TIM_MspPostInit+0x124>)
 80019c0:	f000 fb2a 	bl	8002018 <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010800 	.word	0x40010800
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40000800 	.word	0x40000800
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <HAL_UART_MspInit+0x9c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d139      	bne.n	8001a78 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a4a:	f000 fae5 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a64:	f000 fad8 	bl	8002018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2025      	movs	r0, #37	@ 0x25
 8001a6e:	f000 f9ea 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a72:	2025      	movs	r0, #37	@ 0x25
 8001a74:	f000 fa03 	bl	8001e7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010800 	.word	0x40010800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f8c0 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  DC_Motor_RampTick();
 8001ae0:	f7fe fe98 	bl	8000814 <DC_Motor_RampTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <RTC_IRQHandler+0x10>)
 8001aee:	f001 faa8 	bl	8003042 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001cc 	.word	0x200001cc

08001afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <USART1_IRQHandler+0x10>)
 8001b02:	f001 ff9f 	bl	8003a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000300 	.word	0x20000300

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f002 fd28 	bl	8004594 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20005000 	.word	0x20005000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	200003dc 	.word	0x200003dc
 8001b78:	20000530 	.word	0x20000530

08001b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff fff8 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b8e:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ba4:	4c09      	ldr	r4, [pc, #36]	@ (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f002 fcf5 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff f9fd 	bl	8000fb4 <main>
  bx lr
 8001bba:	4770      	bx	lr
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001bc4:	08005274 	.word	0x08005274
  ldr r2, =_sbss
 8001bc8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001bcc:	2000052c 	.word	0x2000052c

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_Init+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_Init+0x28>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f923 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fdae 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f93b 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f903 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000f4 	.word	0x200000f4
 8001c58:	200000fc 	.word	0x200000fc
 8001c5c:	200000f8 	.word	0x200000f8

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a03      	ldr	r2, [pc, #12]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	200000fc 	.word	0x200000fc
 8001c80:	200003e0 	.word	0x200003e0

08001c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b02      	ldr	r3, [pc, #8]	@ (8001c94 <HAL_GetTick+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	200003e0 	.word	0x200003e0

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	@ (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff90 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff2d 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff42 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa2 	bl	8001dec <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d008      	beq.n	8001edc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e020      	b.n	8001f1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 020e 	bic.w	r2, r2, #14
 8001eea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d005      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e051      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 020e 	bic.w	r2, r2, #14
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <HAL_DMA_Abort_IT+0xd4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d029      	beq.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <HAL_DMA_Abort_IT+0xd8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x9e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	@ (8002004 <HAL_DMA_Abort_IT+0xdc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x98>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002008 <HAL_DMA_Abort_IT+0xe0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_Abort_IT+0x92>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_DMA_Abort_IT+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x8c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <HAL_DMA_Abort_IT+0xe8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <HAL_DMA_Abort_IT+0x86>
 8001fa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fac:	e00e      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb2:	e00b      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb8:	e008      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fbe:	e005      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc4:	e002      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_Abort_IT+0xa4>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_DMA_Abort_IT+0xec>)
 8001fce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
    } 
  }
  return status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40020008 	.word	0x40020008
 8002000:	4002001c 	.word	0x4002001c
 8002004:	40020030 	.word	0x40020030
 8002008:	40020044 	.word	0x40020044
 800200c:	40020058 	.word	0x40020058
 8002010:	4002006c 	.word	0x4002006c
 8002014:	40020000 	.word	0x40020000

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b08b      	sub	sp, #44	@ 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	e169      	b.n	8002300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800202c:	2201      	movs	r2, #1
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 8158 	bne.w	80022fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a9a      	ldr	r2, [pc, #616]	@ (80022b8 <HAL_GPIO_Init+0x2a0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d05e      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002054:	4a98      	ldr	r2, [pc, #608]	@ (80022b8 <HAL_GPIO_Init+0x2a0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d875      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800205a:	4a98      	ldr	r2, [pc, #608]	@ (80022bc <HAL_GPIO_Init+0x2a4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d058      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002060:	4a96      	ldr	r2, [pc, #600]	@ (80022bc <HAL_GPIO_Init+0x2a4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d86f      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002066:	4a96      	ldr	r2, [pc, #600]	@ (80022c0 <HAL_GPIO_Init+0x2a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d052      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 800206c:	4a94      	ldr	r2, [pc, #592]	@ (80022c0 <HAL_GPIO_Init+0x2a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d869      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002072:	4a94      	ldr	r2, [pc, #592]	@ (80022c4 <HAL_GPIO_Init+0x2ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d04c      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002078:	4a92      	ldr	r2, [pc, #584]	@ (80022c4 <HAL_GPIO_Init+0x2ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d863      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800207e:	4a92      	ldr	r2, [pc, #584]	@ (80022c8 <HAL_GPIO_Init+0x2b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d046      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
 8002084:	4a90      	ldr	r2, [pc, #576]	@ (80022c8 <HAL_GPIO_Init+0x2b0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d85d      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 800208a:	2b12      	cmp	r3, #18
 800208c:	d82a      	bhi.n	80020e4 <HAL_GPIO_Init+0xcc>
 800208e:	2b12      	cmp	r3, #18
 8002090:	d859      	bhi.n	8002146 <HAL_GPIO_Init+0x12e>
 8002092:	a201      	add	r2, pc, #4	@ (adr r2, 8002098 <HAL_GPIO_Init+0x80>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	08002113 	.word	0x08002113
 800209c:	080020ed 	.word	0x080020ed
 80020a0:	080020ff 	.word	0x080020ff
 80020a4:	08002141 	.word	0x08002141
 80020a8:	08002147 	.word	0x08002147
 80020ac:	08002147 	.word	0x08002147
 80020b0:	08002147 	.word	0x08002147
 80020b4:	08002147 	.word	0x08002147
 80020b8:	08002147 	.word	0x08002147
 80020bc:	08002147 	.word	0x08002147
 80020c0:	08002147 	.word	0x08002147
 80020c4:	08002147 	.word	0x08002147
 80020c8:	08002147 	.word	0x08002147
 80020cc:	08002147 	.word	0x08002147
 80020d0:	08002147 	.word	0x08002147
 80020d4:	08002147 	.word	0x08002147
 80020d8:	08002147 	.word	0x08002147
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	08002109 	.word	0x08002109
 80020e4:	4a79      	ldr	r2, [pc, #484]	@ (80022cc <HAL_GPIO_Init+0x2b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ea:	e02c      	b.n	8002146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	623b      	str	r3, [r7, #32]
          break;
 80020f2:	e029      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	3304      	adds	r3, #4
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	e024      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	3308      	adds	r3, #8
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e01f      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	330c      	adds	r3, #12
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e01a      	b.n	8002148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800211a:	2304      	movs	r3, #4
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e013      	b.n	8002148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002128:	2308      	movs	r3, #8
 800212a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	611a      	str	r2, [r3, #16]
          break;
 8002132:	e009      	b.n	8002148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002134:	2308      	movs	r3, #8
 8002136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	615a      	str	r2, [r3, #20]
          break;
 800213e:	e003      	b.n	8002148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x130>
          break;
 8002146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2bff      	cmp	r3, #255	@ 0xff
 800214c:	d801      	bhi.n	8002152 <HAL_GPIO_Init+0x13a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_Init+0x13e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2bff      	cmp	r3, #255	@ 0xff
 800215c:	d802      	bhi.n	8002164 <HAL_GPIO_Init+0x14c>
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x152>
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3b08      	subs	r3, #8
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	210f      	movs	r1, #15
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	6a39      	ldr	r1, [r7, #32]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80b1 	beq.w	80022fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002198:	4b4d      	ldr	r3, [pc, #308]	@ (80022d0 <HAL_GPIO_Init+0x2b8>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a4c      	ldr	r2, [pc, #304]	@ (80022d0 <HAL_GPIO_Init+0x2b8>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b4a      	ldr	r3, [pc, #296]	@ (80022d0 <HAL_GPIO_Init+0x2b8>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b0:	4a48      	ldr	r2, [pc, #288]	@ (80022d4 <HAL_GPIO_Init+0x2bc>)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a40      	ldr	r2, [pc, #256]	@ (80022d8 <HAL_GPIO_Init+0x2c0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1ec>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3f      	ldr	r2, [pc, #252]	@ (80022dc <HAL_GPIO_Init+0x2c4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1e8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3e      	ldr	r2, [pc, #248]	@ (80022e0 <HAL_GPIO_Init+0x2c8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3d      	ldr	r2, [pc, #244]	@ (80022e4 <HAL_GPIO_Init+0x2cc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1e0>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021f8:	2304      	movs	r3, #4
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002204:	2300      	movs	r3, #0
 8002206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002216:	492f      	ldr	r1, [pc, #188]	@ (80022d4 <HAL_GPIO_Init+0x2bc>)
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	492c      	ldr	r1, [pc, #176]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800223e:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4928      	ldr	r1, [pc, #160]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4922      	ldr	r1, [pc, #136]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	491e      	ldr	r1, [pc, #120]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4918      	ldr	r1, [pc, #96]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4914      	ldr	r1, [pc, #80]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d021      	beq.n	80022ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	490e      	ldr	r1, [pc, #56]	@ (80022e8 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e021      	b.n	80022fa <HAL_GPIO_Init+0x2e2>
 80022b6:	bf00      	nop
 80022b8:	10320000 	.word	0x10320000
 80022bc:	10310000 	.word	0x10310000
 80022c0:	10220000 	.word	0x10220000
 80022c4:	10210000 	.word	0x10210000
 80022c8:	10120000 	.word	0x10120000
 80022cc:	10110000 	.word	0x10110000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40010800 	.word	0x40010800
 80022dc:	40010c00 	.word	0x40010c00
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40011400 	.word	0x40011400
 80022e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_GPIO_Init+0x304>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4909      	ldr	r1, [pc, #36]	@ (800231c <HAL_GPIO_Init+0x304>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f ae8e 	bne.w	800202c <HAL_GPIO_Init+0x14>
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	372c      	adds	r7, #44	@ 0x2c
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	420e0020 	.word	0x420e0020

08002338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e272      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8087 	beq.w	8002466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002358:	4b92      	ldr	r3, [pc, #584]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b04      	cmp	r3, #4
 8002362:	d00c      	beq.n	800237e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002364:	4b8f      	ldr	r3, [pc, #572]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d112      	bne.n	8002396 <HAL_RCC_OscConfig+0x5e>
 8002370:	4b8c      	ldr	r3, [pc, #560]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237c:	d10b      	bne.n	8002396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237e:	4b89      	ldr	r3, [pc, #548]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d06c      	beq.n	8002464 <HAL_RCC_OscConfig+0x12c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d168      	bne.n	8002464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e24c      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x76>
 80023a0:	4b80      	ldr	r3, [pc, #512]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7f      	ldr	r2, [pc, #508]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0xd4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b7b      	ldr	r3, [pc, #492]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7a      	ldr	r2, [pc, #488]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b78      	ldr	r3, [pc, #480]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a77      	ldr	r2, [pc, #476]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xd4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0xbc>
 80023da:	4b72      	ldr	r3, [pc, #456]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a71      	ldr	r2, [pc, #452]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xd4>
 80023f4:	4b6b      	ldr	r3, [pc, #428]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b68      	ldr	r3, [pc, #416]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a67      	ldr	r2, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fc36 	bl	8001c84 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fc32 	bl	8001c84 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e200      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b5d      	ldr	r3, [pc, #372]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xe4>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fc22 	bl	8001c84 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fc1e 	bl	8001c84 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1ec      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x10c>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002472:	4b4c      	ldr	r3, [pc, #304]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800247e:	4b49      	ldr	r3, [pc, #292]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x18c>
 800248a:	4b46      	ldr	r3, [pc, #280]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b43      	ldr	r3, [pc, #268]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x176>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1c0      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b3d      	ldr	r3, [pc, #244]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4939      	ldr	r1, [pc, #228]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e03a      	b.n	800253a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_RCC_OscConfig+0x270>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fbd7 	bl	8001c84 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fbd3 	bl	8001c84 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1a1      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4927      	ldr	r1, [pc, #156]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <HAL_RCC_OscConfig+0x270>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fbb6 	bl	8001c84 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7ff fbb2 	bl	8001c84 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e180      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d03a      	beq.n	80025bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d019      	beq.n	8002582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_RCC_OscConfig+0x274>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff fb96 	bl	8001c84 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7ff fb92 	bl	8001c84 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e160      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <HAL_RCC_OscConfig+0x26c>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257a:	2001      	movs	r0, #1
 800257c:	f000 face 	bl	8002b1c <RCC_Delay>
 8002580:	e01c      	b.n	80025bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <HAL_RCC_OscConfig+0x274>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7ff fb7c 	bl	8001c84 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258e:	e00f      	b.n	80025b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff fb78 	bl	8001c84 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d908      	bls.n	80025b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e146      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	42420000 	.word	0x42420000
 80025ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	4b92      	ldr	r3, [pc, #584]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e9      	bne.n	8002590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80a6 	beq.w	8002716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b8b      	ldr	r3, [pc, #556]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a87      	ldr	r2, [pc, #540]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e4:	61d3      	str	r3, [r2, #28]
 80025e6:	4b85      	ldr	r3, [pc, #532]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <HAL_RCC_OscConfig+0x4c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002602:	4b7f      	ldr	r3, [pc, #508]	@ (8002800 <HAL_RCC_OscConfig+0x4c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7e      	ldr	r2, [pc, #504]	@ (8002800 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7ff fb39 	bl	8001c84 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7ff fb35 	bl	8001c84 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	@ 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e103      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b75      	ldr	r3, [pc, #468]	@ (8002800 <HAL_RCC_OscConfig+0x4c8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 800263c:	4b6f      	ldr	r3, [pc, #444]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a6e      	ldr	r2, [pc, #440]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	e02d      	b.n	80026a6 <HAL_RCC_OscConfig+0x36e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x334>
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a69      	ldr	r2, [pc, #420]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6213      	str	r3, [r2, #32]
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a66      	ldr	r2, [pc, #408]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	e01c      	b.n	80026a6 <HAL_RCC_OscConfig+0x36e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b05      	cmp	r3, #5
 8002672:	d10c      	bne.n	800268e <HAL_RCC_OscConfig+0x356>
 8002674:	4b61      	ldr	r3, [pc, #388]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4a60      	ldr	r2, [pc, #384]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6213      	str	r3, [r2, #32]
 8002680:	4b5e      	ldr	r3, [pc, #376]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a5d      	ldr	r2, [pc, #372]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	e00b      	b.n	80026a6 <HAL_RCC_OscConfig+0x36e>
 800268e:	4b5b      	ldr	r3, [pc, #364]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a5a      	ldr	r2, [pc, #360]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6213      	str	r3, [r2, #32]
 800269a:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d015      	beq.n	80026da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7ff fae9 	bl	8001c84 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff fae5 	bl	8001c84 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0b1      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	4b4b      	ldr	r3, [pc, #300]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ee      	beq.n	80026b6 <HAL_RCC_OscConfig+0x37e>
 80026d8:	e014      	b.n	8002704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7ff fad3 	bl	8001c84 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7ff facf 	bl	8001c84 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e09b      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	4b40      	ldr	r3, [pc, #256]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ee      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b3c      	ldr	r3, [pc, #240]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a3b      	ldr	r2, [pc, #236]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8087 	beq.w	800282e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d061      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d146      	bne.n	80027c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_RCC_OscConfig+0x4cc>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff faa3 	bl	8001c84 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7ff fa9f 	bl	8001c84 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e06d      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	4b29      	ldr	r3, [pc, #164]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002768:	d108      	bne.n	800277c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276a:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4921      	ldr	r1, [pc, #132]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a19      	ldr	r1, [r3, #32]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	430b      	orrs	r3, r1
 800278e:	491b      	ldr	r1, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7ff fa73 	bl	8001c84 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7ff fa6f 	bl	8001c84 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e03d      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46a>
 80027c0:	e035      	b.n	800282e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x4cc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff fa5c 	bl	8001c84 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff fa58 	bl	8001c84 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e026      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x498>
 80027ee:	e01e      	b.n	800282e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e019      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_OscConfig+0x500>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0d0      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b6a      	ldr	r3, [pc, #424]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d910      	bls.n	8002880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b67      	ldr	r3, [pc, #412]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4965      	ldr	r1, [pc, #404]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a58      	ldr	r2, [pc, #352]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d040      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d115      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e073      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06b      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b39      	ldr	r3, [pc, #228]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4936      	ldr	r1, [pc, #216]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7ff f9aa 	bl	8001c84 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7ff f9a6 	bl	8001c84 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e053      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d210      	bcs.n	800298c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 0207 	bic.w	r2, r3, #7
 8002972:	4922      	ldr	r1, [pc, #136]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <HAL_RCC_ClockConfig+0x1cc>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1d0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f908 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	080051f0 	.word	0x080051f0
 8002a08:	200000f4 	.word	0x200000f4
 8002a0c:	200000f8 	.word	0x200000f8

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3e:	e027      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a42:	613b      	str	r3, [r7, #16]
      break;
 8002a44:	e027      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5e:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0c5b      	lsrs	r3, r3, #17
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	4a11      	ldr	r2, [pc, #68]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a72:	fb03 f202 	mul.w	r2, r3, r2
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e004      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	613b      	str	r3, [r7, #16]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a92:	613b      	str	r3, [r7, #16]
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	693b      	ldr	r3, [r7, #16]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	007a1200 	.word	0x007a1200
 8002aac:	08005208 	.word	0x08005208
 8002ab0:	08005218 	.word	0x08005218
 8002ab4:	003d0900 	.word	0x003d0900

08002ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b02      	ldr	r3, [pc, #8]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	200000f4 	.word	0x200000f4

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff2 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08005200 	.word	0x08005200

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffde 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	0adb      	lsrs	r3, r3, #11
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08005200 	.word	0x08005200

08002b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <RCC_Delay+0x34>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <RCC_Delay+0x38>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0a5b      	lsrs	r3, r3, #9
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b38:	bf00      	nop
  }
  while (Delay --);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f9      	bne.n	8002b38 <RCC_Delay+0x1c>
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	200000f4 	.word	0x200000f4
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d07d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b78:	4b4f      	ldr	r3, [pc, #316]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	61d3      	str	r3, [r2, #28]
 8002b90:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b46      	ldr	r3, [pc, #280]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d118      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bac:	4b43      	ldr	r3, [pc, #268]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a42      	ldr	r2, [pc, #264]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb8:	f7ff f864 	bl	8001c84 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7ff f860 	bl	8001c84 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e06d      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02e      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d027      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c06:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c12:	4a29      	ldr	r2, [pc, #164]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d014      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff f82f 	bl	8001c84 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7ff f82b 	bl	8001c84 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e036      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4917      	ldr	r1, [pc, #92]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	490b      	ldr	r1, [pc, #44]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4904      	ldr	r1, [pc, #16]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42420440 	.word	0x42420440

08002cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	f200 808a 	bhi.w	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d045      	beq.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cfa:	e082      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002cfc:	4b46      	ldr	r3, [pc, #280]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d02:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d07b      	beq.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	4a41      	ldr	r2, [pc, #260]	@ (8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d26:	4b3c      	ldr	r3, [pc, #240]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0c5b      	lsrs	r3, r3, #17
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	4a3b      	ldr	r2, [pc, #236]	@ (8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d40:	4a38      	ldr	r2, [pc, #224]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e004      	b.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4a34      	ldr	r2, [pc, #208]	@ (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d68:	d102      	bne.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	61bb      	str	r3, [r7, #24]
      break;
 8002d6e:	e04a      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4a2d      	ldr	r2, [pc, #180]	@ (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
      break;
 8002d7e:	e042      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d90:	d108      	bne.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	e01f      	b.n	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002dbc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dce:	d11c      	bne.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ddc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002de0:	61bb      	str	r3, [r7, #24]
      break;
 8002de2:	e012      	b.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002de4:	e011      	b.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002de6:	f7ff fe85 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0b9b      	lsrs	r3, r3, #14
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	61bb      	str	r3, [r7, #24]
      break;
 8002e00:	e004      	b.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e0a:	bf00      	nop
    }
  }
  return (frequency);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	0800521c 	.word	0x0800521c
 8002e20:	0800522c 	.word	0x0800522c
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	003d0900 	.word	0x003d0900
 8002e2c:	aaaaaaab 	.word	0xaaaaaaab

08002e30 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07a      	b.n	8002f3c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7c5b      	ldrb	r3, [r3, #17]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe fcac 	bl	80017b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f870 	bl	8002f48 <HAL_RTC_WaitForSynchro>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e061      	b.n	8002f3c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f892 	bl	8002fa2 <RTC_EnterInitMode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e056      	b.n	8002f3c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0207 	bic.w	r2, r2, #7
 8002e9c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RTC_Init+0x114>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <HAL_RTC_Init+0x114>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RTC_Init+0x114>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4921      	ldr	r1, [pc, #132]	@ (8002f44 <HAL_RTC_Init+0x114>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f7ff fef4 	bl	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002edc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e026      	b.n	8002f3c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0c1a      	lsrs	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f002 020f 	and.w	r2, r2, #15
 8002f00:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f870 	bl	8002ff2 <RTC_ExitInitMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00c      	b.n	8002f3c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40006c00 	.word	0x40006c00

08002f48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01d      	b.n	8002f9a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0208 	bic.w	r2, r2, #8
 8002f6c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002f6e:	f7fe fe89 	bl	8001c84 <HAL_GetTick>
 8002f72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f74:	e009      	b.n	8002f8a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f76:	f7fe fe85 	bl	8001c84 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f84:	d901      	bls.n	8002f8a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e007      	b.n	8002f9a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002fae:	f7fe fe69 	bl	8001c84 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002fb4:	e009      	b.n	8002fca <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002fb6:	f7fe fe65 	bl	8001c84 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fc4:	d901      	bls.n	8002fca <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e00f      	b.n	8002fea <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ee      	beq.n	8002fb6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0210 	orr.w	r2, r2, #16
 8002fe6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800300e:	f7fe fe39 	bl	8001c84 <HAL_GetTick>
 8003012:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003014:	e009      	b.n	800302a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003016:	f7fe fe35 	bl	8001c84 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003024:	d901      	bls.n	800302a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e007      	b.n	800303a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ee      	beq.n	8003016 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d027      	beq.n	80030a8 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f824 	bl	80030c2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0204 	mvn.w	r2, #4
 8003082:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	745a      	strb	r2, [r3, #17]
 800308a:	e005      	b.n	8003098 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f80f 	bl	80030b0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fb86 	bl	800180c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 f8f0 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0ae      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	f200 809f 	bhi.w	80032e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031a2:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031dd 	.word	0x080031dd
 80031ac:	080032e1 	.word	0x080032e1
 80031b0:	080032e1 	.word	0x080032e1
 80031b4:	080032e1 	.word	0x080032e1
 80031b8:	0800321d 	.word	0x0800321d
 80031bc:	080032e1 	.word	0x080032e1
 80031c0:	080032e1 	.word	0x080032e1
 80031c4:	080032e1 	.word	0x080032e1
 80031c8:	0800325f 	.word	0x0800325f
 80031cc:	080032e1 	.word	0x080032e1
 80031d0:	080032e1 	.word	0x080032e1
 80031d4:	080032e1 	.word	0x080032e1
 80031d8:	0800329f 	.word	0x0800329f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8f6 	bl	80033d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6999      	ldr	r1, [r3, #24]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	619a      	str	r2, [r3, #24]
      break;
 800321a:	e064      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f93c 	bl	80034a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6999      	ldr	r1, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	619a      	str	r2, [r3, #24]
      break;
 800325c:	e043      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f985 	bl	8003574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0208 	orr.w	r2, r2, #8
 8003278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0204 	bic.w	r2, r2, #4
 8003288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	61da      	str	r2, [r3, #28]
      break;
 800329c:	e023      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f9cf 	bl	8003648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	021a      	lsls	r2, r3, #8
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	61da      	str	r2, [r3, #28]
      break;
 80032de:	e002      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	75fb      	strb	r3, [r7, #23]
      break;
 80032e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <TIM_Base_SetConfig+0xd0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2c      	ldr	r2, [pc, #176]	@ (80033cc <TIM_Base_SetConfig+0xd4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <TIM_Base_SetConfig+0xd8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <TIM_Base_SetConfig+0xd0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <TIM_Base_SetConfig+0xd4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <TIM_Base_SetConfig+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <TIM_Base_SetConfig+0xd0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f023 0201 	bic.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]
  }
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800

080033d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f023 0201 	bic.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0302 	bic.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <TIM_OC1_SetConfig+0xc8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10c      	bne.n	800344a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0308 	bic.w	r3, r3, #8
 8003436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a13      	ldr	r2, [pc, #76]	@ (800349c <TIM_OC1_SetConfig+0xc8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f023 0210 	bic.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0320 	bic.w	r3, r3, #32
 80034ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003570 <TIM_OC2_SetConfig+0xd0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10d      	bne.n	800351c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800351a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <TIM_OC2_SetConfig+0xd0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d113      	bne.n	800354c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800352a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00

08003574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <TIM_OC3_SetConfig+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10d      	bne.n	80035ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <TIM_OC3_SetConfig+0xd0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d113      	bne.n	800361e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00

08003648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	031b      	lsls	r3, r3, #12
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <TIM_OC4_SetConfig+0x98>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00

080036e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e046      	b.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003748:	d009      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a12      	ldr	r2, [pc, #72]	@ (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a10      	ldr	r2, [pc, #64]	@ (800379c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10c      	bne.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4313      	orrs	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e03d      	b.n	8003838 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e042      	b.n	80038da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fe f8bb 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	@ 0x24
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003884:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fdb8 	bl	80043fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800389a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b08a      	sub	sp, #40	@ 0x28
 80038e6:	af02      	add	r7, sp, #8
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d175      	bne.n	80039ee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x2c>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06e      	b.n	80039f0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2221      	movs	r2, #33	@ 0x21
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003920:	f7fe f9b0 	bl	8001c84 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d108      	bne.n	800394e <HAL_UART_Transmit+0x6c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e003      	b.n	8003956 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003956:	e02e      	b.n	80039b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	@ 0x80
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fb1d 	bl	8003fa2 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e03a      	b.n	80039f0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	3302      	adds	r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e007      	b.n	80039a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	781a      	ldrb	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3301      	adds	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cb      	bne.n	8003958 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	@ 0x40
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fae9 	bl	8003fa2 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e006      	b.n	80039f0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d112      	bne.n	8003a38 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_Receive_IT+0x26>
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00b      	b.n	8003a3a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fb10 	bl	8004054 <UART_Start_Receive_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0ba      	sub	sp, #232	@ 0xe8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fbec 	bl	8004280 <UART_Receive_IT>
      return;
 8003aa8:	e25b      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80de 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 81f2 	beq.w	8003f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb77 	bl	8004280 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_UART_IRQHandler+0x17a>
 8003bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04f      	beq.n	8003c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa81 	bl	80040c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d041      	beq.n	8003c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d9      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e24 <HAL_UART_IRQHandler+0x3e0>)
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f978 	bl	8001f28 <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00e      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f993 	bl	8003f7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00a      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f98f 	bl	8003f7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e006      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f98b 	bl	8003f7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c6a:	e175      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	bf00      	nop
    return;
 8003c6e:	e173      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 814f 	bne.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8148 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8141 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80b6 	beq.w	8003e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8145 	beq.w	8003f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f080 813e 	bcs.w	8003f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	f000 8088 	beq.w	8003e04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1d9      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e1      	bne.n	8003d40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003da0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003da2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003da6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e3      	bne.n	8003d7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd4:	f023 0310 	bic.w	r3, r3, #16
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003de6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003de8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f857 	bl	8001eb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8b6 	bl	8003f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e20:	e09c      	b.n	8003f5c <HAL_UART_IRQHandler+0x518>
 8003e22:	bf00      	nop
 8003e24:	0800418b 	.word	0x0800418b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808e 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8089 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	623b      	str	r3, [r7, #32]
   return(result);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e3      	bne.n	8003ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f83b 	bl	8003f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f16:	e023      	b.n	8003f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f93e 	bl	80041b2 <UART_Transmit_IT>
    return;
 8003f36:	e014      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f97d 	bl	8004250 <UART_EndTransmit_IT>
    return;
 8003f56:	e004      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f60:	bf00      	nop
  }
}
 8003f62:	37e8      	adds	r7, #232	@ 0xe8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb2:	e03b      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d037      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fd fe62 	bl	8001c84 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	6a3a      	ldr	r2, [r7, #32]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e03a      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d020      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d01d      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d116      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f856 	bl	80040c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2208      	movs	r2, #8
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e00f      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	429a      	cmp	r2, r3
 8004048:	d0b4      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2222      	movs	r2, #34	@ 0x22
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004098:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0220 	orr.w	r2, r2, #32
 80040b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b095      	sub	sp, #84	@ 0x54
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	61fb      	str	r3, [r7, #28]
   return(result);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	2b01      	cmp	r3, #1
 800413c:	d119      	bne.n	8004172 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	60bb      	str	r3, [r7, #8]
   return(result);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 0310 	bic.w	r3, r3, #16
 8004154:	647b      	str	r3, [r7, #68]	@ 0x44
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800415e:	61ba      	str	r2, [r7, #24]
 8004160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004180:	bf00      	nop
 8004182:	3754      	adds	r7, #84	@ 0x54
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fee8 	bl	8003f7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b21      	cmp	r3, #33	@ 0x21
 80041c4:	d13e      	bne.n	8004244 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ce:	d114      	bne.n	80041fa <UART_Transmit_IT+0x48>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d110      	bne.n	80041fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	1c9a      	adds	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	621a      	str	r2, [r3, #32]
 80041f8:	e008      	b.n	800420c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6211      	str	r1, [r2, #32]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29b      	uxth	r3, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4619      	mov	r1, r3
 800421a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10f      	bne.n	8004240 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800422e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800423e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004266:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fe79 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08c      	sub	sp, #48	@ 0x30
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b22      	cmp	r3, #34	@ 0x22
 8004292:	f040 80ae 	bne.w	80043f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429e:	d117      	bne.n	80042d0 <UART_Receive_IT+0x50>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d113      	bne.n	80042d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ce:	e026      	b.n	800431e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d007      	beq.n	80042f4 <UART_Receive_IT+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <UART_Receive_IT+0x82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e008      	b.n	8004314 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29b      	uxth	r3, r3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4619      	mov	r1, r3
 800432c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800432e:	2b00      	cmp	r3, #0
 8004330:	d15d      	bne.n	80043ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0220 	bic.w	r2, r2, #32
 8004340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	2b01      	cmp	r3, #1
 8004376:	d135      	bne.n	80043e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	613b      	str	r3, [r7, #16]
   return(result);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	623a      	str	r2, [r7, #32]
 80043a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	69f9      	ldr	r1, [r7, #28]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d10a      	bne.n	80043d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fdd5 	bl	8003f8c <HAL_UARTEx_RxEventCallback>
 80043e2:	e002      	b.n	80043ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fd f857 	bl	8001498 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e002      	b.n	80043f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3730      	adds	r7, #48	@ 0x30
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004436:	f023 030c 	bic.w	r3, r3, #12
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	430b      	orrs	r3, r1
 8004442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	@ (8004510 <UART_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fb46 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe fb2e 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8004470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	0119      	lsls	r1, r3, #4
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <UART_SetConfig+0x118>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	@ 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	@ 0x32
 80044bc:	4a15      	ldr	r2, [pc, #84]	@ (8004514 <UART_SetConfig+0x118>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	4419      	add	r1, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <UART_SetConfig+0x118>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	@ 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	@ 0x32
 80044f4:	4a07      	ldr	r2, [pc, #28]	@ (8004514 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	440a      	add	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013800 	.word	0x40013800
 8004514:	51eb851f 	.word	0x51eb851f

08004518 <sniprintf>:
 8004518:	b40c      	push	{r2, r3}
 800451a:	b530      	push	{r4, r5, lr}
 800451c:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <sniprintf+0x68>)
 800451e:	1e0c      	subs	r4, r1, #0
 8004520:	681d      	ldr	r5, [r3, #0]
 8004522:	b09d      	sub	sp, #116	@ 0x74
 8004524:	da08      	bge.n	8004538 <sniprintf+0x20>
 8004526:	238b      	movs	r3, #139	@ 0x8b
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	b01d      	add	sp, #116	@ 0x74
 8004530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004534:	b002      	add	sp, #8
 8004536:	4770      	bx	lr
 8004538:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800453c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004546:	bf0c      	ite	eq
 8004548:	4623      	moveq	r3, r4
 800454a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	9307      	str	r3, [sp, #28]
 8004552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004556:	9002      	str	r0, [sp, #8]
 8004558:	9006      	str	r0, [sp, #24]
 800455a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800455e:	4628      	mov	r0, r5
 8004560:	ab21      	add	r3, sp, #132	@ 0x84
 8004562:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004564:	a902      	add	r1, sp, #8
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	f000 f99a 	bl	80048a0 <_svfiprintf_r>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	bfbc      	itt	lt
 8004570:	238b      	movlt	r3, #139	@ 0x8b
 8004572:	602b      	strlt	r3, [r5, #0]
 8004574:	2c00      	cmp	r4, #0
 8004576:	d0da      	beq.n	800452e <sniprintf+0x16>
 8004578:	2200      	movs	r2, #0
 800457a:	9b02      	ldr	r3, [sp, #8]
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e7d6      	b.n	800452e <sniprintf+0x16>
 8004580:	20000100 	.word	0x20000100

08004584 <memset>:
 8004584:	4603      	mov	r3, r0
 8004586:	4402      	add	r2, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	@ (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000100 	.word	0x20000100

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	@ (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	@ (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	f000 fc7e 	bl	8004eb0 <_init>
 80045b4:	2600      	movs	r6, #0
 80045b6:	4d0a      	ldr	r5, [pc, #40]	@ (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	0800526c 	.word	0x0800526c
 80045dc:	0800526c 	.word	0x0800526c
 80045e0:	0800526c 	.word	0x0800526c
 80045e4:	08005270 	.word	0x08005270

080045e8 <__retarget_lock_acquire_recursive>:
 80045e8:	4770      	bx	lr

080045ea <__retarget_lock_release_recursive>:
 80045ea:	4770      	bx	lr

080045ec <strcpy>:
 80045ec:	4603      	mov	r3, r0
 80045ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045f2:	f803 2b01 	strb.w	r2, [r3], #1
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d1f9      	bne.n	80045ee <strcpy+0x2>
 80045fa:	4770      	bx	lr

080045fc <_free_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4605      	mov	r5, r0
 8004600:	2900      	cmp	r1, #0
 8004602:	d040      	beq.n	8004686 <_free_r+0x8a>
 8004604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004608:	1f0c      	subs	r4, r1, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	18e4      	addlt	r4, r4, r3
 8004610:	f000 f8de 	bl	80047d0 <__malloc_lock>
 8004614:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <_free_r+0x8c>)
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	b933      	cbnz	r3, 8004628 <_free_r+0x2c>
 800461a:	6063      	str	r3, [r4, #4]
 800461c:	6014      	str	r4, [r2, #0]
 800461e:	4628      	mov	r0, r5
 8004620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004624:	f000 b8da 	b.w	80047dc <__malloc_unlock>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d908      	bls.n	800463e <_free_r+0x42>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	1821      	adds	r1, r4, r0
 8004630:	428b      	cmp	r3, r1
 8004632:	bf01      	itttt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	e7ed      	b.n	800461a <_free_r+0x1e>
 800463e:	461a      	mov	r2, r3
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	b10b      	cbz	r3, 8004648 <_free_r+0x4c>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d9fa      	bls.n	800463e <_free_r+0x42>
 8004648:	6811      	ldr	r1, [r2, #0]
 800464a:	1850      	adds	r0, r2, r1
 800464c:	42a0      	cmp	r0, r4
 800464e:	d10b      	bne.n	8004668 <_free_r+0x6c>
 8004650:	6820      	ldr	r0, [r4, #0]
 8004652:	4401      	add	r1, r0
 8004654:	1850      	adds	r0, r2, r1
 8004656:	4283      	cmp	r3, r0
 8004658:	6011      	str	r1, [r2, #0]
 800465a:	d1e0      	bne.n	800461e <_free_r+0x22>
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4408      	add	r0, r1
 8004662:	6010      	str	r0, [r2, #0]
 8004664:	6053      	str	r3, [r2, #4]
 8004666:	e7da      	b.n	800461e <_free_r+0x22>
 8004668:	d902      	bls.n	8004670 <_free_r+0x74>
 800466a:	230c      	movs	r3, #12
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	e7d6      	b.n	800461e <_free_r+0x22>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	1821      	adds	r1, r4, r0
 8004674:	428b      	cmp	r3, r1
 8004676:	bf01      	itttt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	1809      	addeq	r1, r1, r0
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	6054      	str	r4, [r2, #4]
 8004684:	e7cb      	b.n	800461e <_free_r+0x22>
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000528 	.word	0x20000528

0800468c <sbrk_aligned>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0f      	ldr	r6, [pc, #60]	@ (80046cc <sbrk_aligned+0x40>)
 8004690:	460c      	mov	r4, r1
 8004692:	6831      	ldr	r1, [r6, #0]
 8004694:	4605      	mov	r5, r0
 8004696:	b911      	cbnz	r1, 800469e <sbrk_aligned+0x12>
 8004698:	f000 fba8 	bl	8004dec <_sbrk_r>
 800469c:	6030      	str	r0, [r6, #0]
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 fba3 	bl	8004dec <_sbrk_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d103      	bne.n	80046b2 <sbrk_aligned+0x26>
 80046aa:	f04f 34ff 	mov.w	r4, #4294967295
 80046ae:	4620      	mov	r0, r4
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	1cc4      	adds	r4, r0, #3
 80046b4:	f024 0403 	bic.w	r4, r4, #3
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d0f8      	beq.n	80046ae <sbrk_aligned+0x22>
 80046bc:	1a21      	subs	r1, r4, r0
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 fb94 	bl	8004dec <_sbrk_r>
 80046c4:	3001      	adds	r0, #1
 80046c6:	d1f2      	bne.n	80046ae <sbrk_aligned+0x22>
 80046c8:	e7ef      	b.n	80046aa <sbrk_aligned+0x1e>
 80046ca:	bf00      	nop
 80046cc:	20000524 	.word	0x20000524

080046d0 <_malloc_r>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	1ccd      	adds	r5, r1, #3
 80046d6:	f025 0503 	bic.w	r5, r5, #3
 80046da:	3508      	adds	r5, #8
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	bf38      	it	cc
 80046e0:	250c      	movcc	r5, #12
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	4606      	mov	r6, r0
 80046e6:	db01      	blt.n	80046ec <_malloc_r+0x1c>
 80046e8:	42a9      	cmp	r1, r5
 80046ea:	d904      	bls.n	80046f6 <_malloc_r+0x26>
 80046ec:	230c      	movs	r3, #12
 80046ee:	6033      	str	r3, [r6, #0]
 80046f0:	2000      	movs	r0, #0
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047cc <_malloc_r+0xfc>
 80046fa:	f000 f869 	bl	80047d0 <__malloc_lock>
 80046fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004702:	461c      	mov	r4, r3
 8004704:	bb44      	cbnz	r4, 8004758 <_malloc_r+0x88>
 8004706:	4629      	mov	r1, r5
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff ffbf 	bl	800468c <sbrk_aligned>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	4604      	mov	r4, r0
 8004712:	d158      	bne.n	80047c6 <_malloc_r+0xf6>
 8004714:	f8d8 4000 	ldr.w	r4, [r8]
 8004718:	4627      	mov	r7, r4
 800471a:	2f00      	cmp	r7, #0
 800471c:	d143      	bne.n	80047a6 <_malloc_r+0xd6>
 800471e:	2c00      	cmp	r4, #0
 8004720:	d04b      	beq.n	80047ba <_malloc_r+0xea>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	4639      	mov	r1, r7
 8004726:	4630      	mov	r0, r6
 8004728:	eb04 0903 	add.w	r9, r4, r3
 800472c:	f000 fb5e 	bl	8004dec <_sbrk_r>
 8004730:	4581      	cmp	r9, r0
 8004732:	d142      	bne.n	80047ba <_malloc_r+0xea>
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	4630      	mov	r0, r6
 8004738:	1a6d      	subs	r5, r5, r1
 800473a:	4629      	mov	r1, r5
 800473c:	f7ff ffa6 	bl	800468c <sbrk_aligned>
 8004740:	3001      	adds	r0, #1
 8004742:	d03a      	beq.n	80047ba <_malloc_r+0xea>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	442b      	add	r3, r5
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	f8d8 3000 	ldr.w	r3, [r8]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	bb62      	cbnz	r2, 80047ac <_malloc_r+0xdc>
 8004752:	f8c8 7000 	str.w	r7, [r8]
 8004756:	e00f      	b.n	8004778 <_malloc_r+0xa8>
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	1b52      	subs	r2, r2, r5
 800475c:	d420      	bmi.n	80047a0 <_malloc_r+0xd0>
 800475e:	2a0b      	cmp	r2, #11
 8004760:	d917      	bls.n	8004792 <_malloc_r+0xc2>
 8004762:	1961      	adds	r1, r4, r5
 8004764:	42a3      	cmp	r3, r4
 8004766:	6025      	str	r5, [r4, #0]
 8004768:	bf18      	it	ne
 800476a:	6059      	strne	r1, [r3, #4]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	bf08      	it	eq
 8004770:	f8c8 1000 	streq.w	r1, [r8]
 8004774:	5162      	str	r2, [r4, r5]
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f82f 	bl	80047dc <__malloc_unlock>
 800477e:	f104 000b 	add.w	r0, r4, #11
 8004782:	1d23      	adds	r3, r4, #4
 8004784:	f020 0007 	bic.w	r0, r0, #7
 8004788:	1ac2      	subs	r2, r0, r3
 800478a:	bf1c      	itt	ne
 800478c:	1a1b      	subne	r3, r3, r0
 800478e:	50a3      	strne	r3, [r4, r2]
 8004790:	e7af      	b.n	80046f2 <_malloc_r+0x22>
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	bf0c      	ite	eq
 8004798:	f8c8 2000 	streq.w	r2, [r8]
 800479c:	605a      	strne	r2, [r3, #4]
 800479e:	e7eb      	b.n	8004778 <_malloc_r+0xa8>
 80047a0:	4623      	mov	r3, r4
 80047a2:	6864      	ldr	r4, [r4, #4]
 80047a4:	e7ae      	b.n	8004704 <_malloc_r+0x34>
 80047a6:	463c      	mov	r4, r7
 80047a8:	687f      	ldr	r7, [r7, #4]
 80047aa:	e7b6      	b.n	800471a <_malloc_r+0x4a>
 80047ac:	461a      	mov	r2, r3
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d1fb      	bne.n	80047ac <_malloc_r+0xdc>
 80047b4:	2300      	movs	r3, #0
 80047b6:	6053      	str	r3, [r2, #4]
 80047b8:	e7de      	b.n	8004778 <_malloc_r+0xa8>
 80047ba:	230c      	movs	r3, #12
 80047bc:	4630      	mov	r0, r6
 80047be:	6033      	str	r3, [r6, #0]
 80047c0:	f000 f80c 	bl	80047dc <__malloc_unlock>
 80047c4:	e794      	b.n	80046f0 <_malloc_r+0x20>
 80047c6:	6005      	str	r5, [r0, #0]
 80047c8:	e7d6      	b.n	8004778 <_malloc_r+0xa8>
 80047ca:	bf00      	nop
 80047cc:	20000528 	.word	0x20000528

080047d0 <__malloc_lock>:
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <__malloc_lock+0x8>)
 80047d2:	f7ff bf09 	b.w	80045e8 <__retarget_lock_acquire_recursive>
 80047d6:	bf00      	nop
 80047d8:	20000520 	.word	0x20000520

080047dc <__malloc_unlock>:
 80047dc:	4801      	ldr	r0, [pc, #4]	@ (80047e4 <__malloc_unlock+0x8>)
 80047de:	f7ff bf04 	b.w	80045ea <__retarget_lock_release_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000520 	.word	0x20000520

080047e8 <__ssputs_r>:
 80047e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	461f      	mov	r7, r3
 80047ee:	688e      	ldr	r6, [r1, #8]
 80047f0:	4682      	mov	sl, r0
 80047f2:	42be      	cmp	r6, r7
 80047f4:	460c      	mov	r4, r1
 80047f6:	4690      	mov	r8, r2
 80047f8:	680b      	ldr	r3, [r1, #0]
 80047fa:	d82d      	bhi.n	8004858 <__ssputs_r+0x70>
 80047fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004804:	d026      	beq.n	8004854 <__ssputs_r+0x6c>
 8004806:	6965      	ldr	r5, [r4, #20]
 8004808:	6909      	ldr	r1, [r1, #16]
 800480a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800480e:	eba3 0901 	sub.w	r9, r3, r1
 8004812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004816:	1c7b      	adds	r3, r7, #1
 8004818:	444b      	add	r3, r9
 800481a:	106d      	asrs	r5, r5, #1
 800481c:	429d      	cmp	r5, r3
 800481e:	bf38      	it	cc
 8004820:	461d      	movcc	r5, r3
 8004822:	0553      	lsls	r3, r2, #21
 8004824:	d527      	bpl.n	8004876 <__ssputs_r+0x8e>
 8004826:	4629      	mov	r1, r5
 8004828:	f7ff ff52 	bl	80046d0 <_malloc_r>
 800482c:	4606      	mov	r6, r0
 800482e:	b360      	cbz	r0, 800488a <__ssputs_r+0xa2>
 8004830:	464a      	mov	r2, r9
 8004832:	6921      	ldr	r1, [r4, #16]
 8004834:	f000 faf8 	bl	8004e28 <memcpy>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	6126      	str	r6, [r4, #16]
 8004846:	444e      	add	r6, r9
 8004848:	6026      	str	r6, [r4, #0]
 800484a:	463e      	mov	r6, r7
 800484c:	6165      	str	r5, [r4, #20]
 800484e:	eba5 0509 	sub.w	r5, r5, r9
 8004852:	60a5      	str	r5, [r4, #8]
 8004854:	42be      	cmp	r6, r7
 8004856:	d900      	bls.n	800485a <__ssputs_r+0x72>
 8004858:	463e      	mov	r6, r7
 800485a:	4632      	mov	r2, r6
 800485c:	4641      	mov	r1, r8
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	f000 faaa 	bl	8004db8 <memmove>
 8004864:	2000      	movs	r0, #0
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	1b9b      	subs	r3, r3, r6
 800486a:	60a3      	str	r3, [r4, #8]
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	4433      	add	r3, r6
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004876:	462a      	mov	r2, r5
 8004878:	f000 fae4 	bl	8004e44 <_realloc_r>
 800487c:	4606      	mov	r6, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	d1e0      	bne.n	8004844 <__ssputs_r+0x5c>
 8004882:	4650      	mov	r0, sl
 8004884:	6921      	ldr	r1, [r4, #16]
 8004886:	f7ff feb9 	bl	80045fc <_free_r>
 800488a:	230c      	movs	r3, #12
 800488c:	f8ca 3000 	str.w	r3, [sl]
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	e7e9      	b.n	8004872 <__ssputs_r+0x8a>
	...

080048a0 <_svfiprintf_r>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	4698      	mov	r8, r3
 80048a6:	898b      	ldrh	r3, [r1, #12]
 80048a8:	4607      	mov	r7, r0
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	460d      	mov	r5, r1
 80048ae:	4614      	mov	r4, r2
 80048b0:	b09d      	sub	sp, #116	@ 0x74
 80048b2:	d510      	bpl.n	80048d6 <_svfiprintf_r+0x36>
 80048b4:	690b      	ldr	r3, [r1, #16]
 80048b6:	b973      	cbnz	r3, 80048d6 <_svfiprintf_r+0x36>
 80048b8:	2140      	movs	r1, #64	@ 0x40
 80048ba:	f7ff ff09 	bl	80046d0 <_malloc_r>
 80048be:	6028      	str	r0, [r5, #0]
 80048c0:	6128      	str	r0, [r5, #16]
 80048c2:	b930      	cbnz	r0, 80048d2 <_svfiprintf_r+0x32>
 80048c4:	230c      	movs	r3, #12
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	b01d      	add	sp, #116	@ 0x74
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d2:	2340      	movs	r3, #64	@ 0x40
 80048d4:	616b      	str	r3, [r5, #20]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048da:	2320      	movs	r3, #32
 80048dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048e0:	2330      	movs	r3, #48	@ 0x30
 80048e2:	f04f 0901 	mov.w	r9, #1
 80048e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a84 <_svfiprintf_r+0x1e4>
 80048ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048f2:	4623      	mov	r3, r4
 80048f4:	469a      	mov	sl, r3
 80048f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fa:	b10a      	cbz	r2, 8004900 <_svfiprintf_r+0x60>
 80048fc:	2a25      	cmp	r2, #37	@ 0x25
 80048fe:	d1f9      	bne.n	80048f4 <_svfiprintf_r+0x54>
 8004900:	ebba 0b04 	subs.w	fp, sl, r4
 8004904:	d00b      	beq.n	800491e <_svfiprintf_r+0x7e>
 8004906:	465b      	mov	r3, fp
 8004908:	4622      	mov	r2, r4
 800490a:	4629      	mov	r1, r5
 800490c:	4638      	mov	r0, r7
 800490e:	f7ff ff6b 	bl	80047e8 <__ssputs_r>
 8004912:	3001      	adds	r0, #1
 8004914:	f000 80a7 	beq.w	8004a66 <_svfiprintf_r+0x1c6>
 8004918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800491a:	445a      	add	r2, fp
 800491c:	9209      	str	r2, [sp, #36]	@ 0x24
 800491e:	f89a 3000 	ldrb.w	r3, [sl]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 809f 	beq.w	8004a66 <_svfiprintf_r+0x1c6>
 8004928:	2300      	movs	r3, #0
 800492a:	f04f 32ff 	mov.w	r2, #4294967295
 800492e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004932:	f10a 0a01 	add.w	sl, sl, #1
 8004936:	9304      	str	r3, [sp, #16]
 8004938:	9307      	str	r3, [sp, #28]
 800493a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800493e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004940:	4654      	mov	r4, sl
 8004942:	2205      	movs	r2, #5
 8004944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004948:	484e      	ldr	r0, [pc, #312]	@ (8004a84 <_svfiprintf_r+0x1e4>)
 800494a:	f000 fa5f 	bl	8004e0c <memchr>
 800494e:	9a04      	ldr	r2, [sp, #16]
 8004950:	b9d8      	cbnz	r0, 800498a <_svfiprintf_r+0xea>
 8004952:	06d0      	lsls	r0, r2, #27
 8004954:	bf44      	itt	mi
 8004956:	2320      	movmi	r3, #32
 8004958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800495c:	0711      	lsls	r1, r2, #28
 800495e:	bf44      	itt	mi
 8004960:	232b      	movmi	r3, #43	@ 0x2b
 8004962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004966:	f89a 3000 	ldrb.w	r3, [sl]
 800496a:	2b2a      	cmp	r3, #42	@ 0x2a
 800496c:	d015      	beq.n	800499a <_svfiprintf_r+0xfa>
 800496e:	4654      	mov	r4, sl
 8004970:	2000      	movs	r0, #0
 8004972:	f04f 0c0a 	mov.w	ip, #10
 8004976:	9a07      	ldr	r2, [sp, #28]
 8004978:	4621      	mov	r1, r4
 800497a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497e:	3b30      	subs	r3, #48	@ 0x30
 8004980:	2b09      	cmp	r3, #9
 8004982:	d94b      	bls.n	8004a1c <_svfiprintf_r+0x17c>
 8004984:	b1b0      	cbz	r0, 80049b4 <_svfiprintf_r+0x114>
 8004986:	9207      	str	r2, [sp, #28]
 8004988:	e014      	b.n	80049b4 <_svfiprintf_r+0x114>
 800498a:	eba0 0308 	sub.w	r3, r0, r8
 800498e:	fa09 f303 	lsl.w	r3, r9, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	46a2      	mov	sl, r4
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	e7d2      	b.n	8004940 <_svfiprintf_r+0xa0>
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	9103      	str	r1, [sp, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfbb      	ittet	lt
 80049a6:	425b      	neglt	r3, r3
 80049a8:	f042 0202 	orrlt.w	r2, r2, #2
 80049ac:	9307      	strge	r3, [sp, #28]
 80049ae:	9307      	strlt	r3, [sp, #28]
 80049b0:	bfb8      	it	lt
 80049b2:	9204      	strlt	r2, [sp, #16]
 80049b4:	7823      	ldrb	r3, [r4, #0]
 80049b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80049b8:	d10a      	bne.n	80049d0 <_svfiprintf_r+0x130>
 80049ba:	7863      	ldrb	r3, [r4, #1]
 80049bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80049be:	d132      	bne.n	8004a26 <_svfiprintf_r+0x186>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	3402      	adds	r4, #2
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	9203      	str	r2, [sp, #12]
 80049ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049ce:	9305      	str	r3, [sp, #20]
 80049d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a88 <_svfiprintf_r+0x1e8>
 80049d4:	2203      	movs	r2, #3
 80049d6:	4650      	mov	r0, sl
 80049d8:	7821      	ldrb	r1, [r4, #0]
 80049da:	f000 fa17 	bl	8004e0c <memchr>
 80049de:	b138      	cbz	r0, 80049f0 <_svfiprintf_r+0x150>
 80049e0:	2240      	movs	r2, #64	@ 0x40
 80049e2:	9b04      	ldr	r3, [sp, #16]
 80049e4:	eba0 000a 	sub.w	r0, r0, sl
 80049e8:	4082      	lsls	r2, r0
 80049ea:	4313      	orrs	r3, r2
 80049ec:	3401      	adds	r4, #1
 80049ee:	9304      	str	r3, [sp, #16]
 80049f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f4:	2206      	movs	r2, #6
 80049f6:	4825      	ldr	r0, [pc, #148]	@ (8004a8c <_svfiprintf_r+0x1ec>)
 80049f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049fc:	f000 fa06 	bl	8004e0c <memchr>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d036      	beq.n	8004a72 <_svfiprintf_r+0x1d2>
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <_svfiprintf_r+0x1f0>)
 8004a06:	bb1b      	cbnz	r3, 8004a50 <_svfiprintf_r+0x1b0>
 8004a08:	9b03      	ldr	r3, [sp, #12]
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	3308      	adds	r3, #8
 8004a12:	9303      	str	r3, [sp, #12]
 8004a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a16:	4433      	add	r3, r6
 8004a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a1a:	e76a      	b.n	80048f2 <_svfiprintf_r+0x52>
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	2001      	movs	r0, #1
 8004a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a24:	e7a8      	b.n	8004978 <_svfiprintf_r+0xd8>
 8004a26:	2300      	movs	r3, #0
 8004a28:	f04f 0c0a 	mov.w	ip, #10
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	3401      	adds	r4, #1
 8004a30:	9305      	str	r3, [sp, #20]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a38:	3a30      	subs	r2, #48	@ 0x30
 8004a3a:	2a09      	cmp	r2, #9
 8004a3c:	d903      	bls.n	8004a46 <_svfiprintf_r+0x1a6>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0c6      	beq.n	80049d0 <_svfiprintf_r+0x130>
 8004a42:	9105      	str	r1, [sp, #20]
 8004a44:	e7c4      	b.n	80049d0 <_svfiprintf_r+0x130>
 8004a46:	4604      	mov	r4, r0
 8004a48:	2301      	movs	r3, #1
 8004a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a4e:	e7f0      	b.n	8004a32 <_svfiprintf_r+0x192>
 8004a50:	ab03      	add	r3, sp, #12
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	462a      	mov	r2, r5
 8004a56:	4638      	mov	r0, r7
 8004a58:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <_svfiprintf_r+0x1f4>)
 8004a5a:	a904      	add	r1, sp, #16
 8004a5c:	f3af 8000 	nop.w
 8004a60:	1c42      	adds	r2, r0, #1
 8004a62:	4606      	mov	r6, r0
 8004a64:	d1d6      	bne.n	8004a14 <_svfiprintf_r+0x174>
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	065b      	lsls	r3, r3, #25
 8004a6a:	f53f af2d 	bmi.w	80048c8 <_svfiprintf_r+0x28>
 8004a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a70:	e72c      	b.n	80048cc <_svfiprintf_r+0x2c>
 8004a72:	ab03      	add	r3, sp, #12
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	462a      	mov	r2, r5
 8004a78:	4638      	mov	r0, r7
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <_svfiprintf_r+0x1f4>)
 8004a7c:	a904      	add	r1, sp, #16
 8004a7e:	f000 f87d 	bl	8004b7c <_printf_i>
 8004a82:	e7ed      	b.n	8004a60 <_svfiprintf_r+0x1c0>
 8004a84:	0800522e 	.word	0x0800522e
 8004a88:	08005234 	.word	0x08005234
 8004a8c:	08005238 	.word	0x08005238
 8004a90:	00000000 	.word	0x00000000
 8004a94:	080047e9 	.word	0x080047e9

08004a98 <_printf_common>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	4698      	mov	r8, r3
 8004aa0:	688a      	ldr	r2, [r1, #8]
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bfb8      	it	lt
 8004aaa:	4613      	movlt	r3, r2
 8004aac:	6033      	str	r3, [r6, #0]
 8004aae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ab8:	b10a      	cbz	r2, 8004abe <_printf_common+0x26>
 8004aba:	3301      	adds	r3, #1
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	0699      	lsls	r1, r3, #26
 8004ac2:	bf42      	ittt	mi
 8004ac4:	6833      	ldrmi	r3, [r6, #0]
 8004ac6:	3302      	addmi	r3, #2
 8004ac8:	6033      	strmi	r3, [r6, #0]
 8004aca:	6825      	ldr	r5, [r4, #0]
 8004acc:	f015 0506 	ands.w	r5, r5, #6
 8004ad0:	d106      	bne.n	8004ae0 <_printf_common+0x48>
 8004ad2:	f104 0a19 	add.w	sl, r4, #25
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	6832      	ldr	r2, [r6, #0]
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	42ab      	cmp	r3, r5
 8004ade:	dc2b      	bgt.n	8004b38 <_printf_common+0xa0>
 8004ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae4:	6822      	ldr	r2, [r4, #0]
 8004ae6:	3b00      	subs	r3, #0
 8004ae8:	bf18      	it	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	0692      	lsls	r2, r2, #26
 8004aee:	d430      	bmi.n	8004b52 <_printf_common+0xba>
 8004af0:	4641      	mov	r1, r8
 8004af2:	4638      	mov	r0, r7
 8004af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004af8:	47c8      	blx	r9
 8004afa:	3001      	adds	r0, #1
 8004afc:	d023      	beq.n	8004b46 <_printf_common+0xae>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	6922      	ldr	r2, [r4, #16]
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	bf14      	ite	ne
 8004b0a:	2500      	movne	r5, #0
 8004b0c:	6833      	ldreq	r3, [r6, #0]
 8004b0e:	f04f 0600 	mov.w	r6, #0
 8004b12:	bf08      	it	eq
 8004b14:	68e5      	ldreq	r5, [r4, #12]
 8004b16:	f104 041a 	add.w	r4, r4, #26
 8004b1a:	bf08      	it	eq
 8004b1c:	1aed      	subeq	r5, r5, r3
 8004b1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b22:	bf08      	it	eq
 8004b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfc4      	itt	gt
 8004b2c:	1a9b      	subgt	r3, r3, r2
 8004b2e:	18ed      	addgt	r5, r5, r3
 8004b30:	42b5      	cmp	r5, r6
 8004b32:	d11a      	bne.n	8004b6a <_printf_common+0xd2>
 8004b34:	2000      	movs	r0, #0
 8004b36:	e008      	b.n	8004b4a <_printf_common+0xb2>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4652      	mov	r2, sl
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d103      	bne.n	8004b4e <_printf_common+0xb6>
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4e:	3501      	adds	r5, #1
 8004b50:	e7c1      	b.n	8004ad6 <_printf_common+0x3e>
 8004b52:	2030      	movs	r0, #48	@ 0x30
 8004b54:	18e1      	adds	r1, r4, r3
 8004b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b60:	4422      	add	r2, r4
 8004b62:	3302      	adds	r3, #2
 8004b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b68:	e7c2      	b.n	8004af0 <_printf_common+0x58>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	4641      	mov	r1, r8
 8004b70:	4638      	mov	r0, r7
 8004b72:	47c8      	blx	r9
 8004b74:	3001      	adds	r0, #1
 8004b76:	d0e6      	beq.n	8004b46 <_printf_common+0xae>
 8004b78:	3601      	adds	r6, #1
 8004b7a:	e7d9      	b.n	8004b30 <_printf_common+0x98>

08004b7c <_printf_i>:
 8004b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	7e0f      	ldrb	r7, [r1, #24]
 8004b82:	4691      	mov	r9, r2
 8004b84:	2f78      	cmp	r7, #120	@ 0x78
 8004b86:	4680      	mov	r8, r0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b92:	d807      	bhi.n	8004ba4 <_printf_i+0x28>
 8004b94:	2f62      	cmp	r7, #98	@ 0x62
 8004b96:	d80a      	bhi.n	8004bae <_printf_i+0x32>
 8004b98:	2f00      	cmp	r7, #0
 8004b9a:	f000 80d1 	beq.w	8004d40 <_printf_i+0x1c4>
 8004b9e:	2f58      	cmp	r7, #88	@ 0x58
 8004ba0:	f000 80b8 	beq.w	8004d14 <_printf_i+0x198>
 8004ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bac:	e03a      	b.n	8004c24 <_printf_i+0xa8>
 8004bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bb2:	2b15      	cmp	r3, #21
 8004bb4:	d8f6      	bhi.n	8004ba4 <_printf_i+0x28>
 8004bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bbc <_printf_i+0x40>)
 8004bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004ba5 	.word	0x08004ba5
 8004bc8:	08004ba5 	.word	0x08004ba5
 8004bcc:	08004ba5 	.word	0x08004ba5
 8004bd0:	08004ba5 	.word	0x08004ba5
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004ba5 	.word	0x08004ba5
 8004bdc:	08004ba5 	.word	0x08004ba5
 8004be0:	08004ba5 	.word	0x08004ba5
 8004be4:	08004ba5 	.word	0x08004ba5
 8004be8:	08004d27 	.word	0x08004d27
 8004bec:	08004c53 	.word	0x08004c53
 8004bf0:	08004ce1 	.word	0x08004ce1
 8004bf4:	08004ba5 	.word	0x08004ba5
 8004bf8:	08004ba5 	.word	0x08004ba5
 8004bfc:	08004d49 	.word	0x08004d49
 8004c00:	08004ba5 	.word	0x08004ba5
 8004c04:	08004c53 	.word	0x08004c53
 8004c08:	08004ba5 	.word	0x08004ba5
 8004c0c:	08004ba5 	.word	0x08004ba5
 8004c10:	08004ce9 	.word	0x08004ce9
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6032      	str	r2, [r6, #0]
 8004c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c24:	2301      	movs	r3, #1
 8004c26:	e09c      	b.n	8004d62 <_printf_i+0x1e6>
 8004c28:	6833      	ldr	r3, [r6, #0]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	1d19      	adds	r1, r3, #4
 8004c2e:	6031      	str	r1, [r6, #0]
 8004c30:	0606      	lsls	r6, r0, #24
 8004c32:	d501      	bpl.n	8004c38 <_printf_i+0xbc>
 8004c34:	681d      	ldr	r5, [r3, #0]
 8004c36:	e003      	b.n	8004c40 <_printf_i+0xc4>
 8004c38:	0645      	lsls	r5, r0, #25
 8004c3a:	d5fb      	bpl.n	8004c34 <_printf_i+0xb8>
 8004c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	da03      	bge.n	8004c4c <_printf_i+0xd0>
 8004c44:	232d      	movs	r3, #45	@ 0x2d
 8004c46:	426d      	negs	r5, r5
 8004c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c4c:	230a      	movs	r3, #10
 8004c4e:	4858      	ldr	r0, [pc, #352]	@ (8004db0 <_printf_i+0x234>)
 8004c50:	e011      	b.n	8004c76 <_printf_i+0xfa>
 8004c52:	6821      	ldr	r1, [r4, #0]
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	0608      	lsls	r0, r1, #24
 8004c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c5c:	d402      	bmi.n	8004c64 <_printf_i+0xe8>
 8004c5e:	0649      	lsls	r1, r1, #25
 8004c60:	bf48      	it	mi
 8004c62:	b2ad      	uxthmi	r5, r5
 8004c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	bf14      	ite	ne
 8004c6a:	230a      	movne	r3, #10
 8004c6c:	2308      	moveq	r3, #8
 8004c6e:	4850      	ldr	r0, [pc, #320]	@ (8004db0 <_printf_i+0x234>)
 8004c70:	2100      	movs	r1, #0
 8004c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c76:	6866      	ldr	r6, [r4, #4]
 8004c78:	2e00      	cmp	r6, #0
 8004c7a:	60a6      	str	r6, [r4, #8]
 8004c7c:	db05      	blt.n	8004c8a <_printf_i+0x10e>
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	432e      	orrs	r6, r5
 8004c82:	f021 0104 	bic.w	r1, r1, #4
 8004c86:	6021      	str	r1, [r4, #0]
 8004c88:	d04b      	beq.n	8004d22 <_printf_i+0x1a6>
 8004c8a:	4616      	mov	r6, r2
 8004c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c90:	fb03 5711 	mls	r7, r3, r1, r5
 8004c94:	5dc7      	ldrb	r7, [r0, r7]
 8004c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c9a:	462f      	mov	r7, r5
 8004c9c:	42bb      	cmp	r3, r7
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	d9f4      	bls.n	8004c8c <_printf_i+0x110>
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d10b      	bne.n	8004cbe <_printf_i+0x142>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	07df      	lsls	r7, r3, #31
 8004caa:	d508      	bpl.n	8004cbe <_printf_i+0x142>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	6861      	ldr	r1, [r4, #4]
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	bfde      	ittt	le
 8004cb4:	2330      	movle	r3, #48	@ 0x30
 8004cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cbe:	1b92      	subs	r2, r2, r6
 8004cc0:	6122      	str	r2, [r4, #16]
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f8cd a000 	str.w	sl, [sp]
 8004ccc:	aa03      	add	r2, sp, #12
 8004cce:	f7ff fee3 	bl	8004a98 <_printf_common>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d14a      	bne.n	8004d6c <_printf_i+0x1f0>
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	b004      	add	sp, #16
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f043 0320 	orr.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	2778      	movs	r7, #120	@ 0x78
 8004cea:	4832      	ldr	r0, [pc, #200]	@ (8004db4 <_printf_i+0x238>)
 8004cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6831      	ldr	r1, [r6, #0]
 8004cf4:	061f      	lsls	r7, r3, #24
 8004cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cfa:	d402      	bmi.n	8004d02 <_printf_i+0x186>
 8004cfc:	065f      	lsls	r7, r3, #25
 8004cfe:	bf48      	it	mi
 8004d00:	b2ad      	uxthmi	r5, r5
 8004d02:	6031      	str	r1, [r6, #0]
 8004d04:	07d9      	lsls	r1, r3, #31
 8004d06:	bf44      	itt	mi
 8004d08:	f043 0320 	orrmi.w	r3, r3, #32
 8004d0c:	6023      	strmi	r3, [r4, #0]
 8004d0e:	b11d      	cbz	r5, 8004d18 <_printf_i+0x19c>
 8004d10:	2310      	movs	r3, #16
 8004d12:	e7ad      	b.n	8004c70 <_printf_i+0xf4>
 8004d14:	4826      	ldr	r0, [pc, #152]	@ (8004db0 <_printf_i+0x234>)
 8004d16:	e7e9      	b.n	8004cec <_printf_i+0x170>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f023 0320 	bic.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e7f6      	b.n	8004d10 <_printf_i+0x194>
 8004d22:	4616      	mov	r6, r2
 8004d24:	e7bd      	b.n	8004ca2 <_printf_i+0x126>
 8004d26:	6833      	ldr	r3, [r6, #0]
 8004d28:	6825      	ldr	r5, [r4, #0]
 8004d2a:	1d18      	adds	r0, r3, #4
 8004d2c:	6961      	ldr	r1, [r4, #20]
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	062e      	lsls	r6, r5, #24
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	d501      	bpl.n	8004d3a <_printf_i+0x1be>
 8004d36:	6019      	str	r1, [r3, #0]
 8004d38:	e002      	b.n	8004d40 <_printf_i+0x1c4>
 8004d3a:	0668      	lsls	r0, r5, #25
 8004d3c:	d5fb      	bpl.n	8004d36 <_printf_i+0x1ba>
 8004d3e:	8019      	strh	r1, [r3, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	4616      	mov	r6, r2
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	e7bc      	b.n	8004cc2 <_printf_i+0x146>
 8004d48:	6833      	ldr	r3, [r6, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	6032      	str	r2, [r6, #0]
 8004d50:	681e      	ldr	r6, [r3, #0]
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 f859 	bl	8004e0c <memchr>
 8004d5a:	b108      	cbz	r0, 8004d60 <_printf_i+0x1e4>
 8004d5c:	1b80      	subs	r0, r0, r6
 8004d5e:	6060      	str	r0, [r4, #4]
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	2300      	movs	r3, #0
 8004d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d6a:	e7aa      	b.n	8004cc2 <_printf_i+0x146>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d0ad      	beq.n	8004cd6 <_printf_i+0x15a>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	079b      	lsls	r3, r3, #30
 8004d7e:	d413      	bmi.n	8004da8 <_printf_i+0x22c>
 8004d80:	68e0      	ldr	r0, [r4, #12]
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	4298      	cmp	r0, r3
 8004d86:	bfb8      	it	lt
 8004d88:	4618      	movlt	r0, r3
 8004d8a:	e7a6      	b.n	8004cda <_printf_i+0x15e>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4632      	mov	r2, r6
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	47d0      	blx	sl
 8004d96:	3001      	adds	r0, #1
 8004d98:	d09d      	beq.n	8004cd6 <_printf_i+0x15a>
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	68e3      	ldr	r3, [r4, #12]
 8004d9e:	9903      	ldr	r1, [sp, #12]
 8004da0:	1a5b      	subs	r3, r3, r1
 8004da2:	42ab      	cmp	r3, r5
 8004da4:	dcf2      	bgt.n	8004d8c <_printf_i+0x210>
 8004da6:	e7eb      	b.n	8004d80 <_printf_i+0x204>
 8004da8:	2500      	movs	r5, #0
 8004daa:	f104 0619 	add.w	r6, r4, #25
 8004dae:	e7f5      	b.n	8004d9c <_printf_i+0x220>
 8004db0:	0800523f 	.word	0x0800523f
 8004db4:	08005250 	.word	0x08005250

08004db8 <memmove>:
 8004db8:	4288      	cmp	r0, r1
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	eb01 0402 	add.w	r4, r1, r2
 8004dc0:	d902      	bls.n	8004dc8 <memmove+0x10>
 8004dc2:	4284      	cmp	r4, r0
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	d807      	bhi.n	8004dd8 <memmove+0x20>
 8004dc8:	1e43      	subs	r3, r0, #1
 8004dca:	42a1      	cmp	r1, r4
 8004dcc:	d008      	beq.n	8004de0 <memmove+0x28>
 8004dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd6:	e7f8      	b.n	8004dca <memmove+0x12>
 8004dd8:	4601      	mov	r1, r0
 8004dda:	4402      	add	r2, r0
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	d100      	bne.n	8004de2 <memmove+0x2a>
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dea:	e7f7      	b.n	8004ddc <memmove+0x24>

08004dec <_sbrk_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d05      	ldr	r5, [pc, #20]	@ (8004e08 <_sbrk_r+0x1c>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	f7fc fe8a 	bl	8001b10 <_sbrk>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_sbrk_r+0x1a>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_sbrk_r+0x1a>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	2000051c 	.word	0x2000051c

08004e0c <memchr>:
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	b2c9      	uxtb	r1, r1
 8004e12:	4402      	add	r2, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	d101      	bne.n	8004e1e <memchr+0x12>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e003      	b.n	8004e26 <memchr+0x1a>
 8004e1e:	7804      	ldrb	r4, [r0, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	428c      	cmp	r4, r1
 8004e24:	d1f6      	bne.n	8004e14 <memchr+0x8>
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <memcpy>:
 8004e28:	440a      	add	r2, r1
 8004e2a:	4291      	cmp	r1, r2
 8004e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e30:	d100      	bne.n	8004e34 <memcpy+0xc>
 8004e32:	4770      	bx	lr
 8004e34:	b510      	push	{r4, lr}
 8004e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e40:	d1f9      	bne.n	8004e36 <memcpy+0xe>
 8004e42:	bd10      	pop	{r4, pc}

08004e44 <_realloc_r>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	4607      	mov	r7, r0
 8004e4a:	4614      	mov	r4, r2
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	b921      	cbnz	r1, 8004e5a <_realloc_r+0x16>
 8004e50:	4611      	mov	r1, r2
 8004e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e56:	f7ff bc3b 	b.w	80046d0 <_malloc_r>
 8004e5a:	b92a      	cbnz	r2, 8004e68 <_realloc_r+0x24>
 8004e5c:	f7ff fbce 	bl	80045fc <_free_r>
 8004e60:	4625      	mov	r5, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e68:	f000 f81a 	bl	8004ea0 <_malloc_usable_size_r>
 8004e6c:	4284      	cmp	r4, r0
 8004e6e:	4606      	mov	r6, r0
 8004e70:	d802      	bhi.n	8004e78 <_realloc_r+0x34>
 8004e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e76:	d8f4      	bhi.n	8004e62 <_realloc_r+0x1e>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f7ff fc28 	bl	80046d0 <_malloc_r>
 8004e80:	4680      	mov	r8, r0
 8004e82:	b908      	cbnz	r0, 8004e88 <_realloc_r+0x44>
 8004e84:	4645      	mov	r5, r8
 8004e86:	e7ec      	b.n	8004e62 <_realloc_r+0x1e>
 8004e88:	42b4      	cmp	r4, r6
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	bf28      	it	cs
 8004e90:	4632      	movcs	r2, r6
 8004e92:	f7ff ffc9 	bl	8004e28 <memcpy>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff fbaf 	bl	80045fc <_free_r>
 8004e9e:	e7f1      	b.n	8004e84 <_realloc_r+0x40>

08004ea0 <_malloc_usable_size_r>:
 8004ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea4:	1f18      	subs	r0, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfbc      	itt	lt
 8004eaa:	580b      	ldrlt	r3, [r1, r0]
 8004eac:	18c0      	addlt	r0, r0, r3
 8004eae:	4770      	bx	lr

08004eb0 <_init>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr

08004ebc <_fini>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr
