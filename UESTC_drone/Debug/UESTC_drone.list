
UESTC_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00008164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006448  08006448  00008164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800644c  0800644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08006450  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000164  080065b4  00008164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  080065b4  00008524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010619  00000000  00000000  0000818d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caa  00000000  00000000  000187a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9c  00000000  00000000  0001c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e96  00000000  00000000  0001d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001367e  00000000  00000000  0003721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f930  00000000  00000000  0004a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da1c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  000da20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000df78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ed0 	.word	0x08005ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08005ed0 	.word	0x08005ed0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <DC_Motor_Init>:
} Ramp_t;

static Ramp_t ramps[4] = {0};

void DC_Motor_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800075e:	2100      	movs	r1, #0
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <DC_Motor_Init+0x58>)
 8000762:	f002 fe91 	bl	8003488 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000766:	2108      	movs	r1, #8
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <DC_Motor_Init+0x5c>)
 800076a:	f002 fe8d 	bl	8003488 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800076e:	2100      	movs	r1, #0
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <DC_Motor_Init+0x60>)
 8000772:	f002 fe89 	bl	8003488 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000776:	2108      	movs	r1, #8
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <DC_Motor_Init+0x64>)
 800077a:	f002 fe85 	bl	8003488 <HAL_TIM_PWM_Start>

    for (int i = 0; i < 4; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e00c      	b.n	800079e <DC_Motor_Init+0x46>
        ramps[i].active = 0;
 8000784:	490e      	ldr	r1, [pc, #56]	@ (80007c0 <DC_Motor_Init+0x68>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	440b      	add	r3, r1
 8000792:	3314      	adds	r3, #20
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	ddef      	ble.n	8000784 <DC_Motor_Init+0x2c>
    }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001f4 	.word	0x200001f4
 80007b4:	2000023c 	.word	0x2000023c
 80007b8:	20000284 	.word	0x20000284
 80007bc:	200002cc 	.word	0x200002cc
 80007c0:	20000180 	.word	0x20000180

080007c4 <DC_Motor_SetDuty>:

void DC_Motor_SetDuty(uint8_t motor_id, float duty)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
    if (motor_id < 1 || motor_id > 4) return;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d045      	beq.n	8000862 <DC_Motor_SetDuty+0x9e>
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d842      	bhi.n	8000862 <DC_Motor_SetDuty+0x9e>

    if (duty < 0) duty = 0;
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	6838      	ldr	r0, [r7, #0]
 80007e2:	f7ff ff71 	bl	80006c8 <__aeabi_fcmplt>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <DC_Motor_SetDuty+0x2e>
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
    if (duty > 100) duty = 100;
 80007f2:	491e      	ldr	r1, [pc, #120]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f7ff ff85 	bl	8000704 <__aeabi_fcmpgt>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <DC_Motor_SetDuty+0x40>
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 8000802:	603b      	str	r3, [r7, #0]

    // ARR = 9 → période PWM = 10 ticks (0..9)
    uint32_t pulse = (uint32_t)((duty * 10) / 100);
 8000804:	491a      	ldr	r1, [pc, #104]	@ (8000870 <DC_Motor_SetDuty+0xac>)
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	f7ff fdc0 	bl	800038c <__aeabi_fmul>
 800080c:	4603      	mov	r3, r0
 800080e:	4917      	ldr	r1, [pc, #92]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fe6f 	bl	80004f4 <__aeabi_fdiv>
 8000816:	4603      	mov	r3, r0
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff7d 	bl	8000718 <__aeabi_f2uiz>
 800081e:	4603      	mov	r3, r0
 8000820:	60fb      	str	r3, [r7, #12]

    switch (motor_id) {
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3b01      	subs	r3, #1
 8000826:	2b03      	cmp	r3, #3
 8000828:	d81c      	bhi.n	8000864 <DC_Motor_SetDuty+0xa0>
 800082a:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <DC_Motor_SetDuty+0x6c>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000841 	.word	0x08000841
 8000834:	08000849 	.word	0x08000849
 8000838:	08000853 	.word	0x08000853
 800083c:	0800085b 	.word	0x0800085b
        case 1: TIM1->CCR1 = pulse; break;
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <DC_Motor_SetDuty+0xb0>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6353      	str	r3, [r2, #52]	@ 0x34
 8000846:	e00d      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 2: TIM2->CCR3 = pulse; break;
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000850:	e008      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 3: TIM3->CCR1 = pulse; break;
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <DC_Motor_SetDuty+0xb4>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6353      	str	r3, [r2, #52]	@ 0x34
 8000858:	e004      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 4: TIM4->CCR3 = pulse; break;
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <DC_Motor_SetDuty+0xb8>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000860:	e000      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
    if (motor_id < 1 || motor_id > 4) return;
 8000862:	bf00      	nop
    }
}
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	42c80000 	.word	0x42c80000
 8000870:	41200000 	.word	0x41200000
 8000874:	40012c00 	.word	0x40012c00
 8000878:	40000400 	.word	0x40000400
 800087c:	40000800 	.word	0x40000800

08000880 <DC_Motor_RampTick>:

    DC_Motor_SetDuty(motor_id, start);
}

void DC_Motor_RampTick(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	e079      	b.n	8000980 <DC_Motor_RampTick+0x100>
        Ramp_t *r = &ramps[i];
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <DC_Motor_RampTick+0x110>)
 8000898:	4413      	add	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
        if (!r->active) continue;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	7d1b      	ldrb	r3, [r3, #20]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d069      	beq.n	8000978 <DC_Motor_RampTick+0xf8>

        r->counter_ms++;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	611a      	str	r2, [r3, #16]
        if (r->counter_ms >= r->interval_ms) {
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d35f      	bcc.n	800097a <DC_Motor_RampTick+0xfa>
            r->counter_ms = 0;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]

            if (r->current_duty < r->target_duty) {
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f7ff fefc 	bl	80006c8 <__aeabi_fcmplt>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01b      	beq.n	800090e <DC_Motor_RampTick+0x8e>
                r->current_duty += r->step;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4619      	mov	r1, r3
 80008e0:	4610      	mov	r0, r2
 80008e2:	f7ff fc4b 	bl	800017c <__addsf3>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	601a      	str	r2, [r3, #0]
                if (r->current_duty > r->target_duty)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff ff03 	bl	8000704 <__aeabi_fcmpgt>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d02e      	beq.n	8000962 <DC_Motor_RampTick+0xe2>
                    r->current_duty = r->target_duty;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e029      	b.n	8000962 <DC_Motor_RampTick+0xe2>
            }
            else if (r->current_duty > r->target_duty) {
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4619      	mov	r1, r3
 8000918:	4610      	mov	r0, r2
 800091a:	f7ff fef3 	bl	8000704 <__aeabi_fcmpgt>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01b      	beq.n	800095c <DC_Motor_RampTick+0xdc>
                r->current_duty -= r->step;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc22 	bl	8000178 <__aeabi_fsub>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
                if (r->current_duty < r->target_duty)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4619      	mov	r1, r3
 8000946:	4610      	mov	r0, r2
 8000948:	f7ff febe 	bl	80006c8 <__aeabi_fcmplt>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <DC_Motor_RampTick+0xe2>
                    r->current_duty = r->target_duty;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e002      	b.n	8000962 <DC_Motor_RampTick+0xe2>
            }
            else {
                r->active = 0; // fin rampe
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	751a      	strb	r2, [r3, #20]
            }

            DC_Motor_SetDuty(i + 1, r->current_duty);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	3301      	adds	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4610      	mov	r0, r2
 8000972:	f7ff ff27 	bl	80007c4 <DC_Motor_SetDuty>
 8000976:	e000      	b.n	800097a <DC_Motor_RampTick+0xfa>
        if (!r->active) continue;
 8000978:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3301      	adds	r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	dd82      	ble.n	800088c <DC_Motor_RampTick+0xc>
        }
    }
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000180 	.word	0x20000180

08000994 <BLE_SendCommand>:

#define huart_BLE huart1
extern UART_HandleTypeDef huart_BLE;

// Fonction d'envoi générique
void BLE_SendCommand(const char* cmd) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fbdf 	bl	8000160 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <BLE_SendCommand+0x28>)
 80009ae:	f003 f9e8 	bl	8003d82 <HAL_UART_Transmit>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000314 	.word	0x20000314

080009c0 <BLE_SendTrame>:

void BLE_SendTrame(const uint8_t* cmd) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, cmd, strlen((const char*)cmd), HAL_MAX_DELAY);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fbc9 	bl	8000160 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <BLE_SendTrame+0x28>)
 80009da:	f003 f9d2 	bl	8003d82 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000314 	.word	0x20000314

080009ec <BLE_AT>:

// Test AT
void BLE_AT(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT\r\n");
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <BLE_AT+0x10>)
 80009f2:	f7ff ffcf 	bl	8000994 <BLE_SendCommand>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08005ee8 	.word	0x08005ee8

08000a00 <BLE_Reset>:

// Redémarrage du module
void BLE_Reset(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESET\r\n");
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <BLE_Reset+0x10>)
 8000a06:	f7ff ffc5 	bl	8000994 <BLE_SendCommand>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08005ef0 	.word	0x08005ef0

08000a14 <BLE_RestoreDefaults>:

// Restauration usine
void BLE_RestoreDefaults(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESTORE\r\n");
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <BLE_RestoreDefaults+0x10>)
 8000a1a:	f7ff ffbb 	bl	8000994 <BLE_SendCommand>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08005efc 	.word	0x08005efc

08000a28 <BLE_ReadVersion>:

// Lire version du firmware
void BLE_ReadVersion(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+VER\r\n");
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <BLE_ReadVersion+0x10>)
 8000a2e:	f7ff ffb1 	bl	8000994 <BLE_SendCommand>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08005f0c 	.word	0x08005f0c

08000a3c <BLE_ReadName>:

// Lire nom BLE
void BLE_ReadName(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLENAME\r\n");
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <BLE_ReadName+0x10>)
 8000a42:	f7ff ffa7 	bl	8000994 <BLE_SendCommand>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08005f18 	.word	0x08005f18

08000a50 <BLE_SetName>:

// Définir nom BLE
void BLE_SetName(const char* name) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b092      	sub	sp, #72	@ 0x48
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLENAME=%s\r\n", name);
 8000a58:	f107 0008 	add.w	r0, r7, #8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <BLE_SetName+0x28>)
 8000a60:	2140      	movs	r1, #64	@ 0x40
 8000a62:	f004 f8f3 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff92 	bl	8000994 <BLE_SendCommand>
}
 8000a70:	bf00      	nop
 8000a72:	3748      	adds	r7, #72	@ 0x48
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08005f28 	.word	0x08005f28

08000a7c <BLE_ReadMAC>:

// Lire l’adresse MAC BLE
void BLE_ReadMAC(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLEMAC\r\n");
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <BLE_ReadMAC+0x10>)
 8000a82:	f7ff ff87 	bl	8000994 <BLE_SendCommand>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08005f38 	.word	0x08005f38

08000a90 <BLE_ReadRole>:

// Lire le rôle actuel
void BLE_ReadRole(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ROLE\r\n");
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <BLE_ReadRole+0x10>)
 8000a96:	f7ff ff7d 	bl	8000994 <BLE_SendCommand>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08005f44 	.word	0x08005f44

08000aa4 <BLE_SetRole>:

// Définir rôle (0 = slave, 1 = master)
void BLE_SetRole(uint8_t role) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ROLE=%d\r\n", (char)role);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f107 0008 	add.w	r0, r7, #8
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <BLE_SetRole+0x2c>)
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	f004 f8c8 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff67 	bl	8000994 <BLE_SendCommand>
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08005f50 	.word	0x08005f50

08000ad4 <BLE_SetPIN>:

// Définir mot de passe
void BLE_SetPIN(const char* pin6digits) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+PIN=%s\r\n", pin6digits);
 8000adc:	f107 0008 	add.w	r0, r7, #8
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <BLE_SetPIN+0x28>)
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	f004 f8b1 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff50 	bl	8000994 <BLE_SendCommand>
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	08005f60 	.word	0x08005f60

08000b00 <BLE_SetSecurity>:

// Définir le niveau de sécurité
void BLE_SetSecurity(uint8_t level) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SECURITY=%d\r\n", (char)level);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f107 0008 	add.w	r0, r7, #8
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <BLE_SetSecurity+0x2c>)
 8000b12:	2120      	movs	r1, #32
 8000b14:	f004 f89a 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff39 	bl	8000994 <BLE_SendCommand>
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08005f6c 	.word	0x08005f6c

08000b30 <BLE_ReadSecurity>:

// Lire niveau de sécurité
void BLE_ReadSecurity(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SECURITY\r\n");
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <BLE_ReadSecurity+0x10>)
 8000b36:	f7ff ff2d 	bl	8000994 <BLE_SendCommand>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08005f80 	.word	0x08005f80

08000b44 <BLE_ReadPIN>:

// Lire PIN actuel
void BLE_ReadPIN(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+PIN\r\n");
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <BLE_ReadPIN+0x10>)
 8000b4a:	f7ff ff23 	bl	8000994 <BLE_SendCommand>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08005f90 	.word	0x08005f90

08000b58 <BLE_EnterATMode>:

// Passer en mode AT
void BLE_EnterATMode(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>9\r\n");
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <BLE_EnterATMode+0x10>)
 8000b5e:	f7ff ff19 	bl	8000994 <BLE_SendCommand>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08005f9c 	.word	0x08005f9c

08000b6c <BLE_EnterBLEMode>:

// Revenir au mode BLE
void BLE_EnterBLEMode(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>8\r\n");
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <BLE_EnterBLEMode+0x10>)
 8000b72:	f7ff ff0f 	bl	8000994 <BLE_SendCommand>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08005fa4 	.word	0x08005fa4

08000b80 <BLE_SetLog>:

// Activer/désactiver le log
void BLE_SetLog(uint8_t enable) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LOG=%d\r\n", (char)enable);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f107 0008 	add.w	r0, r7, #8
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <BLE_SetLog+0x2c>)
 8000b92:	2120      	movs	r1, #32
 8000b94:	f004 f85a 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fef9 	bl	8000994 <BLE_SendCommand>
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08005fac 	.word	0x08005fac

08000bb0 <BLE_ReadLog>:

// Lire état du log
void BLE_ReadLog(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LOG\r\n");
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <BLE_ReadLog+0x10>)
 8000bb6:	f7ff feed 	bl	8000994 <BLE_SendCommand>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08005fb8 	.word	0x08005fb8

08000bc4 <BLE_SetLED>:

// Réglage LED d’état
void BLE_SetLED(uint8_t mode) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LED=%d\r\n", (char)mode);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f107 0008 	add.w	r0, r7, #8
 8000bd4:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <BLE_SetLED+0x2c>)
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	f004 f838 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fed7 	bl	8000994 <BLE_SendCommand>
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	@ 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08005fc4 	.word	0x08005fc4

08000bf4 <BLE_ReadLED>:

// Lire mode LED
void BLE_ReadLED(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LED\r\n");
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <BLE_ReadLED+0x10>)
 8000bfa:	f7ff fecb 	bl	8000994 <BLE_SendCommand>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08005fd0 	.word	0x08005fd0

08000c08 <BLE_SetRFPower>:

// Définir puissance d’émission (0 à 9)
void BLE_SetRFPower(uint8_t level) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+RFPWR=%d\r\n", (char)level);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f107 0008 	add.w	r0, r7, #8
 8000c18:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <BLE_SetRFPower+0x2c>)
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	f004 f816 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff feb5 	bl	8000994 <BLE_SendCommand>
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	08005fdc 	.word	0x08005fdc

08000c38 <BLE_ReadUUID>:

// Lire UUID
void BLE_ReadUUID(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+UUID\r\n");
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <BLE_ReadUUID+0x10>)
 8000c3e:	f7ff fea9 	bl	8000994 <BLE_SendCommand>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	08005fec 	.word	0x08005fec

08000c4c <BLE_SetUUID>:

// Modifier UUID d’un service ou caractéristique
void BLE_SetUUID(uint8_t index, const char* uuid) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a4      	sub	sp, #144	@ 0x90
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+UUID=%d,%s\r\n", (char)index, (char)uuid);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	f107 0008 	add.w	r0, r7, #8
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <BLE_SetUUID+0x38>)
 8000c66:	2180      	movs	r1, #128	@ 0x80
 8000c68:	f003 fff0 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fe8f 	bl	8000994 <BLE_SendCommand>
    BLE_Reset();  // UUID settings require reboot
 8000c76:	f7ff fec3 	bl	8000a00 <BLE_Reset>
}
 8000c7a:	bf00      	nop
 8000c7c:	3788      	adds	r7, #136	@ 0x88
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08005ff8 	.word	0x08005ff8

08000c88 <BLE_ReadAdvData>:

// Lire données du paquet de broadcast
void BLE_ReadAdvData(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVDATA\r\n");
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <BLE_ReadAdvData+0x10>)
 8000c8e:	f7ff fe81 	bl	8000994 <BLE_SendCommand>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08006008 	.word	0x08006008

08000c9c <BLE_SetAdvData>:

// Définir données broadcast personnalisées
void BLE_SetAdvData(const char* adv_data_hex) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0a2      	sub	sp, #136	@ 0x88
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+ADVDATA=%s\r\n", adv_data_hex);
 8000ca4:	f107 0008 	add.w	r0, r7, #8
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <BLE_SetAdvData+0x28>)
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	f003 ffcd 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe6c 	bl	8000994 <BLE_SendCommand>
}
 8000cbc:	bf00      	nop
 8000cbe:	3788      	adds	r7, #136	@ 0x88
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	08006018 	.word	0x08006018

08000cc8 <BLE_ReadAdvInterval>:

// Lire intervalle broadcast
void BLE_ReadAdvInterval(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVPARAM\r\n");
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <BLE_ReadAdvInterval+0x10>)
 8000cce:	f7ff fe61 	bl	8000994 <BLE_SendCommand>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08006028 	.word	0x08006028

08000cdc <BLE_SetAdvInterval>:

// Définir intervalle broadcast (10~4000 ms)
void BLE_SetAdvInterval(uint16_t interval_ms) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b092      	sub	sp, #72	@ 0x48
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+ADVPARAM=%d\r\n", (char)interval_ms);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f107 0008 	add.w	r0, r7, #8
 8000cee:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <BLE_SetAdvInterval+0x2c>)
 8000cf0:	2140      	movs	r1, #64	@ 0x40
 8000cf2:	f003 ffab 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe4a 	bl	8000994 <BLE_SendCommand>
}
 8000d00:	bf00      	nop
 8000d02:	3748      	adds	r7, #72	@ 0x48
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08006038 	.word	0x08006038

08000d0c <BLE_SetBroadcast>:

// Activer/désactiver le broadcast
void BLE_SetBroadcast(uint8_t enable) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ADV=%d\r\n", (char)enable);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f107 0008 	add.w	r0, r7, #8
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <BLE_SetBroadcast+0x2c>)
 8000d1e:	2120      	movs	r1, #32
 8000d20:	f003 ff94 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe33 	bl	8000994 <BLE_SendCommand>
}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800604c 	.word	0x0800604c

08000d3c <BLE_SetLowPowerMode>:

// Activer ou désactiver le mode low power
void BLE_SetLowPowerMode(uint8_t enable) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LPM=%d\r\n", (char)enable);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f107 0008 	add.w	r0, r7, #8
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <BLE_SetLowPowerMode+0x2c>)
 8000d4e:	2120      	movs	r1, #32
 8000d50:	f003 ff7c 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe1b 	bl	8000994 <BLE_SendCommand>
}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	@ 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08006058 	.word	0x08006058

08000d6c <BLE_ReadLowPowerMode>:

// Lire état low power
void BLE_ReadLowPowerMode(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LPM\r\n");
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <BLE_ReadLowPowerMode+0x10>)
 8000d72:	f7ff fe0f 	bl	8000994 <BLE_SendCommand>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08006064 	.word	0x08006064

08000d80 <BLE_ConnectTo>:
void BLE_Scan(void) {
    BLE_SendCommand("AT+SCAN=1\r\n");
}

// Connexion à un périphérique BLE (master mode)
void BLE_ConnectTo(const char* mac_addr) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b092      	sub	sp, #72	@ 0x48
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+CONN=%s\r\n", mac_addr);
 8000d88:	f107 0008 	add.w	r0, r7, #8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <BLE_ConnectTo+0x28>)
 8000d90:	2140      	movs	r1, #64	@ 0x40
 8000d92:	f003 ff5b 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fdfa 	bl	8000994 <BLE_SendCommand>
}
 8000da0:	bf00      	nop
 8000da2:	3748      	adds	r7, #72	@ 0x48
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800607c 	.word	0x0800607c

08000dac <BLE_Disconnect>:

// Déconnexion (nécessite d’abord AT>9)
void BLE_Disconnect(uint8_t mode) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+DISC=%d\r\n", (char)mode);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f107 0008 	add.w	r0, r7, #8
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <BLE_Disconnect+0x2c>)
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	f003 ff44 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fde3 	bl	8000994 <BLE_SendCommand>
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	0800608c 	.word	0x0800608c

08000ddc <BLE_Sleep>:

// Mise en veille (soft shutdown)
void BLE_Sleep(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SLEEP\r\n");
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <BLE_Sleep+0x10>)
 8000de2:	f7ff fdd7 	bl	8000994 <BLE_SendCommand>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	0800609c 	.word	0x0800609c

08000df0 <BLE_ReadBaudrate>:
// Lire le baudrate
void BLE_ReadBaudrate(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BAUD\r\n");
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <BLE_ReadBaudrate+0x10>)
 8000df6:	f7ff fdcd 	bl	8000994 <BLE_SendCommand>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	080060a8 	.word	0x080060a8

08000e04 <BLE_SetBaudrate>:

// Définir le baudrate (ex: 9600, 115200, etc.)
void BLE_SetBaudrate(uint32_t baudrate) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+BAUD=%lu\r\n", (char)baudrate);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f107 0008 	add.w	r0, r7, #8
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <BLE_SetBaudrate+0x2c>)
 8000e16:	2120      	movs	r1, #32
 8000e18:	f003 ff18 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fdb7 	bl	8000994 <BLE_SendCommand>
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	080060b4 	.word	0x080060b4

08000e34 <BLE_ReadMode>:

// Lire le mode (0 = BLE / 1 = BLE&SPP)
void BLE_ReadMode(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+MODE\r\n");
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <BLE_ReadMode+0x10>)
 8000e3a:	f7ff fdab 	bl	8000994 <BLE_SendCommand>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	080060c4 	.word	0x080060c4

08000e48 <BLE_SetMode>:

// Définir le mode BLE ou BLE+SPP
void BLE_SetMode(uint8_t mode) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+MODE=%d\r\n", (char)mode);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f107 0008 	add.w	r0, r7, #8
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <BLE_SetMode+0x2c>)
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	f003 fef6 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd95 	bl	8000994 <BLE_SendCommand>
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	080060d0 	.word	0x080060d0

08000e78 <BLE_ReadSPPName>:

// Lire nom SPP
void BLE_ReadSPPName(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPNAME\r\n");
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <BLE_ReadSPPName+0x10>)
 8000e7e:	f7ff fd89 	bl	8000994 <BLE_SendCommand>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	080060e0 	.word	0x080060e0

08000e8c <BLE_SetSPPName>:

// Définir nom SPP
void BLE_SetSPPName(const char* name) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b092      	sub	sp, #72	@ 0x48
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPNAME=%s\r\n", name);
 8000e94:	f107 0008 	add.w	r0, r7, #8
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <BLE_SetSPPName+0x28>)
 8000e9c:	2140      	movs	r1, #64	@ 0x40
 8000e9e:	f003 fed5 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fd74 	bl	8000994 <BLE_SendCommand>
}
 8000eac:	bf00      	nop
 8000eae:	3748      	adds	r7, #72	@ 0x48
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	080060f0 	.word	0x080060f0

08000eb8 <BLE_ReadSPPMAC>:

// Lire MAC SPP
void BLE_ReadSPPMAC(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPMAC\r\n");
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <BLE_ReadSPPMAC+0x10>)
 8000ebe:	f7ff fd69 	bl	8000994 <BLE_SendCommand>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08006100 	.word	0x08006100

08000ecc <BLE_SetBLEMAC>:

// Définir MAC BLE
void BLE_SetBLEMAC(const char* mac12) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b092      	sub	sp, #72	@ 0x48
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLEMAC=%s\r\n", mac12);
 8000ed4:	f107 0008 	add.w	r0, r7, #8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <BLE_SetBLEMAC+0x28>)
 8000edc:	2140      	movs	r1, #64	@ 0x40
 8000ede:	f003 feb5 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fd54 	bl	8000994 <BLE_SendCommand>
}
 8000eec:	bf00      	nop
 8000eee:	3748      	adds	r7, #72	@ 0x48
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	0800610c 	.word	0x0800610c

08000ef8 <BLE_SetSPPMAC>:

// Définir MAC SPP
void BLE_SetSPPMAC(const char* mac12) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b092      	sub	sp, #72	@ 0x48
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPMAC=%s\r\n", mac12);
 8000f00:	f107 0008 	add.w	r0, r7, #8
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <BLE_SetSPPMAC+0x28>)
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f003 fe9f 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fd3e 	bl	8000994 <BLE_SendCommand>
}
 8000f18:	bf00      	nop
 8000f1a:	3748      	adds	r7, #72	@ 0x48
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0800611c 	.word	0x0800611c

08000f24 <BLE_SetTargetUUID>:

// Définir UUID cible pour connexion (client mode)
void BLE_SetTargetUUID(const char* uuid) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0a2      	sub	sp, #136	@ 0x88
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TARGETUUID=%s\r\n", uuid);
 8000f2c:	f107 0008 	add.w	r0, r7, #8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <BLE_SetTargetUUID+0x28>)
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	f003 fe89 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd28 	bl	8000994 <BLE_SendCommand>
}
 8000f44:	bf00      	nop
 8000f46:	3788      	adds	r7, #136	@ 0x88
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0800612c 	.word	0x0800612c

08000f50 <BLE_ScanStart>:

// Scanner les périphériques BLE
void BLE_ScanStart(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SCAN=1\r\n");
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <BLE_ScanStart+0x10>)
 8000f56:	f7ff fd1d 	bl	8000994 <BLE_SendCommand>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08006070 	.word	0x08006070

08000f64 <BLE_SetScanLimits>:

// Configurer paramètres de scan (nombre, timeout)
void BLE_SetScanLimits(uint8_t count, uint8_t timeout_sec) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SCANM=%d,%d\r\n", (char)count, (char)timeout_sec);
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	f107 0008 	add.w	r0, r7, #8
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <BLE_SetScanLimits+0x38>)
 8000f82:	2120      	movs	r1, #32
 8000f84:	f003 fe62 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fd01 	bl	8000994 <BLE_SendCommand>
}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	08006140 	.word	0x08006140

08000fa0 <BLE_SetScanParams>:

// Configurer scan params (mode, interval, window)
void BLE_SetScanParams(uint8_t active, uint8_t interval, uint8_t window) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	460b      	mov	r3, r1
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	717b      	strb	r3, [r7, #5]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SCANPARAM=%d,%d,%d\r\n", (char)active, (char)interval, (char)window);
 8000fb2:	79f9      	ldrb	r1, [r7, #7]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	797a      	ldrb	r2, [r7, #5]
 8000fb8:	f107 0008 	add.w	r0, r7, #8
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <BLE_SetScanParams+0x3c>)
 8000fc4:	2140      	movs	r1, #64	@ 0x40
 8000fc6:	f003 fe41 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fce0 	bl	8000994 <BLE_SendCommand>
}
 8000fd4:	bf00      	nop
 8000fd6:	3748      	adds	r7, #72	@ 0x48
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08006154 	.word	0x08006154

08000fe0 <BLE_ClearBindings>:

// Effacer les liaisons enregistrées
void BLE_ClearBindings(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+CLRBIND\r\n");
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <BLE_ClearBindings+0x10>)
 8000fe6:	f7ff fcd5 	bl	8000994 <BLE_SendCommand>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800616c 	.word	0x0800616c

08000ff4 <BLE_SetAutoConnect>:

// Configurer auto-connexion (client mode uniquement)
void BLE_SetAutoConnect(const char* mac) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b092      	sub	sp, #72	@ 0x48
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SERVER=%s\r\n", mac);
 8000ffc:	f107 0008 	add.w	r0, r7, #8
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <BLE_SetAutoConnect+0x2c>)
 8001004:	2140      	movs	r1, #64	@ 0x40
 8001006:	f003 fe21 	bl	8004c4c <sniprintf>
    BLE_SendCommand(cmd);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fcc0 	bl	8000994 <BLE_SendCommand>
    BLE_Reset();  // Reboot pour appliquer
 8001014:	f7ff fcf4 	bl	8000a00 <BLE_Reset>
}
 8001018:	bf00      	nop
 800101a:	3748      	adds	r7, #72	@ 0x48
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800617c 	.word	0x0800617c

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f000 ff3a 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f81e 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 fa3e 	bl	80014b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001034:	f000 f888 	bl	8001148 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001038:	f000 f908 	bl	800124c <MX_TIM2_Init>
  MX_TIM3_Init();
 800103c:	f000 f95e 	bl	80012fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001040:	f000 f9b4 	bl	80013ac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001044:	f000 fa0a 	bl	800145c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001048:	f000 f862 	bl	8001110 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	4905      	ldr	r1, [pc, #20]	@ (8001064 <main+0x40>)
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <main+0x44>)
 8001052:	f002 ff21 	bl	8003e98 <HAL_UART_Receive_IT>
  // chaque caractère va être écrit dans le buff et une interruption sera envoyée à HAL_UART_RxCpltCallback

  //Config du module BLE
  config_BLE_drone();
 8001056:	f000 fb4d 	bl	80016f4 <config_BLE_drone>
  //Config moteurs
  DC_Motor_Init();
 800105a:	f7ff fb7d 	bl	8000758 <DC_Motor_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <main+0x3a>
 8001062:	bf00      	nop
 8001064:	2000035c 	.word	0x2000035c
 8001068:	20000314 	.word	0x20000314

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fe5f 	bl	8004d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800109c:	2309      	movs	r3, #9
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 faca 	bl	800264c <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80010be:	f000 fa81 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fd37 	bl	8002b50 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010e8:	f000 fa6c 	bl	80015c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 feb7 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001104:	f000 fa5e 	bl	80015c4 <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	3750      	adds	r7, #80	@ 0x50
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <MX_RTC_Init+0x30>)
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <MX_RTC_Init+0x34>)
 8001118:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_RTC_Init+0x30>)
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <MX_RTC_Init+0x30>)
 8001124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001128:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_RTC_Init+0x30>)
 800112c:	f002 f80a 	bl	8003144 <HAL_RTC_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001136:	f000 fa45 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001e0 	.word	0x200001e0
 8001144:	40002800 	.word	0x40002800

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b092      	sub	sp, #72	@ 0x48
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2220      	movs	r2, #32
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fde3 	bl	8004d3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001178:	4b32      	ldr	r3, [pc, #200]	@ (8001244 <MX_TIM1_Init+0xfc>)
 800117a:	4a33      	ldr	r2, [pc, #204]	@ (8001248 <MX_TIM1_Init+0x100>)
 800117c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800117e:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001180:	2213      	movs	r2, #19
 8001182:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <MX_TIM1_Init+0xfc>)
 800118c:	2209      	movs	r2, #9
 800118e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_TIM1_Init+0xfc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a2:	4828      	ldr	r0, [pc, #160]	@ (8001244 <MX_TIM1_Init+0xfc>)
 80011a4:	f002 f920 	bl	80033e8 <HAL_TIM_PWM_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 fa09 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011be:	4619      	mov	r1, r3
 80011c0:	4820      	ldr	r0, [pc, #128]	@ (8001244 <MX_TIM1_Init+0xfc>)
 80011c2:	f002 fcdf 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80011cc:	f000 f9fa 	bl	80015c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	@ 0x60
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_TIM1_Init+0xfc>)
 80011f6:	f002 f9e9 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001200:	f000 f9e0 	bl	80015c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001228:	f002 fd0a 	bl	8003c40 <HAL_TIMEx_ConfigBreakDeadTime>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001232:	f000 f9c7 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_TIM1_Init+0xfc>)
 8001238:	f000 fc1a 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3748      	adds	r7, #72	@ 0x48
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001f4 	.word	0x200001f4
 8001248:	40012c00 	.word	0x40012c00

0800124c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001274:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001278:	2213      	movs	r2, #19
 800127a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <MX_TIM2_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001284:	2209      	movs	r2, #9
 8001286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_TIM2_Init+0xac>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001294:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001296:	f002 f8a7 	bl	80033e8 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012a0:	f000 f990 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012b4:	f002 fc66 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80012be:	f000 f981 	bl	80015c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2208      	movs	r2, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012da:	f002 f977 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80012e4:	f000 f96e 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012ea:	f000 fbc1 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000023c 	.word	0x2000023c

080012fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <MX_TIM3_Init+0xac>)
 8001322:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 8001324:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001326:	2213      	movs	r2, #19
 8001328:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001332:	2209      	movs	r2, #9
 8001334:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001342:	4818      	ldr	r0, [pc, #96]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001344:	f002 f850 	bl	80033e8 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800134e:	f000 f939 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4619      	mov	r1, r3
 8001360:	4810      	ldr	r0, [pc, #64]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001362:	f002 fc0f 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800136c:	f000 f92a 	bl	80015c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	@ 0x60
 8001372:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001388:	f002 f920 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001392:	f000 f917 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001396:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <MX_TIM3_Init+0xa8>)
 8001398:	f000 fb6a 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000284 	.word	0x20000284
 80013a8:	40000400 	.word	0x40000400

080013ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <MX_TIM4_Init+0xac>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013d6:	2213      	movs	r2, #19
 80013d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013e2:	2209      	movs	r2, #9
 80013e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013f2:	4818      	ldr	r0, [pc, #96]	@ (8001454 <MX_TIM4_Init+0xa8>)
 80013f4:	f001 fff8 	bl	80033e8 <HAL_TIM_PWM_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80013fe:	f000 f8e1 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	4619      	mov	r1, r3
 8001410:	4810      	ldr	r0, [pc, #64]	@ (8001454 <MX_TIM4_Init+0xa8>)
 8001412:	f002 fbb7 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800141c:	f000 f8d2 	bl	80015c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001420:	2360      	movs	r3, #96	@ 0x60
 8001422:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2208      	movs	r2, #8
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM4_Init+0xa8>)
 8001438:	f002 f8c8 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001442:	f000 f8bf 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM4_Init+0xa8>)
 8001448:	f000 fb12 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002cc 	.word	0x200002cc
 8001458:	40000800 	.word	0x40000800

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f002 fc25 	bl	8003ce2 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f891 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000314 	.word	0x20000314
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <MX_GPIO_Init+0x58>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

////////////////////////////////////////////////////////////////// CODE RX

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <HAL_UART_RxCpltCallback+0x9c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d13f      	bne.n	800159e <HAL_UART_RxCpltCallback+0x92>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_UART_RxCpltCallback+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b3e      	cmp	r3, #62	@ 0x3e
 8001524:	d81e      	bhi.n	8001564 <HAL_UART_RxCpltCallback+0x58>
        	if(debut_de_trame){						//debug
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_UART_RxCpltCallback+0xa4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <HAL_UART_RxCpltCallback+0x34>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 800152e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <HAL_UART_RxCpltCallback+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	491d      	ldr	r1, [pc, #116]	@ (80015ac <HAL_UART_RxCpltCallback+0xa0>)
 8001536:	600a      	str	r2, [r1, #0]
 8001538:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 800153a:	7811      	ldrb	r1, [r2, #0]
 800153c:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <HAL_UART_RxCpltCallback+0xac>)
 800153e:	54d1      	strb	r1, [r2, r3]
        	}
            if((char)rx_it_buffer == '\n'){
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b0a      	cmp	r3, #10
 8001546:	d10d      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x58>
            	if (!debut_de_trame){
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_UART_RxCpltCallback+0xa4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_UART_RxCpltCallback+0x52>
            		debut_de_trame = true;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_UART_RxCpltCallback+0xa4>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e002      	b.n	8001564 <HAL_UART_RxCpltCallback+0x58>
            	}
            	else{
            		fin_de_trame = true;
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_UART_RxCpltCallback+0xb0>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_UART_RxCpltCallback+0xb0>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_UART_RxCpltCallback+0x88>
        	process_trame_rx(receive_buffer);  // traite la trame
 800156c:	4812      	ldr	r0, [pc, #72]	@ (80015b8 <HAL_UART_RxCpltCallback+0xac>)
 800156e:	f000 f887 	bl	8001680 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	2100      	movs	r1, #0
 8001576:	4810      	ldr	r0, [pc, #64]	@ (80015b8 <HAL_UART_RxCpltCallback+0xac>)
 8001578:	f003 fbe1 	bl	8004d3e <memset>
            receive_index = 0;              // réinitialise l'index
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_UART_RxCpltCallback+0xa0>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_UART_RxCpltCallback+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_UART_RxCpltCallback+0xb0>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
        }
        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	4907      	ldr	r1, [pc, #28]	@ (80015b4 <HAL_UART_RxCpltCallback+0xa8>)
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <HAL_UART_RxCpltCallback+0xb4>)
 800159a:	f002 fc7d 	bl	8003e98 <HAL_UART_Receive_IT>
    }
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40013800 	.word	0x40013800
 80015ac:	20000360 	.word	0x20000360
 80015b0:	20000364 	.word	0x20000364
 80015b4:	2000035c 	.word	0x2000035c
 80015b8:	20000368 	.word	0x20000368
 80015bc:	20000365 	.word	0x20000365
 80015c0:	20000314 	.word	0x20000314

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <Error_Handler+0x8>

080015d0 <handle_BLE_DISC>:
    {"BLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <handle_BLE_DISC+0x18>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = true;
 80015da:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <handle_BLE_DISC+0x18>)
 80015dc:	2201      	movs	r2, #1
 80015de:	721a      	strb	r2, [r3, #8]

}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	200003a8 	.word	0x200003a8

080015ec <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <handle_BLE_CONN+0x18>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = false;
 80015f6:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <handle_BLE_CONN+0x18>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	721a      	strb	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	200003a8 	.word	0x200003a8

08001608 <handle_OK>:

void handle_OK(void){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	flags.OK = true;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <handle_OK+0x14>)
 800160e:	2201      	movs	r2, #1
 8001610:	70da      	strb	r2, [r3, #3]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200003a8 	.word	0x200003a8

08001620 <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <handle_ERR_CMD+0x14>)
 8001626:	2201      	movs	r2, #1
 8001628:	711a      	strb	r2, [r3, #4]
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200003a8 	.word	0x200003a8

08001638 <handle_RSTING>:

void handle_RSTING(void){
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <handle_RSTING+0x14>)
 800163e:	2201      	movs	r2, #1
 8001640:	715a      	strb	r2, [r3, #5]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200003a8 	.word	0x200003a8

08001650 <handle_CONNECTING>:
void handle_CONNECTING(void){
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <handle_CONNECTING+0x14>)
 8001656:	2201      	movs	r2, #1
 8001658:	719a      	strb	r2, [r3, #6]
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200003a8 	.word	0x200003a8

08001668 <handle_RESTORING>:
void handle_RESTORING(void){
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	flags.RESTORING = true;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <handle_RESTORING+0x14>)
 800166e:	2201      	movs	r2, #1
 8001670:	71da      	strb	r2, [r3, #7]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200003a8 	.word	0x200003a8

08001680 <process_trame_rx>:



// fonctions
void process_trame_rx(char* receive_buffer) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d029      	beq.n	80016e4 <process_trame_rx+0x64>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e017      	b.n	80016c6 <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <process_trame_rx+0x6c>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7fe fd53 	bl	800014c <strcmp>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 80016ac:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <process_trame_rx+0x6c>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <process_trame_rx+0x70>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 80016be:	e012      	b.n	80016e6 <process_trame_rx+0x66>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	dde4      	ble.n	8001696 <process_trame_rx+0x16>
			}
		}

		if (receive_buffer[0] == '$') {  // comparaison d'un caractère
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b24      	cmp	r3, #36	@ 0x24
 80016d2:	d103      	bne.n	80016dc <process_trame_rx+0x5c>
		    parse_drone_trame_char(receive_buffer);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f88f 	bl	80017f8 <parse_drone_trame_char>
 80016da:	e004      	b.n	80016e6 <process_trame_rx+0x66>

		}

		else {							//Erreur
			flags.UNKNOW_COMMAND = true;
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <process_trame_rx+0x70>)
 80016de:	2201      	movs	r2, #1
 80016e0:	709a      	strb	r2, [r3, #2]
			return;
 80016e2:	e000      	b.n	80016e6 <process_trame_rx+0x66>
		return;
 80016e4:	bf00      	nop
		}
		}
}
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000c4 	.word	0x200000c4
 80016f0:	200003a8 	.word	0x200003a8

080016f4 <config_BLE_drone>:
//	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
//	BLE.Reset();                 // Redémarre pour appliquer
//	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
//
//}
void config_BLE_drone(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	BLE.RestoreDefaults();
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <config_BLE_drone+0x8c>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4798      	blx	r3
	wait_until_flag(&flags.RESTORING,BLE_TIMEOUT_MS);
 80016fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001702:	4820      	ldr	r0, [pc, #128]	@ (8001784 <config_BLE_drone+0x90>)
 8001704:	f000 f848 	bl	8001798 <wait_until_flag>
	HAL_Delay(500);
 8001708:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800170c:	f000 fc2a 	bl	8001f64 <HAL_Delay>
	BLE.EnterATMode();
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <config_BLE_drone+0x8c>)
 8001712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001716:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001718:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800171c:	481a      	ldr	r0, [pc, #104]	@ (8001788 <config_BLE_drone+0x94>)
 800171e:	f000 f83b 	bl	8001798 <wait_until_flag>
	BLE.SetName(NAME);
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <config_BLE_drone+0x8c>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4819      	ldr	r0, [pc, #100]	@ (800178c <config_BLE_drone+0x98>)
 8001728:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 800172a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800172e:	4816      	ldr	r0, [pc, #88]	@ (8001788 <config_BLE_drone+0x94>)
 8001730:	f000 f832 	bl	8001798 <wait_until_flag>
	BLE.SetRole(BLE_ROLE);
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <config_BLE_drone+0x8c>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	2000      	movs	r0, #0
 800173a:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 800173c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001740:	4811      	ldr	r0, [pc, #68]	@ (8001788 <config_BLE_drone+0x94>)
 8001742:	f000 f829 	bl	8001798 <wait_until_flag>
	BLE.SetBLEMAC(BLE_MAC_SERVEUR);
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <config_BLE_drone+0x8c>)
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174a:	4811      	ldr	r0, [pc, #68]	@ (8001790 <config_BLE_drone+0x9c>)
 800174c:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 800174e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <config_BLE_drone+0x94>)
 8001754:	f000 f820 	bl	8001798 <wait_until_flag>
	BLE.SetSecurity(SECURITY);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <config_BLE_drone+0x8c>)
 800175a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175c:	2000      	movs	r0, #0
 800175e:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001760:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001764:	4808      	ldr	r0, [pc, #32]	@ (8001788 <config_BLE_drone+0x94>)
 8001766:	f000 f817 	bl	8001798 <wait_until_flag>
	BLE.Reset();                 // Redémarre pour appliquer
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <config_BLE_drone+0x8c>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	4798      	blx	r3
	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
 8001770:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <config_BLE_drone+0xa0>)
 8001776:	f000 f80f 	bl	8001798 <wait_until_flag>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000
 8001784:	200003af 	.word	0x200003af
 8001788:	200003ab 	.word	0x200003ab
 800178c:	080061f0 	.word	0x080061f0
 8001790:	080061fc 	.word	0x080061fc
 8001794:	200003ad 	.word	0x200003ad

08001798 <wait_until_flag>:

void wait_until_flag(volatile bool* flag, uint32_t timeout_ms) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 80017a2:	f000 fbd5 	bl	8001f50 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]

    while (!(*flag)) {
 80017a8:	e00d      	b.n	80017c6 <wait_until_flag+0x2e>
        if (HAL_GetTick() - start >= timeout_ms) {
 80017aa:	f000 fbd1 	bl	8001f50 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d805      	bhi.n	80017c6 <wait_until_flag+0x2e>
            flag_timeout_err = true;      // Indique qu'un timeout s’est produit
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <wait_until_flag+0x50>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
            TIMEOUT_ERR_HANDLER();        // Fonction de traitement personnalisée
 80017c0:	f000 f814 	bl	80017ec <TIMEOUT_ERR_HANDLER>
            return;                       // Sort de la fonction
 80017c4:	e00d      	b.n	80017e2 <wait_until_flag+0x4a>
    while (!(*flag)) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1e9      	bne.n	80017aa <wait_until_flag+0x12>
        }
    }

    *flag = false;                        // Réinitialise le flag une fois traité
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    flag_timeout_err = false;             // Tout s’est bien passé
 80017dc:	4b02      	ldr	r3, [pc, #8]	@ (80017e8 <wait_until_flag+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200003b1 	.word	0x200003b1

080017ec <TIMEOUT_ERR_HANDLER>:


void TIMEOUT_ERR_HANDLER(void){
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	//Ecrire ça plus tard
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <parse_drone_trame_char>:


uint16_t adcData_2[ADC_NUM_CONVERSIONS];
int gpioData_2[GPIO_NUM_CONVERSIONS];

void parse_drone_trame_char(const char* buffer) {
 80017f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017fc:	b08b      	sub	sp, #44	@ 0x2c
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	466b      	mov	r3, sp
 8001804:	461e      	mov	r6, r3
    // Copie de la trame pour traitement (strtok modifie la chaîne)
    char temp[strlen(buffer) + 1];
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fcaa 	bl	8000160 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	460b      	mov	r3, r1
 8001812:	3b01      	subs	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	2300      	movs	r3, #0
 8001818:	4688      	mov	r8, r1
 800181a:	4699      	mov	r9, r3
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001828:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001830:	2300      	movs	r3, #0
 8001832:	460c      	mov	r4, r1
 8001834:	461d      	mov	r5, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	00eb      	lsls	r3, r5, #3
 8001840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001844:	00e2      	lsls	r2, r4, #3
 8001846:	1dcb      	adds	r3, r1, #7
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	ebad 0d03 	sub.w	sp, sp, r3
 8001850:	466b      	mov	r3, sp
 8001852:	3300      	adds	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
    strcpy(temp, buffer);
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	6938      	ldr	r0, [r7, #16]
 800185a:	f003 fb54 	bl	8004f06 <strcpy>

    // Recherche du marqueur '$'
    char* start = strchr(temp, '$');
 800185e:	2124      	movs	r1, #36	@ 0x24
 8001860:	6938      	ldr	r0, [r7, #16]
 8001862:	f003 fa74 	bl	8004d4e <strchr>
 8001866:	6278      	str	r0, [r7, #36]	@ 0x24
    if (start == NULL) return;  // Trame invalide
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03c      	beq.n	80018e8 <parse_drone_trame_char+0xf0>

    start++; // Avance après le '$'
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

    // Séparer les ADC et GPIO : ADC sont suivis de '/' ; GPIO sans séparateur
    int adc_index = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
    while (adc_index < ADC_NUM_CONVERSIONS) {
 8001878:	e014      	b.n	80018a4 <parse_drone_trame_char+0xac>
        char* token = strtok(start, "/");
 800187a:	491e      	ldr	r1, [pc, #120]	@ (80018f4 <parse_drone_trame_char+0xfc>)
 800187c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800187e:	f003 fa73 	bl	8004d68 <strtok>
 8001882:	60f8      	str	r0, [r7, #12]
        if (token == NULL) return;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02d      	beq.n	80018e6 <parse_drone_trame_char+0xee>
        adcData_2[adc_index++] = (uint16_t)atoi(token);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f003 f894 	bl	80049b8 <atoi>
 8001890:	4601      	mov	r1, r0
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	623a      	str	r2, [r7, #32]
 8001898:	b289      	uxth	r1, r1
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <parse_drone_trame_char+0x100>)
 800189c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        start = NULL;  // Après le premier appel, strtok utilise NULL
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (adc_index < ADC_NUM_CONVERSIONS) {
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	dde7      	ble.n	800187a <parse_drone_trame_char+0x82>
    }

    // Ce qu'il reste : les GPIO, un par caractère numérique
    int gpio_index = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    char* token = strtok(NULL, "\r\n");
 80018ae:	4913      	ldr	r1, [pc, #76]	@ (80018fc <parse_drone_trame_char+0x104>)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f003 fa59 	bl	8004d68 <strtok>
 80018b6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 80018b8:	e00d      	b.n	80018d6 <parse_drone_trame_char+0xde>
        gpioData_2[gpio_index++] = token[0] - '0';  // Convertit '1' -> 1
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	61fa      	str	r2, [r7, #28]
 80018c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80018ca:	490d      	ldr	r1, [pc, #52]	@ (8001900 <parse_drone_trame_char+0x108>)
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        token++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <parse_drone_trame_char+0xea>
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	ddeb      	ble.n	80018ba <parse_drone_trame_char+0xc2>
 80018e2:	46b5      	mov	sp, r6
 80018e4:	e001      	b.n	80018ea <parse_drone_trame_char+0xf2>
        if (token == NULL) return;
 80018e6:	bf00      	nop
    if (start == NULL) return;  // Trame invalide
 80018e8:	46b5      	mov	sp, r6
    }
}
 80018ea:	372c      	adds	r7, #44	@ 0x2c
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018f2:	bf00      	nop
 80018f4:	0800621c 	.word	0x0800621c
 80018f8:	200003b4 	.word	0x200003b4
 80018fc:	0800620c 	.word	0x0800620c
 8001900:	200003bc 	.word	0x200003bc

08001904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_MspInit+0x5c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <HAL_MspInit+0x5c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_MspInit+0x5c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <HAL_MspInit+0x5c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_MspInit+0x5c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_MspInit+0x60>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_MspInit+0x60>)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000

08001968 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0f      	ldr	r2, [pc, #60]	@ (80019b4 <HAL_RTC_MspInit+0x4c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d118      	bne.n	80019ac <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800197a:	f000 fe5b 	bl	8002634 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_RTC_MspInit+0x50>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_RTC_MspInit+0x50>)
 8001984:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RTC_MspInit+0x50>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RTC_MspInit+0x54>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 fbda 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f000 fbf3 	bl	8002192 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40002800 	.word	0x40002800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	4242043c 	.word	0x4242043c

080019c0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a24      	ldr	r2, [pc, #144]	@ (8001a60 <HAL_TIM_PWM_MspInit+0xa0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10c      	bne.n	80019ec <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ea:	e034      	b.n	8001a56 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f4:	d10c      	bne.n	8001a10 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
}
 8001a0e:	e022      	b.n	8001a56 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_TIM_PWM_MspInit+0xa8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10c      	bne.n	8001a34 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
}
 8001a32:	e010      	b.n	8001a56 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <HAL_TIM_PWM_MspInit+0xac>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10b      	bne.n	8001a56 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_TIM_PWM_MspInit+0xa4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b80 <HAL_TIM_MspPostInit+0x110>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a3b      	ldr	r2, [pc, #236]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4832      	ldr	r0, [pc, #200]	@ (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001abe:	f000 fc35 	bl	800232c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ac2:	e059      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001acc:	d118      	bne.n	8001b00 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4619      	mov	r1, r3
 8001af8:	4823      	ldr	r0, [pc, #140]	@ (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001afa:	f000 fc17 	bl	800232c <HAL_GPIO_Init>
}
 8001afe:	e03b      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <HAL_TIM_MspPostInit+0x11c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d118      	bne.n	8001b3c <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b22:	2340      	movs	r3, #64	@ 0x40
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4814      	ldr	r0, [pc, #80]	@ (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001b36:	f000 fbf9 	bl	800232c <HAL_GPIO_Init>
}
 8001b3a:	e01d      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_TIM_MspPostInit+0x120>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d118      	bne.n	8001b78 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <HAL_TIM_MspPostInit+0x124>)
 8001b74:	f000 fbda 	bl	800232c <HAL_GPIO_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40010c00 	.word	0x40010c00

08001b98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a20      	ldr	r2, [pc, #128]	@ (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d139      	bne.n	8001c2c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480f      	ldr	r0, [pc, #60]	@ (8001c3c <HAL_UART_MspInit+0xa4>)
 8001bfe:	f000 fb95 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <HAL_UART_MspInit+0xa4>)
 8001c18:	f000 fb88 	bl	800232c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2025      	movs	r0, #37	@ 0x25
 8001c22:	f000 fa9a 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c26:	2025      	movs	r0, #37	@ 0x25
 8001c28:	f000 fab3 	bl	8002192 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <NMI_Handler+0x4>

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <MemManage_Handler+0x4>

08001c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 f94c 	bl	8001f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  DC_Motor_RampTick();
 8001c94:	f7fe fdf4 	bl	8000880 <DC_Motor_RampTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <RTC_IRQHandler+0x10>)
 8001ca2:	f001 fb58 	bl	8003356 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200001e0 	.word	0x200001e0

08001cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART1_IRQHandler+0x10>)
 8001cb6:	f002 f915 	bl	8003ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000314 	.word	0x20000314

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_kill>:

int _kill(int pid, int sig)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cdc:	f003 f8e6 	bl	8004eac <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2216      	movs	r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_exit>:

void _exit (int status)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffe7 	bl	8001cd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <_exit+0x12>

08001d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
  }

  return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf1      	blt.n	8001d54 <_write+0x12>
  }
  return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da0:	605a      	str	r2, [r3, #4]
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <_isatty>:

int _isatty(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f003 f84e 	bl	8004eac <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20005000 	.word	0x20005000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	200003d0 	.word	0x200003d0
 8001e44:	20000528 	.word	0x20000528

08001e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e54:	f7ff fff8 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e5a:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a09      	ldr	r2, [pc, #36]	@ (8001e94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e70:	4c09      	ldr	r4, [pc, #36]	@ (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f003 f81b 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e82:	f7ff f8cf 	bl	8001024 <main>
  bx lr
 8001e86:	4770      	bx	lr
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001e90:	08006450 	.word	0x08006450
  ldr r2, =_sbss
 8001e94:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001e98:	20000524 	.word	0x20000524

08001e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_2_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <HAL_Init+0x28>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_Init+0x28>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f000 f947 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f000 f808 	bl	8001ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebc:	f7ff fd22 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x54>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x58>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f95f 	bl	80021ae <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00e      	b.n	8001f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d80a      	bhi.n	8001f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f000 f927 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	@ (8001f28 <HAL_InitTick+0x5c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200000fc 	.word	0x200000fc
 8001f24:	20000104 	.word	0x20000104
 8001f28:	20000100 	.word	0x20000100

08001f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_IncTick+0x1c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_IncTick+0x20>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a03      	ldr	r2, [pc, #12]	@ (8001f4c <HAL_IncTick+0x20>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000104 	.word	0x20000104
 8001f4c:	200003d4 	.word	0x200003d4

08001f50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b02      	ldr	r3, [pc, #8]	@ (8001f60 <HAL_GetTick+0x10>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	200003d4 	.word	0x200003d4

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffe0 	bl	8001f50 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000104 	.word	0x20000104

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4906      	ldr	r1, [pc, #24]	@ (8002044 <__NVIC_EnableIRQ+0x34>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff90 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff2d 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff42 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff90 	bl	800209c <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5f 	bl	8002048 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff35 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e020      	b.n	8002232 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020e 	bic.w	r2, r2, #14
 80021fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d005      	beq.n	8002260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e051      	b.n	8002304 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_DMA_Abort_IT+0xd4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d029      	beq.n	80022de <HAL_DMA_Abort_IT+0xa2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <HAL_DMA_Abort_IT+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <HAL_DMA_Abort_IT+0x9e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <HAL_DMA_Abort_IT+0xdc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01a      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x98>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_DMA_Abort_IT+0xe0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d012      	beq.n	80022ce <HAL_DMA_Abort_IT+0x92>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_DMA_Abort_IT+0xe4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00a      	beq.n	80022c8 <HAL_DMA_Abort_IT+0x8c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_DMA_Abort_IT+0xe8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_DMA_Abort_IT+0x86>
 80022bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022c0:	e00e      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022c6:	e00b      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022cc:	e008      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d2:	e005      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d8:	e002      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022da:	2310      	movs	r3, #16
 80022dc:	e000      	b.n	80022e0 <HAL_DMA_Abort_IT+0xa4>
 80022de:	2301      	movs	r3, #1
 80022e0:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <HAL_DMA_Abort_IT+0xec>)
 80022e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
    } 
  }
  return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020008 	.word	0x40020008
 8002314:	4002001c 	.word	0x4002001c
 8002318:	40020030 	.word	0x40020030
 800231c:	40020044 	.word	0x40020044
 8002320:	40020058 	.word	0x40020058
 8002324:	4002006c 	.word	0x4002006c
 8002328:	40020000 	.word	0x40020000

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	@ 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e169      	b.n	8002614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002340:	2201      	movs	r2, #1
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8158 	bne.w	800260e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a9a      	ldr	r2, [pc, #616]	@ (80025cc <HAL_GPIO_Init+0x2a0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002368:	4a98      	ldr	r2, [pc, #608]	@ (80025cc <HAL_GPIO_Init+0x2a0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d875      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800236e:	4a98      	ldr	r2, [pc, #608]	@ (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d058      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002374:	4a96      	ldr	r2, [pc, #600]	@ (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d86f      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800237a:	4a96      	ldr	r2, [pc, #600]	@ (80025d4 <HAL_GPIO_Init+0x2a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d052      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002380:	4a94      	ldr	r2, [pc, #592]	@ (80025d4 <HAL_GPIO_Init+0x2a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d869      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002386:	4a94      	ldr	r2, [pc, #592]	@ (80025d8 <HAL_GPIO_Init+0x2ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d04c      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 800238c:	4a92      	ldr	r2, [pc, #584]	@ (80025d8 <HAL_GPIO_Init+0x2ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d863      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002392:	4a92      	ldr	r2, [pc, #584]	@ (80025dc <HAL_GPIO_Init+0x2b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d046      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002398:	4a90      	ldr	r2, [pc, #576]	@ (80025dc <HAL_GPIO_Init+0x2b0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d85d      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d82a      	bhi.n	80023f8 <HAL_GPIO_Init+0xcc>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d859      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 80023a6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <HAL_GPIO_Init+0x80>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002413 	.word	0x08002413
 80023b8:	08002455 	.word	0x08002455
 80023bc:	0800245b 	.word	0x0800245b
 80023c0:	0800245b 	.word	0x0800245b
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800245b 	.word	0x0800245b
 80023cc:	0800245b 	.word	0x0800245b
 80023d0:	0800245b 	.word	0x0800245b
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	0800245b 	.word	0x0800245b
 80023dc:	0800245b 	.word	0x0800245b
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	0800245b 	.word	0x0800245b
 80023ec:	0800245b 	.word	0x0800245b
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	4a79      	ldr	r2, [pc, #484]	@ (80025e0 <HAL_GPIO_Init+0x2b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023fe:	e02c      	b.n	800245a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e029      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	3304      	adds	r3, #4
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e024      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e01f      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	330c      	adds	r3, #12
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e01a      	b.n	800245c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242e:	2304      	movs	r3, #4
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e013      	b.n	800245c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	611a      	str	r2, [r3, #16]
          break;
 8002446:	e009      	b.n	800245c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	615a      	str	r2, [r3, #20]
          break;
 8002452:	e003      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x130>
          break;
 800245a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	@ 0xff
 8002460:	d801      	bhi.n	8002466 <HAL_GPIO_Init+0x13a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <HAL_GPIO_Init+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	@ 0xff
 8002470:	d802      	bhi.n	8002478 <HAL_GPIO_Init+0x14c>
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x152>
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	3b08      	subs	r3, #8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	210f      	movs	r1, #15
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80b1 	beq.w	800260e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ac:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c4:	4a48      	ldr	r2, [pc, #288]	@ (80025e8 <HAL_GPIO_Init+0x2bc>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	@ (80025ec <HAL_GPIO_Init+0x2c0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1ec>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3f      	ldr	r2, [pc, #252]	@ (80025f0 <HAL_GPIO_Init+0x2c4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1e8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3e      	ldr	r2, [pc, #248]	@ (80025f4 <HAL_GPIO_Init+0x2c8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <HAL_GPIO_Init+0x2cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1e0>
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 800250c:	2304      	movs	r3, #4
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002518:	2300      	movs	r3, #0
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800252a:	492f      	ldr	r1, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x2bc>)
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	492c      	ldr	r1, [pc, #176]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002552:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	4928      	ldr	r1, [pc, #160]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800255c:	4013      	ands	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	4922      	ldr	r1, [pc, #136]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	491e      	ldr	r1, [pc, #120]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002584:	4013      	ands	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4918      	ldr	r1, [pc, #96]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4914      	ldr	r1, [pc, #80]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d021      	beq.n	8002600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e021      	b.n	800260e <HAL_GPIO_Init+0x2e2>
 80025ca:	bf00      	nop
 80025cc:	10320000 	.word	0x10320000
 80025d0:	10310000 	.word	0x10310000
 80025d4:	10220000 	.word	0x10220000
 80025d8:	10210000 	.word	0x10210000
 80025dc:	10120000 	.word	0x10120000
 80025e0:	10110000 	.word	0x10110000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40010800 	.word	0x40010800
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_GPIO_Init+0x304>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	43db      	mvns	r3, r3
 8002608:	4909      	ldr	r1, [pc, #36]	@ (8002630 <HAL_GPIO_Init+0x304>)
 800260a:	4013      	ands	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	f47f ae8e 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	372c      	adds	r7, #44	@ 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_PWR_EnableBkUpAccess+0x14>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	420e0020 	.word	0x420e0020

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e272      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e24c      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fc12 	bl	8001f50 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fc0e 	bl	8001f50 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e200      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fbfe 	bl	8001f50 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff fbfa 	bl	8001f50 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ec      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fbb3 	bl	8001f50 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7ff fbaf 	bl	8001f50 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fb92 	bl	8001f50 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7ff fb8e 	bl	8001f50 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e180      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7ff fb72 	bl	8001f50 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7ff fb6e 	bl	8001f50 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 face 	bl	8002e30 <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7ff fb58 	bl	8001f50 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff fb54 	bl	8001f50 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e146      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b92      	ldr	r3, [pc, #584]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a87      	ldr	r2, [pc, #540]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b85      	ldr	r3, [pc, #532]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b82      	ldr	r3, [pc, #520]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b7f      	ldr	r3, [pc, #508]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7ff fb15 	bl	8001f50 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7ff fb11 	bl	8001f50 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	@ 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b75      	ldr	r3, [pc, #468]	@ (8002b14 <HAL_RCC_OscConfig+0x4c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b6f      	ldr	r3, [pc, #444]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a69      	ldr	r2, [pc, #420]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b67      	ldr	r3, [pc, #412]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a66      	ldr	r2, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b61      	ldr	r3, [pc, #388]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b5e      	ldr	r3, [pc, #376]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a5d      	ldr	r2, [pc, #372]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a57      	ldr	r2, [pc, #348]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7ff fac5 	bl	8001f50 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7ff fac1 	bl	8001f50 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7ff faaf 	bl	8001f50 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff faab 	bl	8001f50 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e09b      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7ff fa7f 	bl	8001f50 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7ff fa7b 	bl	8001f50 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4921      	ldr	r1, [pc, #132]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	491b      	ldr	r1, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7ff fa4f 	bl	8001f50 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff fa4b 	bl	8001f50 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e035      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fa38 	bl	8001f50 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7ff fa34 	bl	8001f50 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e019      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_OscConfig+0x500>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b6a      	ldr	r3, [pc, #424]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b67      	ldr	r3, [pc, #412]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4965      	ldr	r1, [pc, #404]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d040      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e073      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4936      	ldr	r1, [pc, #216]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7ff f986 	bl	8001f50 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7ff f982 	bl	8001f50 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d210      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4922      	ldr	r1, [pc, #136]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f8e4 	bl	8001ecc <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08006220 	.word	0x08006220
 8002d1c:	200000fc 	.word	0x200000fc
 8002d20:	20000100 	.word	0x20000100

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x30>
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x36>
 8002d52:	e027      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d54:	4b19      	ldr	r3, [pc, #100]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d56:	613b      	str	r3, [r7, #16]
      break;
 8002d58:	e027      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0c5b      	lsrs	r3, r3, #17
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e004      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	613b      	str	r3, [r7, #16]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002da6:	613b      	str	r3, [r7, #16]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	693b      	ldr	r3, [r7, #16]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	08006238 	.word	0x08006238
 8002dc4:	08006248 	.word	0x08006248
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	200000fc 	.word	0x200000fc

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff2 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006230 	.word	0x08006230

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0adb      	lsrs	r3, r3, #11
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	@ (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08006230 	.word	0x08006230

08002e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <RCC_Delay+0x34>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <RCC_Delay+0x38>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0a5b      	lsrs	r3, r3, #9
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e4c:	bf00      	nop
  }
  while (Delay --);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <RCC_Delay+0x1c>
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	200000fc 	.word	0x200000fc
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d07d      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b4c      	ldr	r3, [pc, #304]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b49      	ldr	r3, [pc, #292]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b46      	ldr	r3, [pc, #280]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d118      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec0:	4b43      	ldr	r3, [pc, #268]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ecc:	f7ff f840 	bl	8001f50 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7ff f83c 	bl	8001f50 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e06d      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ef2:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02e      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d027      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f10:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f20:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f26:	4a29      	ldr	r2, [pc, #164]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7ff f80b 	bl	8001f50 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7ff f807 	bl	8001f50 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e036      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ee      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4917      	ldr	r1, [pc, #92]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f78:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	490b      	ldr	r1, [pc, #44]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4904      	ldr	r1, [pc, #16]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42420440 	.word	0x42420440

08002fd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	f200 808a 	bhi.w	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d045      	beq.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d075      	beq.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800300e:	e082      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003010:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003016:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d07b      	beq.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a41      	ldr	r2, [pc, #260]	@ (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800303a:	4b3c      	ldr	r3, [pc, #240]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	0c5b      	lsrs	r3, r3, #17
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	4a3b      	ldr	r2, [pc, #236]	@ (8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003054:	4a38      	ldr	r2, [pc, #224]	@ (8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fbb2 f2f3 	udiv	r2, r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4a34      	ldr	r2, [pc, #208]	@ (800313c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003070:	4b2e      	ldr	r3, [pc, #184]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800307c:	d102      	bne.n	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	61bb      	str	r3, [r7, #24]
      break;
 8003082:	e04a      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
      break;
 8003092:	e042      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a4:	d108      	bne.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80030b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e01f      	b.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c2:	d109      	bne.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030d0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e00f      	b.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e2:	d11c      	bne.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030f0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030f4:	61bb      	str	r3, [r7, #24]
      break;
 80030f6:	e012      	b.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030f8:	e011      	b.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030fa:	f7ff fe85 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0b9b      	lsrs	r3, r3, #14
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	61bb      	str	r3, [r7, #24]
      break;
 8003114:	e004      	b.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800311e:	bf00      	nop
    }
  }
  return (frequency);
 8003120:	69bb      	ldr	r3, [r7, #24]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	0800624c 	.word	0x0800624c
 8003134:	0800625c 	.word	0x0800625c
 8003138:	007a1200 	.word	0x007a1200
 800313c:	003d0900 	.word	0x003d0900
 8003140:	aaaaaaab 	.word	0xaaaaaaab

08003144 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07a      	b.n	8003250 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7c5b      	ldrb	r3, [r3, #17]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fbfc 	bl	8001968 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f870 	bl	800325c <HAL_RTC_WaitForSynchro>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e061      	b.n	8003250 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f892 	bl	80032b6 <RTC_EnterInitMode>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2204      	movs	r2, #4
 800319c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e056      	b.n	8003250 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0207 	bic.w	r2, r2, #7
 80031b0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80031ba:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <HAL_RTC_Init+0x114>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a26      	ldr	r2, [pc, #152]	@ (8003258 <HAL_RTC_Init+0x114>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80031c6:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RTC_Init+0x114>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4921      	ldr	r1, [pc, #132]	@ (8003258 <HAL_RTC_Init+0x114>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d003      	beq.n	80031ea <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e00e      	b.n	8003208 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f7ff fef4 	bl	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80031f0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2204      	movs	r2, #4
 80031fc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e026      	b.n	8003250 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b01      	subs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	0c1a      	lsrs	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f002 020f 	and.w	r2, r2, #15
 8003214:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	b292      	uxth	r2, r2
 800321e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f870 	bl	8003306 <RTC_ExitInitMode>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00c      	b.n	8003250 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800324e:	2300      	movs	r3, #0
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40006c00 	.word	0x40006c00

0800325c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e01d      	b.n	80032ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003282:	f7fe fe65 	bl	8001f50 <HAL_GetTick>
 8003286:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003288:	e009      	b.n	800329e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800328a:	f7fe fe61 	bl	8001f50 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003298:	d901      	bls.n	800329e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e007      	b.n	80032ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80032c2:	f7fe fe45 	bl	8001f50 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032c8:	e009      	b.n	80032de <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032ca:	f7fe fe41 	bl	8001f50 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d8:	d901      	bls.n	80032de <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0210 	orr.w	r2, r2, #16
 80032fa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0210 	bic.w	r2, r2, #16
 8003320:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003322:	f7fe fe15 	bl	8001f50 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003328:	e009      	b.n	800333e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800332a:	f7fe fe11 	bl	8001f50 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003338:	d901      	bls.n	800333e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e007      	b.n	800334e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ee      	beq.n	800332a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d027      	beq.n	80033bc <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f824 	bl	80033d6 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0204 	mvn.w	r2, #4
 8003396:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2204      	movs	r2, #4
 800339c:	745a      	strb	r2, [r3, #17]
 800339e:	e005      	b.n	80033ac <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f80f 	bl	80033c4 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	605a      	str	r2, [r3, #4]
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e041      	b.n	800347e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe fad6 	bl	80019c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f000 f992 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x24>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x3e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x58>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e05e      	b.n	80035b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0x82>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003508:	e013      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x92>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	e00b      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003528:	e003      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fafe 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <HAL_TIM_PWM_Start+0x138>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d107      	bne.n	800355a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <HAL_TIM_PWM_Start+0x138>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_TIM_PWM_Start+0xfa>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d009      	beq.n	8003582 <HAL_TIM_PWM_Start+0xfa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <HAL_TIM_PWM_Start+0x13c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_TIM_PWM_Start+0xfa>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a12      	ldr	r2, [pc, #72]	@ (80035c8 <HAL_TIM_PWM_Start+0x140>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d010      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	e007      	b.n	80035b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800

080035cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0ae      	b.n	8003748 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	f200 809f 	bhi.w	8003738 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003635 	.word	0x08003635
 8003604:	08003739 	.word	0x08003739
 8003608:	08003739 	.word	0x08003739
 800360c:	08003739 	.word	0x08003739
 8003610:	08003675 	.word	0x08003675
 8003614:	08003739 	.word	0x08003739
 8003618:	08003739 	.word	0x08003739
 800361c:	08003739 	.word	0x08003739
 8003620:	080036b7 	.word	0x080036b7
 8003624:	08003739 	.word	0x08003739
 8003628:	08003739 	.word	0x08003739
 800362c:	08003739 	.word	0x08003739
 8003630:	080036f7 	.word	0x080036f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8f6 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6999      	ldr	r1, [r3, #24]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	619a      	str	r2, [r3, #24]
      break;
 8003672:	e064      	b.n	800373e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f93c 	bl	80038f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]
      break;
 80036b4:	e043      	b.n	800373e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f985 	bl	80039cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0208 	orr.w	r2, r2, #8
 80036d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0204 	bic.w	r2, r2, #4
 80036e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69d9      	ldr	r1, [r3, #28]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	61da      	str	r2, [r3, #28]
      break;
 80036f4:	e023      	b.n	800373e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f9cf 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	61da      	str	r2, [r3, #28]
      break;
 8003736:	e002      	b.n	800373e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
      break;
 800373c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a2f      	ldr	r2, [pc, #188]	@ (8003820 <TIM_Base_SetConfig+0xd0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a2c      	ldr	r2, [pc, #176]	@ (8003824 <TIM_Base_SetConfig+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <TIM_Base_SetConfig+0xd8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d108      	bne.n	8003792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a22      	ldr	r2, [pc, #136]	@ (8003820 <TIM_Base_SetConfig+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003824 <TIM_Base_SetConfig+0xd4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <TIM_Base_SetConfig+0xd8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <TIM_Base_SetConfig+0xd0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f023 0201 	bic.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]
  }
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1c      	ldr	r2, [pc, #112]	@ (80038f4 <TIM_OC1_SetConfig+0xc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10c      	bne.n	80038a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0308 	bic.w	r3, r3, #8
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a13      	ldr	r2, [pc, #76]	@ (80038f4 <TIM_OC1_SetConfig+0xc8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <TIM_OC2_SetConfig+0xd0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10d      	bne.n	8003974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a14      	ldr	r2, [pc, #80]	@ (80039c8 <TIM_OC2_SetConfig+0xd0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d113      	bne.n	80039a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00

080039cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0f      	ldr	r2, [pc, #60]	@ (8003b38 <TIM_OC4_SetConfig+0x98>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00

08003b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2201      	movs	r2, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e046      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800

08003c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e03d      	b.n	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e042      	b.n	8003d7a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fd ff45 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2224      	movs	r2, #36	@ 0x24
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fdb8 	bl	800489c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	@ 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d175      	bne.n	8003e8e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06e      	b.n	8003e90 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2221      	movs	r2, #33	@ 0x21
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe f8c6 	bl	8001f50 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d108      	bne.n	8003dee <HAL_UART_Transmit+0x6c>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e003      	b.n	8003df6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df6:	e02e      	b.n	8003e56 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	@ 0x80
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fb1d 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e03a      	b.n	8003e90 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3302      	adds	r3, #2
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e007      	b.n	8003e48 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1cb      	bne.n	8003df8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2140      	movs	r1, #64	@ 0x40
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fae9 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e006      	b.n	8003e90 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d112      	bne.n	8003ed8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_UART_Receive_IT+0x26>
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00b      	b.n	8003eda <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fb10 	bl	80044f4 <UART_Start_Receive_IT>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	e000      	b.n	8003eda <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_UART_IRQHandler+0x66>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fbec 	bl	8004720 <UART_Receive_IT>
      return;
 8003f48:	e25b      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80de 	beq.w	8004110 <HAL_UART_IRQHandler+0x22c>
 8003f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80d1 	beq.w	8004110 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_UART_IRQHandler+0xae>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f043 0202 	orr.w	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xf6>
 8003fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d011      	beq.n	800400a <HAL_UART_IRQHandler+0x126>
 8003fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f043 0208 	orr.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 81f2 	beq.w	80043f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_UART_IRQHandler+0x14e>
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fb77 	bl	8004720 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_UART_IRQHandler+0x17a>
 8004056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04f      	beq.n	80040fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa81 	bl	8004566 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d041      	beq.n	80040f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800408c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800409e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1d9      	bne.n	8004072 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d013      	beq.n	80040ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	4a7e      	ldr	r2, [pc, #504]	@ (80042c4 <HAL_UART_IRQHandler+0x3e0>)
 80040cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe f8b2 	bl	800223c <HAL_DMA_Abort_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040e8:	4610      	mov	r0, r2
 80040ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e00e      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f993 	bl	800441a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e00a      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f98f 	bl	800441a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e006      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f98b 	bl	800441a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800410a:	e175      	b.n	80043f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	bf00      	nop
    return;
 800410e:	e173      	b.n	80043f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 814f 	bne.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8148 	beq.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8141 	beq.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80b6 	beq.w	80042c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8145 	beq.w	80043fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417a:	429a      	cmp	r2, r3
 800417c:	f080 813e 	bcs.w	80043fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004186:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b20      	cmp	r3, #32
 8004190:	f000 8088 	beq.w	80042a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1d9      	bne.n	8004194 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004204:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004208:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800420c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e1      	bne.n	80041e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800422c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004240:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004242:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004246:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800424e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004286:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004288:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800428c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd ff91 	bl	80021c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8b6 	bl	800442c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042c0:	e09c      	b.n	80043fc <HAL_UART_IRQHandler+0x518>
 80042c2:	bf00      	nop
 80042c4:	0800462b 	.word	0x0800462b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 808e 	beq.w	8004400 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8089 	beq.w	8004400 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004312:	647a      	str	r2, [r7, #68]	@ 0x44
 8004314:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e3      	bne.n	80042ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	623b      	str	r3, [r7, #32]
   return(result);
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800434a:	633a      	str	r2, [r7, #48]	@ 0x30
 800434c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	60fb      	str	r3, [r7, #12]
   return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004390:	61fa      	str	r2, [r7, #28]
 8004392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	617b      	str	r3, [r7, #20]
   return(result);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f83b 	bl	800442c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b6:	e023      	b.n	8004400 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <HAL_UART_IRQHandler+0x4f4>
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f93e 	bl	8004652 <UART_Transmit_IT>
    return;
 80043d6:	e014      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <HAL_UART_IRQHandler+0x51e>
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f97d 	bl	80046f0 <UART_EndTransmit_IT>
    return;
 80043f6:	e004      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
    return;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
      return;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
      return;
 8004400:	bf00      	nop
  }
}
 8004402:	37e8      	adds	r7, #232	@ 0xe8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e03b      	b.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d037      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fd fd78 	bl	8001f50 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e03a      	b.n	80044ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b80      	cmp	r3, #128	@ 0x80
 8004488:	d020      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d01d      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b08      	cmp	r3, #8
 800449c:	d116      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f856 	bl	8004566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2208      	movs	r2, #8
 80044be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e00f      	b.n	80044ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d0b4      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2222      	movs	r2, #34	@ 0x22
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004538:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0220 	orr.w	r2, r2, #32
 8004558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b095      	sub	sp, #84	@ 0x54
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e5      	bne.n	80045a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d119      	bne.n	8004612 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f023 0310 	bic.w	r3, r3, #16
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fe:	61ba      	str	r2, [r7, #24]
 8004600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e5      	bne.n	80045de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004620:	bf00      	nop
 8004622:	3754      	adds	r7, #84	@ 0x54
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fee8 	bl	800441a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b21      	cmp	r3, #33	@ 0x21
 8004664:	d13e      	bne.n	80046e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466e:	d114      	bne.n	800469a <UART_Transmit_IT+0x48>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d110      	bne.n	800469a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	621a      	str	r2, [r3, #32]
 8004698:	e008      	b.n	80046ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6211      	str	r1, [r2, #32]
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10f      	bne.n	80046e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004706:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe79 	bl	8004408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	@ 0x30
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b22      	cmp	r3, #34	@ 0x22
 8004732:	f040 80ae 	bne.w	8004892 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	d117      	bne.n	8004770 <UART_Receive_IT+0x50>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d113      	bne.n	8004770 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	b29a      	uxth	r2, r3
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	629a      	str	r2, [r3, #40]	@ 0x28
 800476e:	e026      	b.n	80047be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	d007      	beq.n	8004794 <UART_Receive_IT+0x74>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <UART_Receive_IT+0x82>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e008      	b.n	80047b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4619      	mov	r1, r3
 80047cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d15d      	bne.n	800488e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0220 	bic.w	r2, r2, #32
 80047e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d135      	bne.n	8004884 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	613b      	str	r3, [r7, #16]
   return(result);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	623a      	str	r2, [r7, #32]
 8004840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	61bb      	str	r3, [r7, #24]
   return(result);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b10      	cmp	r3, #16
 800485e:	d10a      	bne.n	8004876 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fdd5 	bl	800442c <HAL_UARTEx_RxEventCallback>
 8004882:	e002      	b.n	800488a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fe41 	bl	800150c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e002      	b.n	8004894 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3730      	adds	r7, #48	@ 0x30
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048d6:	f023 030c 	bic.w	r3, r3, #12
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2c      	ldr	r2, [pc, #176]	@ (80049b0 <UART_SetConfig+0x114>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d103      	bne.n	800490c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7fe fa80 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	e002      	b.n	8004912 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe fa68 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8004910:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <UART_SetConfig+0x118>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	0119      	lsls	r1, r3, #4
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009a      	lsls	r2, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	fbb2 f2f3 	udiv	r2, r2, r3
 8004948:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <UART_SetConfig+0x118>)
 800494a:	fba3 0302 	umull	r0, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2064      	movs	r0, #100	@ 0x64
 8004952:	fb00 f303 	mul.w	r3, r0, r3
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	3332      	adds	r3, #50	@ 0x32
 800495c:	4a15      	ldr	r2, [pc, #84]	@ (80049b4 <UART_SetConfig+0x118>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004968:	4419      	add	r1, r3
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <UART_SetConfig+0x118>)
 8004982:	fba3 0302 	umull	r0, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2064      	movs	r0, #100	@ 0x64
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	@ 0x32
 8004994:	4a07      	ldr	r2, [pc, #28]	@ (80049b4 <UART_SetConfig+0x118>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	440a      	add	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40013800 	.word	0x40013800
 80049b4:	51eb851f 	.word	0x51eb851f

080049b8 <atoi>:
 80049b8:	220a      	movs	r2, #10
 80049ba:	2100      	movs	r1, #0
 80049bc:	f000 b87a 	b.w	8004ab4 <strtol>

080049c0 <_strtol_l.isra.0>:
 80049c0:	2b24      	cmp	r3, #36	@ 0x24
 80049c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c6:	4686      	mov	lr, r0
 80049c8:	4690      	mov	r8, r2
 80049ca:	d801      	bhi.n	80049d0 <_strtol_l.isra.0+0x10>
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <_strtol_l.isra.0+0x1e>
 80049d0:	f000 fa6c 	bl	8004eac <__errno>
 80049d4:	2316      	movs	r3, #22
 80049d6:	6003      	str	r3, [r0, #0]
 80049d8:	2000      	movs	r0, #0
 80049da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049de:	460d      	mov	r5, r1
 80049e0:	4833      	ldr	r0, [pc, #204]	@ (8004ab0 <_strtol_l.isra.0+0xf0>)
 80049e2:	462a      	mov	r2, r5
 80049e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049e8:	5d06      	ldrb	r6, [r0, r4]
 80049ea:	f016 0608 	ands.w	r6, r6, #8
 80049ee:	d1f8      	bne.n	80049e2 <_strtol_l.isra.0+0x22>
 80049f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80049f2:	d110      	bne.n	8004a16 <_strtol_l.isra.0+0x56>
 80049f4:	2601      	movs	r6, #1
 80049f6:	782c      	ldrb	r4, [r5, #0]
 80049f8:	1c95      	adds	r5, r2, #2
 80049fa:	f033 0210 	bics.w	r2, r3, #16
 80049fe:	d115      	bne.n	8004a2c <_strtol_l.isra.0+0x6c>
 8004a00:	2c30      	cmp	r4, #48	@ 0x30
 8004a02:	d10d      	bne.n	8004a20 <_strtol_l.isra.0+0x60>
 8004a04:	782a      	ldrb	r2, [r5, #0]
 8004a06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004a0a:	2a58      	cmp	r2, #88	@ 0x58
 8004a0c:	d108      	bne.n	8004a20 <_strtol_l.isra.0+0x60>
 8004a0e:	786c      	ldrb	r4, [r5, #1]
 8004a10:	3502      	adds	r5, #2
 8004a12:	2310      	movs	r3, #16
 8004a14:	e00a      	b.n	8004a2c <_strtol_l.isra.0+0x6c>
 8004a16:	2c2b      	cmp	r4, #43	@ 0x2b
 8004a18:	bf04      	itt	eq
 8004a1a:	782c      	ldrbeq	r4, [r5, #0]
 8004a1c:	1c95      	addeq	r5, r2, #2
 8004a1e:	e7ec      	b.n	80049fa <_strtol_l.isra.0+0x3a>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f6      	bne.n	8004a12 <_strtol_l.isra.0+0x52>
 8004a24:	2c30      	cmp	r4, #48	@ 0x30
 8004a26:	bf14      	ite	ne
 8004a28:	230a      	movne	r3, #10
 8004a2a:	2308      	moveq	r3, #8
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004a32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a36:	fbbc f9f3 	udiv	r9, ip, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004a40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004a44:	2f09      	cmp	r7, #9
 8004a46:	d80f      	bhi.n	8004a68 <_strtol_l.isra.0+0xa8>
 8004a48:	463c      	mov	r4, r7
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	dd1b      	ble.n	8004a86 <_strtol_l.isra.0+0xc6>
 8004a4e:	1c57      	adds	r7, r2, #1
 8004a50:	d007      	beq.n	8004a62 <_strtol_l.isra.0+0xa2>
 8004a52:	4581      	cmp	r9, r0
 8004a54:	d314      	bcc.n	8004a80 <_strtol_l.isra.0+0xc0>
 8004a56:	d101      	bne.n	8004a5c <_strtol_l.isra.0+0x9c>
 8004a58:	45a2      	cmp	sl, r4
 8004a5a:	db11      	blt.n	8004a80 <_strtol_l.isra.0+0xc0>
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	fb00 4003 	mla	r0, r0, r3, r4
 8004a62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a66:	e7eb      	b.n	8004a40 <_strtol_l.isra.0+0x80>
 8004a68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004a6c:	2f19      	cmp	r7, #25
 8004a6e:	d801      	bhi.n	8004a74 <_strtol_l.isra.0+0xb4>
 8004a70:	3c37      	subs	r4, #55	@ 0x37
 8004a72:	e7ea      	b.n	8004a4a <_strtol_l.isra.0+0x8a>
 8004a74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004a78:	2f19      	cmp	r7, #25
 8004a7a:	d804      	bhi.n	8004a86 <_strtol_l.isra.0+0xc6>
 8004a7c:	3c57      	subs	r4, #87	@ 0x57
 8004a7e:	e7e4      	b.n	8004a4a <_strtol_l.isra.0+0x8a>
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	e7ed      	b.n	8004a62 <_strtol_l.isra.0+0xa2>
 8004a86:	1c53      	adds	r3, r2, #1
 8004a88:	d108      	bne.n	8004a9c <_strtol_l.isra.0+0xdc>
 8004a8a:	2322      	movs	r3, #34	@ 0x22
 8004a8c:	4660      	mov	r0, ip
 8004a8e:	f8ce 3000 	str.w	r3, [lr]
 8004a92:	f1b8 0f00 	cmp.w	r8, #0
 8004a96:	d0a0      	beq.n	80049da <_strtol_l.isra.0+0x1a>
 8004a98:	1e69      	subs	r1, r5, #1
 8004a9a:	e006      	b.n	8004aaa <_strtol_l.isra.0+0xea>
 8004a9c:	b106      	cbz	r6, 8004aa0 <_strtol_l.isra.0+0xe0>
 8004a9e:	4240      	negs	r0, r0
 8004aa0:	f1b8 0f00 	cmp.w	r8, #0
 8004aa4:	d099      	beq.n	80049da <_strtol_l.isra.0+0x1a>
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d1f6      	bne.n	8004a98 <_strtol_l.isra.0+0xd8>
 8004aaa:	f8c8 1000 	str.w	r1, [r8]
 8004aae:	e794      	b.n	80049da <_strtol_l.isra.0+0x1a>
 8004ab0:	0800625f 	.word	0x0800625f

08004ab4 <strtol>:
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	4601      	mov	r1, r0
 8004aba:	4802      	ldr	r0, [pc, #8]	@ (8004ac4 <strtol+0x10>)
 8004abc:	6800      	ldr	r0, [r0, #0]
 8004abe:	f7ff bf7f 	b.w	80049c0 <_strtol_l.isra.0>
 8004ac2:	bf00      	nop
 8004ac4:	20000114 	.word	0x20000114

08004ac8 <std>:
 8004ac8:	2300      	movs	r3, #0
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	e9c0 3300 	strd	r3, r3, [r0]
 8004ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad6:	6083      	str	r3, [r0, #8]
 8004ad8:	8181      	strh	r1, [r0, #12]
 8004ada:	6643      	str	r3, [r0, #100]	@ 0x64
 8004adc:	81c2      	strh	r2, [r0, #14]
 8004ade:	6183      	str	r3, [r0, #24]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	305c      	adds	r0, #92	@ 0x5c
 8004ae6:	f000 f92a 	bl	8004d3e <memset>
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x58>)
 8004aec:	6224      	str	r4, [r4, #32]
 8004aee:	6263      	str	r3, [r4, #36]	@ 0x24
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <std+0x5c>)
 8004af2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <std+0x60>)
 8004af6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <std+0x64>)
 8004afa:	6323      	str	r3, [r4, #48]	@ 0x30
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <std+0x68>)
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d006      	beq.n	8004b10 <std+0x48>
 8004b02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b06:	4294      	cmp	r4, r2
 8004b08:	d002      	beq.n	8004b10 <std+0x48>
 8004b0a:	33d0      	adds	r3, #208	@ 0xd0
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d105      	bne.n	8004b1c <std+0x54>
 8004b10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	f000 b9f2 	b.w	8004f00 <__retarget_lock_init_recursive>
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	08004cb9 	.word	0x08004cb9
 8004b24:	08004cdb 	.word	0x08004cdb
 8004b28:	08004d13 	.word	0x08004d13
 8004b2c:	08004d37 	.word	0x08004d37
 8004b30:	200003d8 	.word	0x200003d8

08004b34 <stdio_exit_handler>:
 8004b34:	4a02      	ldr	r2, [pc, #8]	@ (8004b40 <stdio_exit_handler+0xc>)
 8004b36:	4903      	ldr	r1, [pc, #12]	@ (8004b44 <stdio_exit_handler+0x10>)
 8004b38:	4803      	ldr	r0, [pc, #12]	@ (8004b48 <stdio_exit_handler+0x14>)
 8004b3a:	f000 b869 	b.w	8004c10 <_fwalk_sglue>
 8004b3e:	bf00      	nop
 8004b40:	20000108 	.word	0x20000108
 8004b44:	08005821 	.word	0x08005821
 8004b48:	20000118 	.word	0x20000118

08004b4c <cleanup_stdio>:
 8004b4c:	6841      	ldr	r1, [r0, #4]
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <cleanup_stdio+0x34>)
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4299      	cmp	r1, r3
 8004b54:	4604      	mov	r4, r0
 8004b56:	d001      	beq.n	8004b5c <cleanup_stdio+0x10>
 8004b58:	f000 fe62 	bl	8005820 <_fflush_r>
 8004b5c:	68a1      	ldr	r1, [r4, #8]
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <cleanup_stdio+0x38>)
 8004b60:	4299      	cmp	r1, r3
 8004b62:	d002      	beq.n	8004b6a <cleanup_stdio+0x1e>
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 fe5b 	bl	8005820 <_fflush_r>
 8004b6a:	68e1      	ldr	r1, [r4, #12]
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <cleanup_stdio+0x3c>)
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d004      	beq.n	8004b7c <cleanup_stdio+0x30>
 8004b72:	4620      	mov	r0, r4
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b78:	f000 be52 	b.w	8005820 <_fflush_r>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	200003d8 	.word	0x200003d8
 8004b84:	20000440 	.word	0x20000440
 8004b88:	200004a8 	.word	0x200004a8

08004b8c <global_stdio_init.part.0>:
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <global_stdio_init.part.0+0x30>)
 8004b90:	4c0b      	ldr	r4, [pc, #44]	@ (8004bc0 <global_stdio_init.part.0+0x34>)
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <global_stdio_init.part.0+0x38>)
 8004b94:	4620      	mov	r0, r4
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	2104      	movs	r1, #4
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f7ff ff94 	bl	8004ac8 <std>
 8004ba0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2109      	movs	r1, #9
 8004ba8:	f7ff ff8e 	bl	8004ac8 <std>
 8004bac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb6:	2112      	movs	r1, #18
 8004bb8:	f7ff bf86 	b.w	8004ac8 <std>
 8004bbc:	20000510 	.word	0x20000510
 8004bc0:	200003d8 	.word	0x200003d8
 8004bc4:	08004b35 	.word	0x08004b35

08004bc8 <__sfp_lock_acquire>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__sfp_lock_acquire+0x8>)
 8004bca:	f000 b99a 	b.w	8004f02 <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	20000519 	.word	0x20000519

08004bd4 <__sfp_lock_release>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__sfp_lock_release+0x8>)
 8004bd6:	f000 b995 	b.w	8004f04 <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20000519 	.word	0x20000519

08004be0 <__sinit>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	f7ff fff0 	bl	8004bc8 <__sfp_lock_acquire>
 8004be8:	6a23      	ldr	r3, [r4, #32]
 8004bea:	b11b      	cbz	r3, 8004bf4 <__sinit+0x14>
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	f7ff bff0 	b.w	8004bd4 <__sfp_lock_release>
 8004bf4:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <__sinit+0x28>)
 8004bf6:	6223      	str	r3, [r4, #32]
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <__sinit+0x2c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f5      	bne.n	8004bec <__sinit+0xc>
 8004c00:	f7ff ffc4 	bl	8004b8c <global_stdio_init.part.0>
 8004c04:	e7f2      	b.n	8004bec <__sinit+0xc>
 8004c06:	bf00      	nop
 8004c08:	08004b4d 	.word	0x08004b4d
 8004c0c:	20000510 	.word	0x20000510

08004c10 <_fwalk_sglue>:
 8004c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c14:	4607      	mov	r7, r0
 8004c16:	4688      	mov	r8, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c20:	f1b9 0901 	subs.w	r9, r9, #1
 8004c24:	d505      	bpl.n	8004c32 <_fwalk_sglue+0x22>
 8004c26:	6824      	ldr	r4, [r4, #0]
 8004c28:	2c00      	cmp	r4, #0
 8004c2a:	d1f7      	bne.n	8004c1c <_fwalk_sglue+0xc>
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	89ab      	ldrh	r3, [r5, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d907      	bls.n	8004c48 <_fwalk_sglue+0x38>
 8004c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	d003      	beq.n	8004c48 <_fwalk_sglue+0x38>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	4306      	orrs	r6, r0
 8004c48:	3568      	adds	r5, #104	@ 0x68
 8004c4a:	e7e9      	b.n	8004c20 <_fwalk_sglue+0x10>

08004c4c <sniprintf>:
 8004c4c:	b40c      	push	{r2, r3}
 8004c4e:	b530      	push	{r4, r5, lr}
 8004c50:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <sniprintf+0x68>)
 8004c52:	1e0c      	subs	r4, r1, #0
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	b09d      	sub	sp, #116	@ 0x74
 8004c58:	da08      	bge.n	8004c6c <sniprintf+0x20>
 8004c5a:	238b      	movs	r3, #139	@ 0x8b
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	b01d      	add	sp, #116	@ 0x74
 8004c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c68:	b002      	add	sp, #8
 8004c6a:	4770      	bx	lr
 8004c6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c7a:	bf0c      	ite	eq
 8004c7c:	4623      	moveq	r3, r4
 8004c7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	9307      	str	r3, [sp, #28]
 8004c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c8a:	9002      	str	r0, [sp, #8]
 8004c8c:	9006      	str	r0, [sp, #24]
 8004c8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c92:	4628      	mov	r0, r5
 8004c94:	ab21      	add	r3, sp, #132	@ 0x84
 8004c96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c98:	a902      	add	r1, sp, #8
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f000 fab4 	bl	8005208 <_svfiprintf_r>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	bfbc      	itt	lt
 8004ca4:	238b      	movlt	r3, #139	@ 0x8b
 8004ca6:	602b      	strlt	r3, [r5, #0]
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d0da      	beq.n	8004c62 <sniprintf+0x16>
 8004cac:	2200      	movs	r2, #0
 8004cae:	9b02      	ldr	r3, [sp, #8]
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e7d6      	b.n	8004c62 <sniprintf+0x16>
 8004cb4:	20000114 	.word	0x20000114

08004cb8 <__sread>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc0:	f000 f8d0 	bl	8004e64 <_read_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	bfab      	itete	ge
 8004cc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ccc:	181b      	addge	r3, r3, r0
 8004cce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cd2:	bfac      	ite	ge
 8004cd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cd6:	81a3      	strhlt	r3, [r4, #12]
 8004cd8:	bd10      	pop	{r4, pc}

08004cda <__swrite>:
 8004cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	461f      	mov	r7, r3
 8004ce0:	898b      	ldrh	r3, [r1, #12]
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	05db      	lsls	r3, r3, #23
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	4616      	mov	r6, r2
 8004cea:	d505      	bpl.n	8004cf8 <__swrite+0x1e>
 8004cec:	2302      	movs	r3, #2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf4:	f000 f8a4 	bl	8004e40 <_lseek_r>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	4628      	mov	r0, r5
 8004d04:	463b      	mov	r3, r7
 8004d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	f000 b8bb 	b.w	8004e88 <_write_r>

08004d12 <__sseek>:
 8004d12:	b510      	push	{r4, lr}
 8004d14:	460c      	mov	r4, r1
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 f891 	bl	8004e40 <_lseek_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	bf15      	itete	ne
 8004d24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d2e:	81a3      	strheq	r3, [r4, #12]
 8004d30:	bf18      	it	ne
 8004d32:	81a3      	strhne	r3, [r4, #12]
 8004d34:	bd10      	pop	{r4, pc}

08004d36 <__sclose>:
 8004d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3a:	f000 b871 	b.w	8004e20 <_close_r>

08004d3e <memset>:
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4402      	add	r2, r0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d100      	bne.n	8004d48 <memset+0xa>
 8004d46:	4770      	bx	lr
 8004d48:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4c:	e7f9      	b.n	8004d42 <memset+0x4>

08004d4e <strchr>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b2c9      	uxtb	r1, r1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d58:	b112      	cbz	r2, 8004d60 <strchr+0x12>
 8004d5a:	428a      	cmp	r2, r1
 8004d5c:	d1f9      	bne.n	8004d52 <strchr+0x4>
 8004d5e:	4770      	bx	lr
 8004d60:	2900      	cmp	r1, #0
 8004d62:	bf18      	it	ne
 8004d64:	2000      	movne	r0, #0
 8004d66:	4770      	bx	lr

08004d68 <strtok>:
 8004d68:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <strtok+0x5c>)
 8004d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6e:	681f      	ldr	r7, [r3, #0]
 8004d70:	4605      	mov	r5, r0
 8004d72:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d74:	460e      	mov	r6, r1
 8004d76:	b9ec      	cbnz	r4, 8004db4 <strtok+0x4c>
 8004d78:	2050      	movs	r0, #80	@ 0x50
 8004d7a:	f000 f933 	bl	8004fe4 <malloc>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d82:	b920      	cbnz	r0, 8004d8e <strtok+0x26>
 8004d84:	215b      	movs	r1, #91	@ 0x5b
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <strtok+0x60>)
 8004d88:	4810      	ldr	r0, [pc, #64]	@ (8004dcc <strtok+0x64>)
 8004d8a:	f000 f8c5 	bl	8004f18 <__assert_func>
 8004d8e:	e9c0 4400 	strd	r4, r4, [r0]
 8004d92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004d96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004d9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004da2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004da6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004daa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004dae:	6184      	str	r4, [r0, #24]
 8004db0:	7704      	strb	r4, [r0, #28]
 8004db2:	6244      	str	r4, [r0, #36]	@ 0x24
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	f000 b806 	b.w	8004dd0 <__strtok_r>
 8004dc4:	20000114 	.word	0x20000114
 8004dc8:	0800635f 	.word	0x0800635f
 8004dcc:	08006376 	.word	0x08006376

08004dd0 <__strtok_r>:
 8004dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	b908      	cbnz	r0, 8004dda <__strtok_r+0xa>
 8004dd6:	6814      	ldr	r4, [r2, #0]
 8004dd8:	b144      	cbz	r4, 8004dec <__strtok_r+0x1c>
 8004dda:	460f      	mov	r7, r1
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004de2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004de6:	b91e      	cbnz	r6, 8004df0 <__strtok_r+0x20>
 8004de8:	b965      	cbnz	r5, 8004e04 <__strtok_r+0x34>
 8004dea:	6015      	str	r5, [r2, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e005      	b.n	8004dfc <__strtok_r+0x2c>
 8004df0:	42b5      	cmp	r5, r6
 8004df2:	d1f6      	bne.n	8004de2 <__strtok_r+0x12>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <__strtok_r+0xa>
 8004df8:	6014      	str	r4, [r2, #0]
 8004dfa:	7003      	strb	r3, [r0, #0]
 8004dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfe:	461c      	mov	r4, r3
 8004e00:	e00c      	b.n	8004e1c <__strtok_r+0x4c>
 8004e02:	b91d      	cbnz	r5, 8004e0c <__strtok_r+0x3c>
 8004e04:	460e      	mov	r6, r1
 8004e06:	4627      	mov	r7, r4
 8004e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e0c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004e10:	42ab      	cmp	r3, r5
 8004e12:	d1f6      	bne.n	8004e02 <__strtok_r+0x32>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f2      	beq.n	8004dfe <__strtok_r+0x2e>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	703b      	strb	r3, [r7, #0]
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	e7ed      	b.n	8004dfc <__strtok_r+0x2c>

08004e20 <_close_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	2300      	movs	r3, #0
 8004e24:	4d05      	ldr	r5, [pc, #20]	@ (8004e3c <_close_r+0x1c>)
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	f7fc ffa5 	bl	8001d7a <_close>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_close_r+0x1a>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_close_r+0x1a>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	20000514 	.word	0x20000514

08004e40 <_lseek_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4d05      	ldr	r5, [pc, #20]	@ (8004e60 <_lseek_r+0x20>)
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fc ffb7 	bl	8001dc2 <_lseek>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_lseek_r+0x1e>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_lseek_r+0x1e>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000514 	.word	0x20000514

08004e64 <_read_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4d05      	ldr	r5, [pc, #20]	@ (8004e84 <_read_r+0x20>)
 8004e70:	602a      	str	r2, [r5, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f7fc ff48 	bl	8001d08 <_read>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_read_r+0x1e>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_read_r+0x1e>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000514 	.word	0x20000514

08004e88 <_write_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	2200      	movs	r2, #0
 8004e92:	4d05      	ldr	r5, [pc, #20]	@ (8004ea8 <_write_r+0x20>)
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fc ff53 	bl	8001d42 <_write>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_write_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_write_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20000514 	.word	0x20000514

08004eac <__errno>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	@ (8004eb4 <__errno+0x8>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000114 	.word	0x20000114

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	2600      	movs	r6, #0
 8004ebc:	4d0c      	ldr	r5, [pc, #48]	@ (8004ef0 <__libc_init_array+0x38>)
 8004ebe:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef4 <__libc_init_array+0x3c>)
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	f001 f802 	bl	8005ed0 <_init>
 8004ecc:	2600      	movs	r6, #0
 8004ece:	4d0a      	ldr	r5, [pc, #40]	@ (8004ef8 <__libc_init_array+0x40>)
 8004ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8004efc <__libc_init_array+0x44>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	08006448 	.word	0x08006448
 8004ef4:	08006448 	.word	0x08006448
 8004ef8:	08006448 	.word	0x08006448
 8004efc:	0800644c 	.word	0x0800644c

08004f00 <__retarget_lock_init_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_acquire_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <__retarget_lock_release_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <strcpy>:
 8004f06:	4603      	mov	r3, r0
 8004f08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f0c:	f803 2b01 	strb.w	r2, [r3], #1
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d1f9      	bne.n	8004f08 <strcpy+0x2>
 8004f14:	4770      	bx	lr
	...

08004f18 <__assert_func>:
 8004f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <__assert_func+0x2c>)
 8004f20:	4605      	mov	r5, r0
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68d8      	ldr	r0, [r3, #12]
 8004f26:	b14c      	cbz	r4, 8004f3c <__assert_func+0x24>
 8004f28:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <__assert_func+0x30>)
 8004f2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f2e:	9100      	str	r1, [sp, #0]
 8004f30:	462b      	mov	r3, r5
 8004f32:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <__assert_func+0x34>)
 8004f34:	f000 fc9c 	bl	8005870 <fiprintf>
 8004f38:	f000 fcf2 	bl	8005920 <abort>
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <__assert_func+0x38>)
 8004f3e:	461c      	mov	r4, r3
 8004f40:	e7f3      	b.n	8004f2a <__assert_func+0x12>
 8004f42:	bf00      	nop
 8004f44:	20000114 	.word	0x20000114
 8004f48:	080063d0 	.word	0x080063d0
 8004f4c:	080063dd 	.word	0x080063dd
 8004f50:	0800640b 	.word	0x0800640b

08004f54 <_free_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4605      	mov	r5, r0
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d040      	beq.n	8004fde <_free_r+0x8a>
 8004f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f60:	1f0c      	subs	r4, r1, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfb8      	it	lt
 8004f66:	18e4      	addlt	r4, r4, r3
 8004f68:	f000 f8e6 	bl	8005138 <__malloc_lock>
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <_free_r+0x8c>)
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	b933      	cbnz	r3, 8004f80 <_free_r+0x2c>
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	6014      	str	r4, [r2, #0]
 8004f76:	4628      	mov	r0, r5
 8004f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7c:	f000 b8e2 	b.w	8005144 <__malloc_unlock>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d908      	bls.n	8004f96 <_free_r+0x42>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	1821      	adds	r1, r4, r0
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	bf01      	itttt	eq
 8004f8c:	6819      	ldreq	r1, [r3, #0]
 8004f8e:	685b      	ldreq	r3, [r3, #4]
 8004f90:	1809      	addeq	r1, r1, r0
 8004f92:	6021      	streq	r1, [r4, #0]
 8004f94:	e7ed      	b.n	8004f72 <_free_r+0x1e>
 8004f96:	461a      	mov	r2, r3
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b10b      	cbz	r3, 8004fa0 <_free_r+0x4c>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d9fa      	bls.n	8004f96 <_free_r+0x42>
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	1850      	adds	r0, r2, r1
 8004fa4:	42a0      	cmp	r0, r4
 8004fa6:	d10b      	bne.n	8004fc0 <_free_r+0x6c>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	4401      	add	r1, r0
 8004fac:	1850      	adds	r0, r2, r1
 8004fae:	4283      	cmp	r3, r0
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	d1e0      	bne.n	8004f76 <_free_r+0x22>
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4408      	add	r0, r1
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	6053      	str	r3, [r2, #4]
 8004fbe:	e7da      	b.n	8004f76 <_free_r+0x22>
 8004fc0:	d902      	bls.n	8004fc8 <_free_r+0x74>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	e7d6      	b.n	8004f76 <_free_r+0x22>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	1821      	adds	r1, r4, r0
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf01      	itttt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	1809      	addeq	r1, r1, r0
 8004fd6:	6021      	streq	r1, [r4, #0]
 8004fd8:	6063      	str	r3, [r4, #4]
 8004fda:	6054      	str	r4, [r2, #4]
 8004fdc:	e7cb      	b.n	8004f76 <_free_r+0x22>
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000520 	.word	0x20000520

08004fe4 <malloc>:
 8004fe4:	4b02      	ldr	r3, [pc, #8]	@ (8004ff0 <malloc+0xc>)
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	f000 b825 	b.w	8005038 <_malloc_r>
 8004fee:	bf00      	nop
 8004ff0:	20000114 	.word	0x20000114

08004ff4 <sbrk_aligned>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8005034 <sbrk_aligned+0x40>)
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	6831      	ldr	r1, [r6, #0]
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	b911      	cbnz	r1, 8005006 <sbrk_aligned+0x12>
 8005000:	f000 fc62 	bl	80058c8 <_sbrk_r>
 8005004:	6030      	str	r0, [r6, #0]
 8005006:	4621      	mov	r1, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fc5d 	bl	80058c8 <_sbrk_r>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d103      	bne.n	800501a <sbrk_aligned+0x26>
 8005012:	f04f 34ff 	mov.w	r4, #4294967295
 8005016:	4620      	mov	r0, r4
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	1cc4      	adds	r4, r0, #3
 800501c:	f024 0403 	bic.w	r4, r4, #3
 8005020:	42a0      	cmp	r0, r4
 8005022:	d0f8      	beq.n	8005016 <sbrk_aligned+0x22>
 8005024:	1a21      	subs	r1, r4, r0
 8005026:	4628      	mov	r0, r5
 8005028:	f000 fc4e 	bl	80058c8 <_sbrk_r>
 800502c:	3001      	adds	r0, #1
 800502e:	d1f2      	bne.n	8005016 <sbrk_aligned+0x22>
 8005030:	e7ef      	b.n	8005012 <sbrk_aligned+0x1e>
 8005032:	bf00      	nop
 8005034:	2000051c 	.word	0x2000051c

08005038 <_malloc_r>:
 8005038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800503c:	1ccd      	adds	r5, r1, #3
 800503e:	f025 0503 	bic.w	r5, r5, #3
 8005042:	3508      	adds	r5, #8
 8005044:	2d0c      	cmp	r5, #12
 8005046:	bf38      	it	cc
 8005048:	250c      	movcc	r5, #12
 800504a:	2d00      	cmp	r5, #0
 800504c:	4606      	mov	r6, r0
 800504e:	db01      	blt.n	8005054 <_malloc_r+0x1c>
 8005050:	42a9      	cmp	r1, r5
 8005052:	d904      	bls.n	800505e <_malloc_r+0x26>
 8005054:	230c      	movs	r3, #12
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	2000      	movs	r0, #0
 800505a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800505e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005134 <_malloc_r+0xfc>
 8005062:	f000 f869 	bl	8005138 <__malloc_lock>
 8005066:	f8d8 3000 	ldr.w	r3, [r8]
 800506a:	461c      	mov	r4, r3
 800506c:	bb44      	cbnz	r4, 80050c0 <_malloc_r+0x88>
 800506e:	4629      	mov	r1, r5
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff ffbf 	bl	8004ff4 <sbrk_aligned>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	4604      	mov	r4, r0
 800507a:	d158      	bne.n	800512e <_malloc_r+0xf6>
 800507c:	f8d8 4000 	ldr.w	r4, [r8]
 8005080:	4627      	mov	r7, r4
 8005082:	2f00      	cmp	r7, #0
 8005084:	d143      	bne.n	800510e <_malloc_r+0xd6>
 8005086:	2c00      	cmp	r4, #0
 8005088:	d04b      	beq.n	8005122 <_malloc_r+0xea>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	4639      	mov	r1, r7
 800508e:	4630      	mov	r0, r6
 8005090:	eb04 0903 	add.w	r9, r4, r3
 8005094:	f000 fc18 	bl	80058c8 <_sbrk_r>
 8005098:	4581      	cmp	r9, r0
 800509a:	d142      	bne.n	8005122 <_malloc_r+0xea>
 800509c:	6821      	ldr	r1, [r4, #0]
 800509e:	4630      	mov	r0, r6
 80050a0:	1a6d      	subs	r5, r5, r1
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7ff ffa6 	bl	8004ff4 <sbrk_aligned>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d03a      	beq.n	8005122 <_malloc_r+0xea>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	442b      	add	r3, r5
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	f8d8 3000 	ldr.w	r3, [r8]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	bb62      	cbnz	r2, 8005114 <_malloc_r+0xdc>
 80050ba:	f8c8 7000 	str.w	r7, [r8]
 80050be:	e00f      	b.n	80050e0 <_malloc_r+0xa8>
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	1b52      	subs	r2, r2, r5
 80050c4:	d420      	bmi.n	8005108 <_malloc_r+0xd0>
 80050c6:	2a0b      	cmp	r2, #11
 80050c8:	d917      	bls.n	80050fa <_malloc_r+0xc2>
 80050ca:	1961      	adds	r1, r4, r5
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	6025      	str	r5, [r4, #0]
 80050d0:	bf18      	it	ne
 80050d2:	6059      	strne	r1, [r3, #4]
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	bf08      	it	eq
 80050d8:	f8c8 1000 	streq.w	r1, [r8]
 80050dc:	5162      	str	r2, [r4, r5]
 80050de:	604b      	str	r3, [r1, #4]
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f82f 	bl	8005144 <__malloc_unlock>
 80050e6:	f104 000b 	add.w	r0, r4, #11
 80050ea:	1d23      	adds	r3, r4, #4
 80050ec:	f020 0007 	bic.w	r0, r0, #7
 80050f0:	1ac2      	subs	r2, r0, r3
 80050f2:	bf1c      	itt	ne
 80050f4:	1a1b      	subne	r3, r3, r0
 80050f6:	50a3      	strne	r3, [r4, r2]
 80050f8:	e7af      	b.n	800505a <_malloc_r+0x22>
 80050fa:	6862      	ldr	r2, [r4, #4]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	bf0c      	ite	eq
 8005100:	f8c8 2000 	streq.w	r2, [r8]
 8005104:	605a      	strne	r2, [r3, #4]
 8005106:	e7eb      	b.n	80050e0 <_malloc_r+0xa8>
 8005108:	4623      	mov	r3, r4
 800510a:	6864      	ldr	r4, [r4, #4]
 800510c:	e7ae      	b.n	800506c <_malloc_r+0x34>
 800510e:	463c      	mov	r4, r7
 8005110:	687f      	ldr	r7, [r7, #4]
 8005112:	e7b6      	b.n	8005082 <_malloc_r+0x4a>
 8005114:	461a      	mov	r2, r3
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	42a3      	cmp	r3, r4
 800511a:	d1fb      	bne.n	8005114 <_malloc_r+0xdc>
 800511c:	2300      	movs	r3, #0
 800511e:	6053      	str	r3, [r2, #4]
 8005120:	e7de      	b.n	80050e0 <_malloc_r+0xa8>
 8005122:	230c      	movs	r3, #12
 8005124:	4630      	mov	r0, r6
 8005126:	6033      	str	r3, [r6, #0]
 8005128:	f000 f80c 	bl	8005144 <__malloc_unlock>
 800512c:	e794      	b.n	8005058 <_malloc_r+0x20>
 800512e:	6005      	str	r5, [r0, #0]
 8005130:	e7d6      	b.n	80050e0 <_malloc_r+0xa8>
 8005132:	bf00      	nop
 8005134:	20000520 	.word	0x20000520

08005138 <__malloc_lock>:
 8005138:	4801      	ldr	r0, [pc, #4]	@ (8005140 <__malloc_lock+0x8>)
 800513a:	f7ff bee2 	b.w	8004f02 <__retarget_lock_acquire_recursive>
 800513e:	bf00      	nop
 8005140:	20000518 	.word	0x20000518

08005144 <__malloc_unlock>:
 8005144:	4801      	ldr	r0, [pc, #4]	@ (800514c <__malloc_unlock+0x8>)
 8005146:	f7ff bedd 	b.w	8004f04 <__retarget_lock_release_recursive>
 800514a:	bf00      	nop
 800514c:	20000518 	.word	0x20000518

08005150 <__ssputs_r>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	461f      	mov	r7, r3
 8005156:	688e      	ldr	r6, [r1, #8]
 8005158:	4682      	mov	sl, r0
 800515a:	42be      	cmp	r6, r7
 800515c:	460c      	mov	r4, r1
 800515e:	4690      	mov	r8, r2
 8005160:	680b      	ldr	r3, [r1, #0]
 8005162:	d82d      	bhi.n	80051c0 <__ssputs_r+0x70>
 8005164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005168:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800516c:	d026      	beq.n	80051bc <__ssputs_r+0x6c>
 800516e:	6965      	ldr	r5, [r4, #20]
 8005170:	6909      	ldr	r1, [r1, #16]
 8005172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005176:	eba3 0901 	sub.w	r9, r3, r1
 800517a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800517e:	1c7b      	adds	r3, r7, #1
 8005180:	444b      	add	r3, r9
 8005182:	106d      	asrs	r5, r5, #1
 8005184:	429d      	cmp	r5, r3
 8005186:	bf38      	it	cc
 8005188:	461d      	movcc	r5, r3
 800518a:	0553      	lsls	r3, r2, #21
 800518c:	d527      	bpl.n	80051de <__ssputs_r+0x8e>
 800518e:	4629      	mov	r1, r5
 8005190:	f7ff ff52 	bl	8005038 <_malloc_r>
 8005194:	4606      	mov	r6, r0
 8005196:	b360      	cbz	r0, 80051f2 <__ssputs_r+0xa2>
 8005198:	464a      	mov	r2, r9
 800519a:	6921      	ldr	r1, [r4, #16]
 800519c:	f000 fbb2 	bl	8005904 <memcpy>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	6126      	str	r6, [r4, #16]
 80051ae:	444e      	add	r6, r9
 80051b0:	6026      	str	r6, [r4, #0]
 80051b2:	463e      	mov	r6, r7
 80051b4:	6165      	str	r5, [r4, #20]
 80051b6:	eba5 0509 	sub.w	r5, r5, r9
 80051ba:	60a5      	str	r5, [r4, #8]
 80051bc:	42be      	cmp	r6, r7
 80051be:	d900      	bls.n	80051c2 <__ssputs_r+0x72>
 80051c0:	463e      	mov	r6, r7
 80051c2:	4632      	mov	r2, r6
 80051c4:	4641      	mov	r1, r8
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	f000 fb64 	bl	8005894 <memmove>
 80051cc:	2000      	movs	r0, #0
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	1b9b      	subs	r3, r3, r6
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	4433      	add	r3, r6
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	462a      	mov	r2, r5
 80051e0:	f000 fba5 	bl	800592e <_realloc_r>
 80051e4:	4606      	mov	r6, r0
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d1e0      	bne.n	80051ac <__ssputs_r+0x5c>
 80051ea:	4650      	mov	r0, sl
 80051ec:	6921      	ldr	r1, [r4, #16]
 80051ee:	f7ff feb1 	bl	8004f54 <_free_r>
 80051f2:	230c      	movs	r3, #12
 80051f4:	f8ca 3000 	str.w	r3, [sl]
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	e7e9      	b.n	80051da <__ssputs_r+0x8a>
	...

08005208 <_svfiprintf_r>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	4698      	mov	r8, r3
 800520e:	898b      	ldrh	r3, [r1, #12]
 8005210:	4607      	mov	r7, r0
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	460d      	mov	r5, r1
 8005216:	4614      	mov	r4, r2
 8005218:	b09d      	sub	sp, #116	@ 0x74
 800521a:	d510      	bpl.n	800523e <_svfiprintf_r+0x36>
 800521c:	690b      	ldr	r3, [r1, #16]
 800521e:	b973      	cbnz	r3, 800523e <_svfiprintf_r+0x36>
 8005220:	2140      	movs	r1, #64	@ 0x40
 8005222:	f7ff ff09 	bl	8005038 <_malloc_r>
 8005226:	6028      	str	r0, [r5, #0]
 8005228:	6128      	str	r0, [r5, #16]
 800522a:	b930      	cbnz	r0, 800523a <_svfiprintf_r+0x32>
 800522c:	230c      	movs	r3, #12
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	b01d      	add	sp, #116	@ 0x74
 8005236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523a:	2340      	movs	r3, #64	@ 0x40
 800523c:	616b      	str	r3, [r5, #20]
 800523e:	2300      	movs	r3, #0
 8005240:	9309      	str	r3, [sp, #36]	@ 0x24
 8005242:	2320      	movs	r3, #32
 8005244:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005248:	2330      	movs	r3, #48	@ 0x30
 800524a:	f04f 0901 	mov.w	r9, #1
 800524e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005252:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80053ec <_svfiprintf_r+0x1e4>
 8005256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800525a:	4623      	mov	r3, r4
 800525c:	469a      	mov	sl, r3
 800525e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005262:	b10a      	cbz	r2, 8005268 <_svfiprintf_r+0x60>
 8005264:	2a25      	cmp	r2, #37	@ 0x25
 8005266:	d1f9      	bne.n	800525c <_svfiprintf_r+0x54>
 8005268:	ebba 0b04 	subs.w	fp, sl, r4
 800526c:	d00b      	beq.n	8005286 <_svfiprintf_r+0x7e>
 800526e:	465b      	mov	r3, fp
 8005270:	4622      	mov	r2, r4
 8005272:	4629      	mov	r1, r5
 8005274:	4638      	mov	r0, r7
 8005276:	f7ff ff6b 	bl	8005150 <__ssputs_r>
 800527a:	3001      	adds	r0, #1
 800527c:	f000 80a7 	beq.w	80053ce <_svfiprintf_r+0x1c6>
 8005280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005282:	445a      	add	r2, fp
 8005284:	9209      	str	r2, [sp, #36]	@ 0x24
 8005286:	f89a 3000 	ldrb.w	r3, [sl]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 809f 	beq.w	80053ce <_svfiprintf_r+0x1c6>
 8005290:	2300      	movs	r3, #0
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800529a:	f10a 0a01 	add.w	sl, sl, #1
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	9307      	str	r3, [sp, #28]
 80052a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80052a8:	4654      	mov	r4, sl
 80052aa:	2205      	movs	r2, #5
 80052ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b0:	484e      	ldr	r0, [pc, #312]	@ (80053ec <_svfiprintf_r+0x1e4>)
 80052b2:	f000 fb19 	bl	80058e8 <memchr>
 80052b6:	9a04      	ldr	r2, [sp, #16]
 80052b8:	b9d8      	cbnz	r0, 80052f2 <_svfiprintf_r+0xea>
 80052ba:	06d0      	lsls	r0, r2, #27
 80052bc:	bf44      	itt	mi
 80052be:	2320      	movmi	r3, #32
 80052c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052c4:	0711      	lsls	r1, r2, #28
 80052c6:	bf44      	itt	mi
 80052c8:	232b      	movmi	r3, #43	@ 0x2b
 80052ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ce:	f89a 3000 	ldrb.w	r3, [sl]
 80052d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052d4:	d015      	beq.n	8005302 <_svfiprintf_r+0xfa>
 80052d6:	4654      	mov	r4, sl
 80052d8:	2000      	movs	r0, #0
 80052da:	f04f 0c0a 	mov.w	ip, #10
 80052de:	9a07      	ldr	r2, [sp, #28]
 80052e0:	4621      	mov	r1, r4
 80052e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e6:	3b30      	subs	r3, #48	@ 0x30
 80052e8:	2b09      	cmp	r3, #9
 80052ea:	d94b      	bls.n	8005384 <_svfiprintf_r+0x17c>
 80052ec:	b1b0      	cbz	r0, 800531c <_svfiprintf_r+0x114>
 80052ee:	9207      	str	r2, [sp, #28]
 80052f0:	e014      	b.n	800531c <_svfiprintf_r+0x114>
 80052f2:	eba0 0308 	sub.w	r3, r0, r8
 80052f6:	fa09 f303 	lsl.w	r3, r9, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	46a2      	mov	sl, r4
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	e7d2      	b.n	80052a8 <_svfiprintf_r+0xa0>
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	1d19      	adds	r1, r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	9103      	str	r1, [sp, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfbb      	ittet	lt
 800530e:	425b      	neglt	r3, r3
 8005310:	f042 0202 	orrlt.w	r2, r2, #2
 8005314:	9307      	strge	r3, [sp, #28]
 8005316:	9307      	strlt	r3, [sp, #28]
 8005318:	bfb8      	it	lt
 800531a:	9204      	strlt	r2, [sp, #16]
 800531c:	7823      	ldrb	r3, [r4, #0]
 800531e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005320:	d10a      	bne.n	8005338 <_svfiprintf_r+0x130>
 8005322:	7863      	ldrb	r3, [r4, #1]
 8005324:	2b2a      	cmp	r3, #42	@ 0x2a
 8005326:	d132      	bne.n	800538e <_svfiprintf_r+0x186>
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	3402      	adds	r4, #2
 800532c:	1d1a      	adds	r2, r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	9203      	str	r2, [sp, #12]
 8005332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80053f0 <_svfiprintf_r+0x1e8>
 800533c:	2203      	movs	r2, #3
 800533e:	4650      	mov	r0, sl
 8005340:	7821      	ldrb	r1, [r4, #0]
 8005342:	f000 fad1 	bl	80058e8 <memchr>
 8005346:	b138      	cbz	r0, 8005358 <_svfiprintf_r+0x150>
 8005348:	2240      	movs	r2, #64	@ 0x40
 800534a:	9b04      	ldr	r3, [sp, #16]
 800534c:	eba0 000a 	sub.w	r0, r0, sl
 8005350:	4082      	lsls	r2, r0
 8005352:	4313      	orrs	r3, r2
 8005354:	3401      	adds	r4, #1
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535c:	2206      	movs	r2, #6
 800535e:	4825      	ldr	r0, [pc, #148]	@ (80053f4 <_svfiprintf_r+0x1ec>)
 8005360:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005364:	f000 fac0 	bl	80058e8 <memchr>
 8005368:	2800      	cmp	r0, #0
 800536a:	d036      	beq.n	80053da <_svfiprintf_r+0x1d2>
 800536c:	4b22      	ldr	r3, [pc, #136]	@ (80053f8 <_svfiprintf_r+0x1f0>)
 800536e:	bb1b      	cbnz	r3, 80053b8 <_svfiprintf_r+0x1b0>
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	3307      	adds	r3, #7
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	3308      	adds	r3, #8
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537e:	4433      	add	r3, r6
 8005380:	9309      	str	r3, [sp, #36]	@ 0x24
 8005382:	e76a      	b.n	800525a <_svfiprintf_r+0x52>
 8005384:	460c      	mov	r4, r1
 8005386:	2001      	movs	r0, #1
 8005388:	fb0c 3202 	mla	r2, ip, r2, r3
 800538c:	e7a8      	b.n	80052e0 <_svfiprintf_r+0xd8>
 800538e:	2300      	movs	r3, #0
 8005390:	f04f 0c0a 	mov.w	ip, #10
 8005394:	4619      	mov	r1, r3
 8005396:	3401      	adds	r4, #1
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	4620      	mov	r0, r4
 800539c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a0:	3a30      	subs	r2, #48	@ 0x30
 80053a2:	2a09      	cmp	r2, #9
 80053a4:	d903      	bls.n	80053ae <_svfiprintf_r+0x1a6>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0c6      	beq.n	8005338 <_svfiprintf_r+0x130>
 80053aa:	9105      	str	r1, [sp, #20]
 80053ac:	e7c4      	b.n	8005338 <_svfiprintf_r+0x130>
 80053ae:	4604      	mov	r4, r0
 80053b0:	2301      	movs	r3, #1
 80053b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b6:	e7f0      	b.n	800539a <_svfiprintf_r+0x192>
 80053b8:	ab03      	add	r3, sp, #12
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	462a      	mov	r2, r5
 80053be:	4638      	mov	r0, r7
 80053c0:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <_svfiprintf_r+0x1f4>)
 80053c2:	a904      	add	r1, sp, #16
 80053c4:	f3af 8000 	nop.w
 80053c8:	1c42      	adds	r2, r0, #1
 80053ca:	4606      	mov	r6, r0
 80053cc:	d1d6      	bne.n	800537c <_svfiprintf_r+0x174>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	065b      	lsls	r3, r3, #25
 80053d2:	f53f af2d 	bmi.w	8005230 <_svfiprintf_r+0x28>
 80053d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d8:	e72c      	b.n	8005234 <_svfiprintf_r+0x2c>
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4638      	mov	r0, r7
 80053e2:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <_svfiprintf_r+0x1f4>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	f000 f87d 	bl	80054e4 <_printf_i>
 80053ea:	e7ed      	b.n	80053c8 <_svfiprintf_r+0x1c0>
 80053ec:	0800640c 	.word	0x0800640c
 80053f0:	08006412 	.word	0x08006412
 80053f4:	08006416 	.word	0x08006416
 80053f8:	00000000 	.word	0x00000000
 80053fc:	08005151 	.word	0x08005151

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4698      	mov	r8, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	690b      	ldr	r3, [r1, #16]
 800540c:	4607      	mov	r7, r0
 800540e:	4293      	cmp	r3, r2
 8005410:	bfb8      	it	lt
 8005412:	4613      	movlt	r3, r2
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800541a:	460c      	mov	r4, r1
 800541c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc2b      	bgt.n	80054a0 <_printf_common+0xa0>
 8005448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	3b00      	subs	r3, #0
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d430      	bmi.n	80054ba <_printf_common+0xba>
 8005458:	4641      	mov	r1, r8
 800545a:	4638      	mov	r0, r7
 800545c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005460:	47c8      	blx	r9
 8005462:	3001      	adds	r0, #1
 8005464:	d023      	beq.n	80054ae <_printf_common+0xae>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	6922      	ldr	r2, [r4, #16]
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	2b04      	cmp	r3, #4
 8005470:	bf14      	ite	ne
 8005472:	2500      	movne	r5, #0
 8005474:	6833      	ldreq	r3, [r6, #0]
 8005476:	f04f 0600 	mov.w	r6, #0
 800547a:	bf08      	it	eq
 800547c:	68e5      	ldreq	r5, [r4, #12]
 800547e:	f104 041a 	add.w	r4, r4, #26
 8005482:	bf08      	it	eq
 8005484:	1aed      	subeq	r5, r5, r3
 8005486:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800548a:	bf08      	it	eq
 800548c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005490:	4293      	cmp	r3, r2
 8005492:	bfc4      	itt	gt
 8005494:	1a9b      	subgt	r3, r3, r2
 8005496:	18ed      	addgt	r5, r5, r3
 8005498:	42b5      	cmp	r5, r6
 800549a:	d11a      	bne.n	80054d2 <_printf_common+0xd2>
 800549c:	2000      	movs	r0, #0
 800549e:	e008      	b.n	80054b2 <_printf_common+0xb2>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4652      	mov	r2, sl
 80054a4:	4641      	mov	r1, r8
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c8      	blx	r9
 80054aa:	3001      	adds	r0, #1
 80054ac:	d103      	bne.n	80054b6 <_printf_common+0xb6>
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295
 80054b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b6:	3501      	adds	r5, #1
 80054b8:	e7c1      	b.n	800543e <_printf_common+0x3e>
 80054ba:	2030      	movs	r0, #48	@ 0x30
 80054bc:	18e1      	adds	r1, r4, r3
 80054be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054c8:	4422      	add	r2, r4
 80054ca:	3302      	adds	r3, #2
 80054cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054d0:	e7c2      	b.n	8005458 <_printf_common+0x58>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4622      	mov	r2, r4
 80054d6:	4641      	mov	r1, r8
 80054d8:	4638      	mov	r0, r7
 80054da:	47c8      	blx	r9
 80054dc:	3001      	adds	r0, #1
 80054de:	d0e6      	beq.n	80054ae <_printf_common+0xae>
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7d9      	b.n	8005498 <_printf_common+0x98>

080054e4 <_printf_i>:
 80054e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	7e0f      	ldrb	r7, [r1, #24]
 80054ea:	4691      	mov	r9, r2
 80054ec:	2f78      	cmp	r7, #120	@ 0x78
 80054ee:	4680      	mov	r8, r0
 80054f0:	460c      	mov	r4, r1
 80054f2:	469a      	mov	sl, r3
 80054f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054fa:	d807      	bhi.n	800550c <_printf_i+0x28>
 80054fc:	2f62      	cmp	r7, #98	@ 0x62
 80054fe:	d80a      	bhi.n	8005516 <_printf_i+0x32>
 8005500:	2f00      	cmp	r7, #0
 8005502:	f000 80d1 	beq.w	80056a8 <_printf_i+0x1c4>
 8005506:	2f58      	cmp	r7, #88	@ 0x58
 8005508:	f000 80b8 	beq.w	800567c <_printf_i+0x198>
 800550c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005514:	e03a      	b.n	800558c <_printf_i+0xa8>
 8005516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800551a:	2b15      	cmp	r3, #21
 800551c:	d8f6      	bhi.n	800550c <_printf_i+0x28>
 800551e:	a101      	add	r1, pc, #4	@ (adr r1, 8005524 <_printf_i+0x40>)
 8005520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005591 	.word	0x08005591
 800552c:	0800550d 	.word	0x0800550d
 8005530:	0800550d 	.word	0x0800550d
 8005534:	0800550d 	.word	0x0800550d
 8005538:	0800550d 	.word	0x0800550d
 800553c:	08005591 	.word	0x08005591
 8005540:	0800550d 	.word	0x0800550d
 8005544:	0800550d 	.word	0x0800550d
 8005548:	0800550d 	.word	0x0800550d
 800554c:	0800550d 	.word	0x0800550d
 8005550:	0800568f 	.word	0x0800568f
 8005554:	080055bb 	.word	0x080055bb
 8005558:	08005649 	.word	0x08005649
 800555c:	0800550d 	.word	0x0800550d
 8005560:	0800550d 	.word	0x0800550d
 8005564:	080056b1 	.word	0x080056b1
 8005568:	0800550d 	.word	0x0800550d
 800556c:	080055bb 	.word	0x080055bb
 8005570:	0800550d 	.word	0x0800550d
 8005574:	0800550d 	.word	0x0800550d
 8005578:	08005651 	.word	0x08005651
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6032      	str	r2, [r6, #0]
 8005584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800558c:	2301      	movs	r3, #1
 800558e:	e09c      	b.n	80056ca <_printf_i+0x1e6>
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	6031      	str	r1, [r6, #0]
 8005598:	0606      	lsls	r6, r0, #24
 800559a:	d501      	bpl.n	80055a0 <_printf_i+0xbc>
 800559c:	681d      	ldr	r5, [r3, #0]
 800559e:	e003      	b.n	80055a8 <_printf_i+0xc4>
 80055a0:	0645      	lsls	r5, r0, #25
 80055a2:	d5fb      	bpl.n	800559c <_printf_i+0xb8>
 80055a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	da03      	bge.n	80055b4 <_printf_i+0xd0>
 80055ac:	232d      	movs	r3, #45	@ 0x2d
 80055ae:	426d      	negs	r5, r5
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b4:	230a      	movs	r3, #10
 80055b6:	4858      	ldr	r0, [pc, #352]	@ (8005718 <_printf_i+0x234>)
 80055b8:	e011      	b.n	80055de <_printf_i+0xfa>
 80055ba:	6821      	ldr	r1, [r4, #0]
 80055bc:	6833      	ldr	r3, [r6, #0]
 80055be:	0608      	lsls	r0, r1, #24
 80055c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055c4:	d402      	bmi.n	80055cc <_printf_i+0xe8>
 80055c6:	0649      	lsls	r1, r1, #25
 80055c8:	bf48      	it	mi
 80055ca:	b2ad      	uxthmi	r5, r5
 80055cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ce:	6033      	str	r3, [r6, #0]
 80055d0:	bf14      	ite	ne
 80055d2:	230a      	movne	r3, #10
 80055d4:	2308      	moveq	r3, #8
 80055d6:	4850      	ldr	r0, [pc, #320]	@ (8005718 <_printf_i+0x234>)
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055de:	6866      	ldr	r6, [r4, #4]
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	60a6      	str	r6, [r4, #8]
 80055e4:	db05      	blt.n	80055f2 <_printf_i+0x10e>
 80055e6:	6821      	ldr	r1, [r4, #0]
 80055e8:	432e      	orrs	r6, r5
 80055ea:	f021 0104 	bic.w	r1, r1, #4
 80055ee:	6021      	str	r1, [r4, #0]
 80055f0:	d04b      	beq.n	800568a <_printf_i+0x1a6>
 80055f2:	4616      	mov	r6, r2
 80055f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80055f8:	fb03 5711 	mls	r7, r3, r1, r5
 80055fc:	5dc7      	ldrb	r7, [r0, r7]
 80055fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005602:	462f      	mov	r7, r5
 8005604:	42bb      	cmp	r3, r7
 8005606:	460d      	mov	r5, r1
 8005608:	d9f4      	bls.n	80055f4 <_printf_i+0x110>
 800560a:	2b08      	cmp	r3, #8
 800560c:	d10b      	bne.n	8005626 <_printf_i+0x142>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	07df      	lsls	r7, r3, #31
 8005612:	d508      	bpl.n	8005626 <_printf_i+0x142>
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	6861      	ldr	r1, [r4, #4]
 8005618:	4299      	cmp	r1, r3
 800561a:	bfde      	ittt	le
 800561c:	2330      	movle	r3, #48	@ 0x30
 800561e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005622:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005626:	1b92      	subs	r2, r2, r6
 8005628:	6122      	str	r2, [r4, #16]
 800562a:	464b      	mov	r3, r9
 800562c:	4621      	mov	r1, r4
 800562e:	4640      	mov	r0, r8
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	aa03      	add	r2, sp, #12
 8005636:	f7ff fee3 	bl	8005400 <_printf_common>
 800563a:	3001      	adds	r0, #1
 800563c:	d14a      	bne.n	80056d4 <_printf_i+0x1f0>
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	b004      	add	sp, #16
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	f043 0320 	orr.w	r3, r3, #32
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	2778      	movs	r7, #120	@ 0x78
 8005652:	4832      	ldr	r0, [pc, #200]	@ (800571c <_printf_i+0x238>)
 8005654:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	6831      	ldr	r1, [r6, #0]
 800565c:	061f      	lsls	r7, r3, #24
 800565e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005662:	d402      	bmi.n	800566a <_printf_i+0x186>
 8005664:	065f      	lsls	r7, r3, #25
 8005666:	bf48      	it	mi
 8005668:	b2ad      	uxthmi	r5, r5
 800566a:	6031      	str	r1, [r6, #0]
 800566c:	07d9      	lsls	r1, r3, #31
 800566e:	bf44      	itt	mi
 8005670:	f043 0320 	orrmi.w	r3, r3, #32
 8005674:	6023      	strmi	r3, [r4, #0]
 8005676:	b11d      	cbz	r5, 8005680 <_printf_i+0x19c>
 8005678:	2310      	movs	r3, #16
 800567a:	e7ad      	b.n	80055d8 <_printf_i+0xf4>
 800567c:	4826      	ldr	r0, [pc, #152]	@ (8005718 <_printf_i+0x234>)
 800567e:	e7e9      	b.n	8005654 <_printf_i+0x170>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	e7f6      	b.n	8005678 <_printf_i+0x194>
 800568a:	4616      	mov	r6, r2
 800568c:	e7bd      	b.n	800560a <_printf_i+0x126>
 800568e:	6833      	ldr	r3, [r6, #0]
 8005690:	6825      	ldr	r5, [r4, #0]
 8005692:	1d18      	adds	r0, r3, #4
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	6030      	str	r0, [r6, #0]
 8005698:	062e      	lsls	r6, r5, #24
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	d501      	bpl.n	80056a2 <_printf_i+0x1be>
 800569e:	6019      	str	r1, [r3, #0]
 80056a0:	e002      	b.n	80056a8 <_printf_i+0x1c4>
 80056a2:	0668      	lsls	r0, r5, #25
 80056a4:	d5fb      	bpl.n	800569e <_printf_i+0x1ba>
 80056a6:	8019      	strh	r1, [r3, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	4616      	mov	r6, r2
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	e7bc      	b.n	800562a <_printf_i+0x146>
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	2100      	movs	r1, #0
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	6032      	str	r2, [r6, #0]
 80056b8:	681e      	ldr	r6, [r3, #0]
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 f913 	bl	80058e8 <memchr>
 80056c2:	b108      	cbz	r0, 80056c8 <_printf_i+0x1e4>
 80056c4:	1b80      	subs	r0, r0, r6
 80056c6:	6060      	str	r0, [r4, #4]
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	2300      	movs	r3, #0
 80056ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d2:	e7aa      	b.n	800562a <_printf_i+0x146>
 80056d4:	4632      	mov	r2, r6
 80056d6:	4649      	mov	r1, r9
 80056d8:	4640      	mov	r0, r8
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	47d0      	blx	sl
 80056de:	3001      	adds	r0, #1
 80056e0:	d0ad      	beq.n	800563e <_printf_i+0x15a>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	079b      	lsls	r3, r3, #30
 80056e6:	d413      	bmi.n	8005710 <_printf_i+0x22c>
 80056e8:	68e0      	ldr	r0, [r4, #12]
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	4298      	cmp	r0, r3
 80056ee:	bfb8      	it	lt
 80056f0:	4618      	movlt	r0, r3
 80056f2:	e7a6      	b.n	8005642 <_printf_i+0x15e>
 80056f4:	2301      	movs	r3, #1
 80056f6:	4632      	mov	r2, r6
 80056f8:	4649      	mov	r1, r9
 80056fa:	4640      	mov	r0, r8
 80056fc:	47d0      	blx	sl
 80056fe:	3001      	adds	r0, #1
 8005700:	d09d      	beq.n	800563e <_printf_i+0x15a>
 8005702:	3501      	adds	r5, #1
 8005704:	68e3      	ldr	r3, [r4, #12]
 8005706:	9903      	ldr	r1, [sp, #12]
 8005708:	1a5b      	subs	r3, r3, r1
 800570a:	42ab      	cmp	r3, r5
 800570c:	dcf2      	bgt.n	80056f4 <_printf_i+0x210>
 800570e:	e7eb      	b.n	80056e8 <_printf_i+0x204>
 8005710:	2500      	movs	r5, #0
 8005712:	f104 0619 	add.w	r6, r4, #25
 8005716:	e7f5      	b.n	8005704 <_printf_i+0x220>
 8005718:	0800641d 	.word	0x0800641d
 800571c:	0800642e 	.word	0x0800642e

08005720 <__sflush_r>:
 8005720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	0716      	lsls	r6, r2, #28
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	d454      	bmi.n	80057d8 <__sflush_r+0xb8>
 800572e:	684b      	ldr	r3, [r1, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc02      	bgt.n	800573a <__sflush_r+0x1a>
 8005734:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd48      	ble.n	80057cc <__sflush_r+0xac>
 800573a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800573c:	2e00      	cmp	r6, #0
 800573e:	d045      	beq.n	80057cc <__sflush_r+0xac>
 8005740:	2300      	movs	r3, #0
 8005742:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005746:	682f      	ldr	r7, [r5, #0]
 8005748:	6a21      	ldr	r1, [r4, #32]
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	d030      	beq.n	80057b0 <__sflush_r+0x90>
 800574e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	0759      	lsls	r1, r3, #29
 8005754:	d505      	bpl.n	8005762 <__sflush_r+0x42>
 8005756:	6863      	ldr	r3, [r4, #4]
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800575c:	b10b      	cbz	r3, 8005762 <__sflush_r+0x42>
 800575e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	4628      	mov	r0, r5
 8005766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005768:	6a21      	ldr	r1, [r4, #32]
 800576a:	47b0      	blx	r6
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	d106      	bne.n	8005780 <__sflush_r+0x60>
 8005772:	6829      	ldr	r1, [r5, #0]
 8005774:	291d      	cmp	r1, #29
 8005776:	d82b      	bhi.n	80057d0 <__sflush_r+0xb0>
 8005778:	4a28      	ldr	r2, [pc, #160]	@ (800581c <__sflush_r+0xfc>)
 800577a:	40ca      	lsrs	r2, r1
 800577c:	07d6      	lsls	r6, r2, #31
 800577e:	d527      	bpl.n	80057d0 <__sflush_r+0xb0>
 8005780:	2200      	movs	r2, #0
 8005782:	6062      	str	r2, [r4, #4]
 8005784:	6922      	ldr	r2, [r4, #16]
 8005786:	04d9      	lsls	r1, r3, #19
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	d504      	bpl.n	8005796 <__sflush_r+0x76>
 800578c:	1c42      	adds	r2, r0, #1
 800578e:	d101      	bne.n	8005794 <__sflush_r+0x74>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b903      	cbnz	r3, 8005796 <__sflush_r+0x76>
 8005794:	6560      	str	r0, [r4, #84]	@ 0x54
 8005796:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005798:	602f      	str	r7, [r5, #0]
 800579a:	b1b9      	cbz	r1, 80057cc <__sflush_r+0xac>
 800579c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <__sflush_r+0x8a>
 80057a4:	4628      	mov	r0, r5
 80057a6:	f7ff fbd5 	bl	8004f54 <_free_r>
 80057aa:	2300      	movs	r3, #0
 80057ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ae:	e00d      	b.n	80057cc <__sflush_r+0xac>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b0      	blx	r6
 80057b6:	4602      	mov	r2, r0
 80057b8:	1c50      	adds	r0, r2, #1
 80057ba:	d1c9      	bne.n	8005750 <__sflush_r+0x30>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0c6      	beq.n	8005750 <__sflush_r+0x30>
 80057c2:	2b1d      	cmp	r3, #29
 80057c4:	d001      	beq.n	80057ca <__sflush_r+0xaa>
 80057c6:	2b16      	cmp	r3, #22
 80057c8:	d11d      	bne.n	8005806 <__sflush_r+0xe6>
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	2000      	movs	r0, #0
 80057ce:	e021      	b.n	8005814 <__sflush_r+0xf4>
 80057d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057d4:	b21b      	sxth	r3, r3
 80057d6:	e01a      	b.n	800580e <__sflush_r+0xee>
 80057d8:	690f      	ldr	r7, [r1, #16]
 80057da:	2f00      	cmp	r7, #0
 80057dc:	d0f6      	beq.n	80057cc <__sflush_r+0xac>
 80057de:	0793      	lsls	r3, r2, #30
 80057e0:	bf18      	it	ne
 80057e2:	2300      	movne	r3, #0
 80057e4:	680e      	ldr	r6, [r1, #0]
 80057e6:	bf08      	it	eq
 80057e8:	694b      	ldreq	r3, [r1, #20]
 80057ea:	1bf6      	subs	r6, r6, r7
 80057ec:	600f      	str	r7, [r1, #0]
 80057ee:	608b      	str	r3, [r1, #8]
 80057f0:	2e00      	cmp	r6, #0
 80057f2:	ddeb      	ble.n	80057cc <__sflush_r+0xac>
 80057f4:	4633      	mov	r3, r6
 80057f6:	463a      	mov	r2, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	6a21      	ldr	r1, [r4, #32]
 80057fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005800:	47e0      	blx	ip
 8005802:	2800      	cmp	r0, #0
 8005804:	dc07      	bgt.n	8005816 <__sflush_r+0xf6>
 8005806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005816:	4407      	add	r7, r0
 8005818:	1a36      	subs	r6, r6, r0
 800581a:	e7e9      	b.n	80057f0 <__sflush_r+0xd0>
 800581c:	20400001 	.word	0x20400001

08005820 <_fflush_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	4605      	mov	r5, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b913      	cbnz	r3, 8005830 <_fflush_r+0x10>
 800582a:	2500      	movs	r5, #0
 800582c:	4628      	mov	r0, r5
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	b118      	cbz	r0, 800583a <_fflush_r+0x1a>
 8005832:	6a03      	ldr	r3, [r0, #32]
 8005834:	b90b      	cbnz	r3, 800583a <_fflush_r+0x1a>
 8005836:	f7ff f9d3 	bl	8004be0 <__sinit>
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f3      	beq.n	800582a <_fflush_r+0xa>
 8005842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005844:	07d0      	lsls	r0, r2, #31
 8005846:	d404      	bmi.n	8005852 <_fflush_r+0x32>
 8005848:	0599      	lsls	r1, r3, #22
 800584a:	d402      	bmi.n	8005852 <_fflush_r+0x32>
 800584c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800584e:	f7ff fb58 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8005852:	4628      	mov	r0, r5
 8005854:	4621      	mov	r1, r4
 8005856:	f7ff ff63 	bl	8005720 <__sflush_r>
 800585a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800585c:	4605      	mov	r5, r0
 800585e:	07da      	lsls	r2, r3, #31
 8005860:	d4e4      	bmi.n	800582c <_fflush_r+0xc>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	059b      	lsls	r3, r3, #22
 8005866:	d4e1      	bmi.n	800582c <_fflush_r+0xc>
 8005868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800586a:	f7ff fb4b 	bl	8004f04 <__retarget_lock_release_recursive>
 800586e:	e7dd      	b.n	800582c <_fflush_r+0xc>

08005870 <fiprintf>:
 8005870:	b40e      	push	{r1, r2, r3}
 8005872:	b503      	push	{r0, r1, lr}
 8005874:	4601      	mov	r1, r0
 8005876:	ab03      	add	r3, sp, #12
 8005878:	4805      	ldr	r0, [pc, #20]	@ (8005890 <fiprintf+0x20>)
 800587a:	f853 2b04 	ldr.w	r2, [r3], #4
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f000 f8a9 	bl	80059d8 <_vfiprintf_r>
 8005886:	b002      	add	sp, #8
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b003      	add	sp, #12
 800588e:	4770      	bx	lr
 8005890:	20000114 	.word	0x20000114

08005894 <memmove>:
 8005894:	4288      	cmp	r0, r1
 8005896:	b510      	push	{r4, lr}
 8005898:	eb01 0402 	add.w	r4, r1, r2
 800589c:	d902      	bls.n	80058a4 <memmove+0x10>
 800589e:	4284      	cmp	r4, r0
 80058a0:	4623      	mov	r3, r4
 80058a2:	d807      	bhi.n	80058b4 <memmove+0x20>
 80058a4:	1e43      	subs	r3, r0, #1
 80058a6:	42a1      	cmp	r1, r4
 80058a8:	d008      	beq.n	80058bc <memmove+0x28>
 80058aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058b2:	e7f8      	b.n	80058a6 <memmove+0x12>
 80058b4:	4601      	mov	r1, r0
 80058b6:	4402      	add	r2, r0
 80058b8:	428a      	cmp	r2, r1
 80058ba:	d100      	bne.n	80058be <memmove+0x2a>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058c6:	e7f7      	b.n	80058b8 <memmove+0x24>

080058c8 <_sbrk_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	2300      	movs	r3, #0
 80058cc:	4d05      	ldr	r5, [pc, #20]	@ (80058e4 <_sbrk_r+0x1c>)
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc fa82 	bl	8001ddc <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_sbrk_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_sbrk_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000514 	.word	0x20000514

080058e8 <memchr>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	b510      	push	{r4, lr}
 80058ec:	b2c9      	uxtb	r1, r1
 80058ee:	4402      	add	r2, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	d101      	bne.n	80058fa <memchr+0x12>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e003      	b.n	8005902 <memchr+0x1a>
 80058fa:	7804      	ldrb	r4, [r0, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	428c      	cmp	r4, r1
 8005900:	d1f6      	bne.n	80058f0 <memchr+0x8>
 8005902:	bd10      	pop	{r4, pc}

08005904 <memcpy>:
 8005904:	440a      	add	r2, r1
 8005906:	4291      	cmp	r1, r2
 8005908:	f100 33ff 	add.w	r3, r0, #4294967295
 800590c:	d100      	bne.n	8005910 <memcpy+0xc>
 800590e:	4770      	bx	lr
 8005910:	b510      	push	{r4, lr}
 8005912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005916:	4291      	cmp	r1, r2
 8005918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800591c:	d1f9      	bne.n	8005912 <memcpy+0xe>
 800591e:	bd10      	pop	{r4, pc}

08005920 <abort>:
 8005920:	2006      	movs	r0, #6
 8005922:	b508      	push	{r3, lr}
 8005924:	f000 fa2c 	bl	8005d80 <raise>
 8005928:	2001      	movs	r0, #1
 800592a:	f7fc f9e2 	bl	8001cf2 <_exit>

0800592e <_realloc_r>:
 800592e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005932:	4607      	mov	r7, r0
 8005934:	4614      	mov	r4, r2
 8005936:	460d      	mov	r5, r1
 8005938:	b921      	cbnz	r1, 8005944 <_realloc_r+0x16>
 800593a:	4611      	mov	r1, r2
 800593c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	f7ff bb7a 	b.w	8005038 <_malloc_r>
 8005944:	b92a      	cbnz	r2, 8005952 <_realloc_r+0x24>
 8005946:	f7ff fb05 	bl	8004f54 <_free_r>
 800594a:	4625      	mov	r5, r4
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005952:	f000 fa31 	bl	8005db8 <_malloc_usable_size_r>
 8005956:	4284      	cmp	r4, r0
 8005958:	4606      	mov	r6, r0
 800595a:	d802      	bhi.n	8005962 <_realloc_r+0x34>
 800595c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005960:	d8f4      	bhi.n	800594c <_realloc_r+0x1e>
 8005962:	4621      	mov	r1, r4
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff fb67 	bl	8005038 <_malloc_r>
 800596a:	4680      	mov	r8, r0
 800596c:	b908      	cbnz	r0, 8005972 <_realloc_r+0x44>
 800596e:	4645      	mov	r5, r8
 8005970:	e7ec      	b.n	800594c <_realloc_r+0x1e>
 8005972:	42b4      	cmp	r4, r6
 8005974:	4622      	mov	r2, r4
 8005976:	4629      	mov	r1, r5
 8005978:	bf28      	it	cs
 800597a:	4632      	movcs	r2, r6
 800597c:	f7ff ffc2 	bl	8005904 <memcpy>
 8005980:	4629      	mov	r1, r5
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff fae6 	bl	8004f54 <_free_r>
 8005988:	e7f1      	b.n	800596e <_realloc_r+0x40>

0800598a <__sfputc_r>:
 800598a:	6893      	ldr	r3, [r2, #8]
 800598c:	b410      	push	{r4}
 800598e:	3b01      	subs	r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	6093      	str	r3, [r2, #8]
 8005994:	da07      	bge.n	80059a6 <__sfputc_r+0x1c>
 8005996:	6994      	ldr	r4, [r2, #24]
 8005998:	42a3      	cmp	r3, r4
 800599a:	db01      	blt.n	80059a0 <__sfputc_r+0x16>
 800599c:	290a      	cmp	r1, #10
 800599e:	d102      	bne.n	80059a6 <__sfputc_r+0x1c>
 80059a0:	bc10      	pop	{r4}
 80059a2:	f000 b931 	b.w	8005c08 <__swbuf_r>
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	1c58      	adds	r0, r3, #1
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	7019      	strb	r1, [r3, #0]
 80059ae:	4608      	mov	r0, r1
 80059b0:	bc10      	pop	{r4}
 80059b2:	4770      	bx	lr

080059b4 <__sfputs_r>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	4606      	mov	r6, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	4614      	mov	r4, r2
 80059bc:	18d5      	adds	r5, r2, r3
 80059be:	42ac      	cmp	r4, r5
 80059c0:	d101      	bne.n	80059c6 <__sfputs_r+0x12>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e007      	b.n	80059d6 <__sfputs_r+0x22>
 80059c6:	463a      	mov	r2, r7
 80059c8:	4630      	mov	r0, r6
 80059ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ce:	f7ff ffdc 	bl	800598a <__sfputc_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d1f3      	bne.n	80059be <__sfputs_r+0xa>
 80059d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059d8 <_vfiprintf_r>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	460d      	mov	r5, r1
 80059de:	4614      	mov	r4, r2
 80059e0:	4698      	mov	r8, r3
 80059e2:	4606      	mov	r6, r0
 80059e4:	b09d      	sub	sp, #116	@ 0x74
 80059e6:	b118      	cbz	r0, 80059f0 <_vfiprintf_r+0x18>
 80059e8:	6a03      	ldr	r3, [r0, #32]
 80059ea:	b90b      	cbnz	r3, 80059f0 <_vfiprintf_r+0x18>
 80059ec:	f7ff f8f8 	bl	8004be0 <__sinit>
 80059f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059f2:	07d9      	lsls	r1, r3, #31
 80059f4:	d405      	bmi.n	8005a02 <_vfiprintf_r+0x2a>
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	059a      	lsls	r2, r3, #22
 80059fa:	d402      	bmi.n	8005a02 <_vfiprintf_r+0x2a>
 80059fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059fe:	f7ff fa80 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	d501      	bpl.n	8005a0c <_vfiprintf_r+0x34>
 8005a08:	692b      	ldr	r3, [r5, #16]
 8005a0a:	b99b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x5c>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 f938 	bl	8005c84 <__swsetup_r>
 8005a14:	b170      	cbz	r0, 8005a34 <_vfiprintf_r+0x5c>
 8005a16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a18:	07dc      	lsls	r4, r3, #31
 8005a1a:	d504      	bpl.n	8005a26 <_vfiprintf_r+0x4e>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	b01d      	add	sp, #116	@ 0x74
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	89ab      	ldrh	r3, [r5, #12]
 8005a28:	0598      	lsls	r0, r3, #22
 8005a2a:	d4f7      	bmi.n	8005a1c <_vfiprintf_r+0x44>
 8005a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a2e:	f7ff fa69 	bl	8004f04 <__retarget_lock_release_recursive>
 8005a32:	e7f3      	b.n	8005a1c <_vfiprintf_r+0x44>
 8005a34:	2300      	movs	r3, #0
 8005a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a3e:	2330      	movs	r3, #48	@ 0x30
 8005a40:	f04f 0901 	mov.w	r9, #1
 8005a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005bf4 <_vfiprintf_r+0x21c>
 8005a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a50:	4623      	mov	r3, r4
 8005a52:	469a      	mov	sl, r3
 8005a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a58:	b10a      	cbz	r2, 8005a5e <_vfiprintf_r+0x86>
 8005a5a:	2a25      	cmp	r2, #37	@ 0x25
 8005a5c:	d1f9      	bne.n	8005a52 <_vfiprintf_r+0x7a>
 8005a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a62:	d00b      	beq.n	8005a7c <_vfiprintf_r+0xa4>
 8005a64:	465b      	mov	r3, fp
 8005a66:	4622      	mov	r2, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7ff ffa2 	bl	80059b4 <__sfputs_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	f000 80a7 	beq.w	8005bc4 <_vfiprintf_r+0x1ec>
 8005a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a78:	445a      	add	r2, fp
 8005a7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 809f 	beq.w	8005bc4 <_vfiprintf_r+0x1ec>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a90:	f10a 0a01 	add.w	sl, sl, #1
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a9e:	4654      	mov	r4, sl
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa6:	4853      	ldr	r0, [pc, #332]	@ (8005bf4 <_vfiprintf_r+0x21c>)
 8005aa8:	f7ff ff1e 	bl	80058e8 <memchr>
 8005aac:	9a04      	ldr	r2, [sp, #16]
 8005aae:	b9d8      	cbnz	r0, 8005ae8 <_vfiprintf_r+0x110>
 8005ab0:	06d1      	lsls	r1, r2, #27
 8005ab2:	bf44      	itt	mi
 8005ab4:	2320      	movmi	r3, #32
 8005ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aba:	0713      	lsls	r3, r2, #28
 8005abc:	bf44      	itt	mi
 8005abe:	232b      	movmi	r3, #43	@ 0x2b
 8005ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aca:	d015      	beq.n	8005af8 <_vfiprintf_r+0x120>
 8005acc:	4654      	mov	r4, sl
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f04f 0c0a 	mov.w	ip, #10
 8005ad4:	9a07      	ldr	r2, [sp, #28]
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005adc:	3b30      	subs	r3, #48	@ 0x30
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	d94b      	bls.n	8005b7a <_vfiprintf_r+0x1a2>
 8005ae2:	b1b0      	cbz	r0, 8005b12 <_vfiprintf_r+0x13a>
 8005ae4:	9207      	str	r2, [sp, #28]
 8005ae6:	e014      	b.n	8005b12 <_vfiprintf_r+0x13a>
 8005ae8:	eba0 0308 	sub.w	r3, r0, r8
 8005aec:	fa09 f303 	lsl.w	r3, r9, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	46a2      	mov	sl, r4
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	e7d2      	b.n	8005a9e <_vfiprintf_r+0xc6>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	1d19      	adds	r1, r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	9103      	str	r1, [sp, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	bfbb      	ittet	lt
 8005b04:	425b      	neglt	r3, r3
 8005b06:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0a:	9307      	strge	r3, [sp, #28]
 8005b0c:	9307      	strlt	r3, [sp, #28]
 8005b0e:	bfb8      	it	lt
 8005b10:	9204      	strlt	r2, [sp, #16]
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b16:	d10a      	bne.n	8005b2e <_vfiprintf_r+0x156>
 8005b18:	7863      	ldrb	r3, [r4, #1]
 8005b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1c:	d132      	bne.n	8005b84 <_vfiprintf_r+0x1ac>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	3402      	adds	r4, #2
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005bf8 <_vfiprintf_r+0x220>
 8005b32:	2203      	movs	r2, #3
 8005b34:	4650      	mov	r0, sl
 8005b36:	7821      	ldrb	r1, [r4, #0]
 8005b38:	f7ff fed6 	bl	80058e8 <memchr>
 8005b3c:	b138      	cbz	r0, 8005b4e <_vfiprintf_r+0x176>
 8005b3e:	2240      	movs	r2, #64	@ 0x40
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	eba0 000a 	sub.w	r0, r0, sl
 8005b46:	4082      	lsls	r2, r0
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b52:	2206      	movs	r2, #6
 8005b54:	4829      	ldr	r0, [pc, #164]	@ (8005bfc <_vfiprintf_r+0x224>)
 8005b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b5a:	f7ff fec5 	bl	80058e8 <memchr>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d03f      	beq.n	8005be2 <_vfiprintf_r+0x20a>
 8005b62:	4b27      	ldr	r3, [pc, #156]	@ (8005c00 <_vfiprintf_r+0x228>)
 8005b64:	bb1b      	cbnz	r3, 8005bae <_vfiprintf_r+0x1d6>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	3307      	adds	r3, #7
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b74:	443b      	add	r3, r7
 8005b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b78:	e76a      	b.n	8005a50 <_vfiprintf_r+0x78>
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b82:	e7a8      	b.n	8005ad6 <_vfiprintf_r+0xfe>
 8005b84:	2300      	movs	r3, #0
 8005b86:	f04f 0c0a 	mov.w	ip, #10
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b96:	3a30      	subs	r2, #48	@ 0x30
 8005b98:	2a09      	cmp	r2, #9
 8005b9a:	d903      	bls.n	8005ba4 <_vfiprintf_r+0x1cc>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0c6      	beq.n	8005b2e <_vfiprintf_r+0x156>
 8005ba0:	9105      	str	r1, [sp, #20]
 8005ba2:	e7c4      	b.n	8005b2e <_vfiprintf_r+0x156>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bac:	e7f0      	b.n	8005b90 <_vfiprintf_r+0x1b8>
 8005bae:	ab03      	add	r3, sp, #12
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <_vfiprintf_r+0x22c>)
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	f3af 8000 	nop.w
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	1c78      	adds	r0, r7, #1
 8005bc2:	d1d6      	bne.n	8005b72 <_vfiprintf_r+0x19a>
 8005bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_vfiprintf_r+0x1fe>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	059a      	lsls	r2, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_vfiprintf_r+0x1fe>
 8005bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bd2:	f7ff f997 	bl	8004f04 <__retarget_lock_release_recursive>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	065b      	lsls	r3, r3, #25
 8005bda:	f53f af1f 	bmi.w	8005a1c <_vfiprintf_r+0x44>
 8005bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005be0:	e71e      	b.n	8005a20 <_vfiprintf_r+0x48>
 8005be2:	ab03      	add	r3, sp, #12
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	462a      	mov	r2, r5
 8005be8:	4630      	mov	r0, r6
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <_vfiprintf_r+0x22c>)
 8005bec:	a904      	add	r1, sp, #16
 8005bee:	f7ff fc79 	bl	80054e4 <_printf_i>
 8005bf2:	e7e4      	b.n	8005bbe <_vfiprintf_r+0x1e6>
 8005bf4:	0800640c 	.word	0x0800640c
 8005bf8:	08006412 	.word	0x08006412
 8005bfc:	08006416 	.word	0x08006416
 8005c00:	00000000 	.word	0x00000000
 8005c04:	080059b5 	.word	0x080059b5

08005c08 <__swbuf_r>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	460e      	mov	r6, r1
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b118      	cbz	r0, 8005c1a <__swbuf_r+0x12>
 8005c12:	6a03      	ldr	r3, [r0, #32]
 8005c14:	b90b      	cbnz	r3, 8005c1a <__swbuf_r+0x12>
 8005c16:	f7fe ffe3 	bl	8004be0 <__sinit>
 8005c1a:	69a3      	ldr	r3, [r4, #24]
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	071a      	lsls	r2, r3, #28
 8005c22:	d501      	bpl.n	8005c28 <__swbuf_r+0x20>
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	b943      	cbnz	r3, 8005c3a <__swbuf_r+0x32>
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 f82a 	bl	8005c84 <__swsetup_r>
 8005c30:	b118      	cbz	r0, 8005c3a <__swbuf_r+0x32>
 8005c32:	f04f 37ff 	mov.w	r7, #4294967295
 8005c36:	4638      	mov	r0, r7
 8005c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	b2f6      	uxtb	r6, r6
 8005c40:	1a98      	subs	r0, r3, r2
 8005c42:	6963      	ldr	r3, [r4, #20]
 8005c44:	4637      	mov	r7, r6
 8005c46:	4283      	cmp	r3, r0
 8005c48:	dc05      	bgt.n	8005c56 <__swbuf_r+0x4e>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff fde7 	bl	8005820 <_fflush_r>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1ed      	bne.n	8005c32 <__swbuf_r+0x2a>
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	701e      	strb	r6, [r3, #0]
 8005c64:	6962      	ldr	r2, [r4, #20]
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d004      	beq.n	8005c76 <__swbuf_r+0x6e>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d5e1      	bpl.n	8005c36 <__swbuf_r+0x2e>
 8005c72:	2e0a      	cmp	r6, #10
 8005c74:	d1df      	bne.n	8005c36 <__swbuf_r+0x2e>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff fdd1 	bl	8005820 <_fflush_r>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0d9      	beq.n	8005c36 <__swbuf_r+0x2e>
 8005c82:	e7d6      	b.n	8005c32 <__swbuf_r+0x2a>

08005c84 <__swsetup_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4b29      	ldr	r3, [pc, #164]	@ (8005d2c <__swsetup_r+0xa8>)
 8005c88:	4605      	mov	r5, r0
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	b118      	cbz	r0, 8005c98 <__swsetup_r+0x14>
 8005c90:	6a03      	ldr	r3, [r0, #32]
 8005c92:	b90b      	cbnz	r3, 8005c98 <__swsetup_r+0x14>
 8005c94:	f7fe ffa4 	bl	8004be0 <__sinit>
 8005c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9c:	0719      	lsls	r1, r3, #28
 8005c9e:	d422      	bmi.n	8005ce6 <__swsetup_r+0x62>
 8005ca0:	06da      	lsls	r2, r3, #27
 8005ca2:	d407      	bmi.n	8005cb4 <__swsetup_r+0x30>
 8005ca4:	2209      	movs	r2, #9
 8005ca6:	602a      	str	r2, [r5, #0]
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	e033      	b.n	8005d1c <__swsetup_r+0x98>
 8005cb4:	0758      	lsls	r0, r3, #29
 8005cb6:	d512      	bpl.n	8005cde <__swsetup_r+0x5a>
 8005cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cba:	b141      	cbz	r1, 8005cce <__swsetup_r+0x4a>
 8005cbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cc0:	4299      	cmp	r1, r3
 8005cc2:	d002      	beq.n	8005cca <__swsetup_r+0x46>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f7ff f945 	bl	8004f54 <_free_r>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6063      	str	r3, [r4, #4]
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	f043 0308 	orr.w	r3, r3, #8
 8005ce4:	81a3      	strh	r3, [r4, #12]
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	b94b      	cbnz	r3, 8005cfe <__swsetup_r+0x7a>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf4:	d003      	beq.n	8005cfe <__swsetup_r+0x7a>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f88a 	bl	8005e12 <__smakebuf_r>
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	f013 0201 	ands.w	r2, r3, #1
 8005d06:	d00a      	beq.n	8005d1e <__swsetup_r+0x9a>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60a2      	str	r2, [r4, #8]
 8005d0c:	6962      	ldr	r2, [r4, #20]
 8005d0e:	4252      	negs	r2, r2
 8005d10:	61a2      	str	r2, [r4, #24]
 8005d12:	6922      	ldr	r2, [r4, #16]
 8005d14:	b942      	cbnz	r2, 8005d28 <__swsetup_r+0xa4>
 8005d16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d1a:	d1c5      	bne.n	8005ca8 <__swsetup_r+0x24>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	0799      	lsls	r1, r3, #30
 8005d20:	bf58      	it	pl
 8005d22:	6962      	ldrpl	r2, [r4, #20]
 8005d24:	60a2      	str	r2, [r4, #8]
 8005d26:	e7f4      	b.n	8005d12 <__swsetup_r+0x8e>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7f7      	b.n	8005d1c <__swsetup_r+0x98>
 8005d2c:	20000114 	.word	0x20000114

08005d30 <_raise_r>:
 8005d30:	291f      	cmp	r1, #31
 8005d32:	b538      	push	{r3, r4, r5, lr}
 8005d34:	4605      	mov	r5, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	d904      	bls.n	8005d44 <_raise_r+0x14>
 8005d3a:	2316      	movs	r3, #22
 8005d3c:	6003      	str	r3, [r0, #0]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005d46:	b112      	cbz	r2, 8005d4e <_raise_r+0x1e>
 8005d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d4c:	b94b      	cbnz	r3, 8005d62 <_raise_r+0x32>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f830 	bl	8005db4 <_getpid_r>
 8005d54:	4622      	mov	r2, r4
 8005d56:	4601      	mov	r1, r0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5e:	f000 b817 	b.w	8005d90 <_kill_r>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00a      	beq.n	8005d7c <_raise_r+0x4c>
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	d103      	bne.n	8005d72 <_raise_r+0x42>
 8005d6a:	2316      	movs	r3, #22
 8005d6c:	6003      	str	r3, [r0, #0]
 8005d6e:	2001      	movs	r0, #1
 8005d70:	e7e7      	b.n	8005d42 <_raise_r+0x12>
 8005d72:	2100      	movs	r1, #0
 8005d74:	4620      	mov	r0, r4
 8005d76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d7a:	4798      	blx	r3
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7e0      	b.n	8005d42 <_raise_r+0x12>

08005d80 <raise>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	@ (8005d8c <raise+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f7ff bfd3 	b.w	8005d30 <_raise_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000114 	.word	0x20000114

08005d90 <_kill_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	2300      	movs	r3, #0
 8005d94:	4d06      	ldr	r5, [pc, #24]	@ (8005db0 <_kill_r+0x20>)
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fb ff98 	bl	8001cd2 <_kill>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_kill_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_kill_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20000514 	.word	0x20000514

08005db4 <_getpid_r>:
 8005db4:	f7fb bf86 	b.w	8001cc4 <_getpid>

08005db8 <_malloc_usable_size_r>:
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f18      	subs	r0, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbc      	itt	lt
 8005dc2:	580b      	ldrlt	r3, [r1, r0]
 8005dc4:	18c0      	addlt	r0, r0, r3
 8005dc6:	4770      	bx	lr

08005dc8 <__swhatbuf_r>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	461e      	mov	r6, r3
 8005dd6:	b096      	sub	sp, #88	@ 0x58
 8005dd8:	da0c      	bge.n	8005df4 <__swhatbuf_r+0x2c>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005de2:	bf14      	ite	ne
 8005de4:	2340      	movne	r3, #64	@ 0x40
 8005de6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005dea:	2000      	movs	r0, #0
 8005dec:	6031      	str	r1, [r6, #0]
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	b016      	add	sp, #88	@ 0x58
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	466a      	mov	r2, sp
 8005df6:	f000 f849 	bl	8005e8c <_fstat_r>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	dbed      	blt.n	8005dda <__swhatbuf_r+0x12>
 8005dfe:	9901      	ldr	r1, [sp, #4]
 8005e00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e08:	4259      	negs	r1, r3
 8005e0a:	4159      	adcs	r1, r3
 8005e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e10:	e7eb      	b.n	8005dea <__swhatbuf_r+0x22>

08005e12 <__smakebuf_r>:
 8005e12:	898b      	ldrh	r3, [r1, #12]
 8005e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e16:	079d      	lsls	r5, r3, #30
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	d507      	bpl.n	8005e2e <__smakebuf_r+0x1c>
 8005e1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	2301      	movs	r3, #1
 8005e28:	6163      	str	r3, [r4, #20]
 8005e2a:	b003      	add	sp, #12
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2e:	466a      	mov	r2, sp
 8005e30:	ab01      	add	r3, sp, #4
 8005e32:	f7ff ffc9 	bl	8005dc8 <__swhatbuf_r>
 8005e36:	9f00      	ldr	r7, [sp, #0]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7ff f8fb 	bl	8005038 <_malloc_r>
 8005e42:	b948      	cbnz	r0, 8005e58 <__smakebuf_r+0x46>
 8005e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e48:	059a      	lsls	r2, r3, #22
 8005e4a:	d4ee      	bmi.n	8005e2a <__smakebuf_r+0x18>
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	e7e2      	b.n	8005e1e <__smakebuf_r+0xc>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	9b01      	ldr	r3, [sp, #4]
 8005e66:	6020      	str	r0, [r4, #0]
 8005e68:	b15b      	cbz	r3, 8005e82 <__smakebuf_r+0x70>
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	f000 f81e 	bl	8005eb0 <_isatty_r>
 8005e74:	b128      	cbz	r0, 8005e82 <__smakebuf_r+0x70>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	431d      	orrs	r5, r3
 8005e86:	81a5      	strh	r5, [r4, #12]
 8005e88:	e7cf      	b.n	8005e2a <__smakebuf_r+0x18>
	...

08005e8c <_fstat_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4d06      	ldr	r5, [pc, #24]	@ (8005eac <_fstat_r+0x20>)
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f7fb ff79 	bl	8001d90 <_fstat>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d102      	bne.n	8005ea8 <_fstat_r+0x1c>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	b103      	cbz	r3, 8005ea8 <_fstat_r+0x1c>
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000514 	.word	0x20000514

08005eb0 <_isatty_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4d05      	ldr	r5, [pc, #20]	@ (8005ecc <_isatty_r+0x1c>)
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb ff77 	bl	8001dae <_isatty>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_isatty_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_isatty_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	20000514 	.word	0x20000514

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
