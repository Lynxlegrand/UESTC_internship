
UESTC_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800657c  0800657c  00008174  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800657c  0800657c  0000757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006584  08006584  00008174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006584  08006584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006588  08006588  00007588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800658c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000174  08006700  00008174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08006700  00008580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008174  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ca  00000000  00000000  0000819d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf6  00000000  00000000  00018967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db5  00000000  00000000  0001c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29a  00000000  00000000  0001d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138d9  00000000  00000000  00037867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903fc  00000000  00000000  0004b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db53c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  000db580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e0b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000174 	.word	0x20000174
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ffc 	.word	0x08005ffc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000178 	.word	0x20000178
 8000148:	08005ffc 	.word	0x08005ffc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <DC_Motor_Init>:
	}
	flags.RAMPE_EN_COURS = false;
}

void DC_Motor_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800075e:	2100      	movs	r1, #0
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <DC_Motor_Init+0x58>)
 8000762:	f002 ff27 	bl	80035b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000766:	2108      	movs	r1, #8
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <DC_Motor_Init+0x5c>)
 800076a:	f002 ff23 	bl	80035b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800076e:	2100      	movs	r1, #0
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <DC_Motor_Init+0x60>)
 8000772:	f002 ff1f 	bl	80035b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000776:	2108      	movs	r1, #8
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <DC_Motor_Init+0x64>)
 800077a:	f002 ff1b 	bl	80035b4 <HAL_TIM_PWM_Start>

    for (int i = 0; i < 4; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e00c      	b.n	800079e <DC_Motor_Init+0x46>
        ramps[i].active = 0;
 8000784:	490e      	ldr	r1, [pc, #56]	@ (80007c0 <DC_Motor_Init+0x68>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	440b      	add	r3, r1
 8000792:	3314      	adds	r3, #20
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	ddef      	ble.n	8000784 <DC_Motor_Init+0x2c>
    }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000204 	.word	0x20000204
 80007b4:	2000024c 	.word	0x2000024c
 80007b8:	20000294 	.word	0x20000294
 80007bc:	200002dc 	.word	0x200002dc
 80007c0:	20000190 	.word	0x20000190

080007c4 <DC_Motor_SetDuty>:

void DC_Motor_SetDuty(uint8_t motor_id, float duty)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
    if (motor_id < 1 || motor_id > 4) return;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d045      	beq.n	8000862 <DC_Motor_SetDuty+0x9e>
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d842      	bhi.n	8000862 <DC_Motor_SetDuty+0x9e>

    if (duty < 0) duty = 0;
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	6838      	ldr	r0, [r7, #0]
 80007e2:	f7ff ff71 	bl	80006c8 <__aeabi_fcmplt>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <DC_Motor_SetDuty+0x2e>
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
    if (duty > 100) duty = 100;
 80007f2:	491e      	ldr	r1, [pc, #120]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f7ff ff85 	bl	8000704 <__aeabi_fcmpgt>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <DC_Motor_SetDuty+0x40>
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 8000802:	603b      	str	r3, [r7, #0]

    // ARR = 9 → période PWM = 10 ticks (0..9)
    uint32_t pulse = (uint32_t)((duty * 10) / 100);
 8000804:	491a      	ldr	r1, [pc, #104]	@ (8000870 <DC_Motor_SetDuty+0xac>)
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	f7ff fdc0 	bl	800038c <__aeabi_fmul>
 800080c:	4603      	mov	r3, r0
 800080e:	4917      	ldr	r1, [pc, #92]	@ (800086c <DC_Motor_SetDuty+0xa8>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fe6f 	bl	80004f4 <__aeabi_fdiv>
 8000816:	4603      	mov	r3, r0
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff7d 	bl	8000718 <__aeabi_f2uiz>
 800081e:	4603      	mov	r3, r0
 8000820:	60fb      	str	r3, [r7, #12]

    switch (motor_id) {
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3b01      	subs	r3, #1
 8000826:	2b03      	cmp	r3, #3
 8000828:	d81c      	bhi.n	8000864 <DC_Motor_SetDuty+0xa0>
 800082a:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <DC_Motor_SetDuty+0x6c>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000841 	.word	0x08000841
 8000834:	08000849 	.word	0x08000849
 8000838:	08000853 	.word	0x08000853
 800083c:	0800085b 	.word	0x0800085b
        case 1: TIM1->CCR1 = pulse; break;
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <DC_Motor_SetDuty+0xb0>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6353      	str	r3, [r2, #52]	@ 0x34
 8000846:	e00d      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 2: TIM2->CCR3 = pulse; break;
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000850:	e008      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 3: TIM3->CCR1 = pulse; break;
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <DC_Motor_SetDuty+0xb4>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6353      	str	r3, [r2, #52]	@ 0x34
 8000858:	e004      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
        case 4: TIM4->CCR3 = pulse; break;
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <DC_Motor_SetDuty+0xb8>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000860:	e000      	b.n	8000864 <DC_Motor_SetDuty+0xa0>
    if (motor_id < 1 || motor_id > 4) return;
 8000862:	bf00      	nop
    }
}
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	42c80000 	.word	0x42c80000
 8000870:	41200000 	.word	0x41200000
 8000874:	40012c00 	.word	0x40012c00
 8000878:	40000400 	.word	0x40000400
 800087c:	40000800 	.word	0x40000800

08000880 <DC_Motor_RampTick>:

    DC_Motor_SetDuty(motor_id, start);
}

void DC_Motor_RampTick(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	e07c      	b.n	8000986 <DC_Motor_RampTick+0x106>
        Ramp_t *r = &ramps[i];
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4a40      	ldr	r2, [pc, #256]	@ (8000998 <DC_Motor_RampTick+0x118>)
 8000898:	4413      	add	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
        if (!r->active) continue;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	7d1b      	ldrb	r3, [r3, #20]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d06c      	beq.n	800097e <DC_Motor_RampTick+0xfe>

        r->counter_ms++;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	611a      	str	r2, [r3, #16]
        if (r->counter_ms >= r->interval_ms) {
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d362      	bcc.n	8000980 <DC_Motor_RampTick+0x100>
            r->counter_ms = 0;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]

            if (r->current_duty < r->target_duty) {
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f7ff fefc 	bl	80006c8 <__aeabi_fcmplt>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01b      	beq.n	800090e <DC_Motor_RampTick+0x8e>
                r->current_duty += r->step;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4619      	mov	r1, r3
 80008e0:	4610      	mov	r0, r2
 80008e2:	f7ff fc4b 	bl	800017c <__addsf3>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	601a      	str	r2, [r3, #0]
                if (r->current_duty > r->target_duty)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff ff03 	bl	8000704 <__aeabi_fcmpgt>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d031      	beq.n	8000968 <DC_Motor_RampTick+0xe8>
                    r->current_duty = r->target_duty;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e02c      	b.n	8000968 <DC_Motor_RampTick+0xe8>
            }
            else if (r->current_duty > r->target_duty) {
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4619      	mov	r1, r3
 8000918:	4610      	mov	r0, r2
 800091a:	f7ff fef3 	bl	8000704 <__aeabi_fcmpgt>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01b      	beq.n	800095c <DC_Motor_RampTick+0xdc>
                r->current_duty -= r->step;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc22 	bl	8000178 <__aeabi_fsub>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
                if (r->current_duty < r->target_duty)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4619      	mov	r1, r3
 8000946:	4610      	mov	r0, r2
 8000948:	f7ff febe 	bl	80006c8 <__aeabi_fcmplt>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00a      	beq.n	8000968 <DC_Motor_RampTick+0xe8>
                    r->current_duty = r->target_duty;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e005      	b.n	8000968 <DC_Motor_RampTick+0xe8>
            }
            else {
                r->active = 0; // fin rampe
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	751a      	strb	r2, [r3, #20]
                flags.RAMPE_EN_COURS = false;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <DC_Motor_RampTick+0x11c>)
 8000964:	2200      	movs	r2, #0
 8000966:	72da      	strb	r2, [r3, #11]
            }

            DC_Motor_SetDuty(i + 1, r->current_duty);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3301      	adds	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f7ff ff24 	bl	80007c4 <DC_Motor_SetDuty>
 800097c:	e000      	b.n	8000980 <DC_Motor_RampTick+0x100>
        if (!r->active) continue;
 800097e:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b03      	cmp	r3, #3
 800098a:	f77f af7f 	ble.w	800088c <DC_Motor_RampTick+0xc>
        }
    }
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000190 	.word	0x20000190
 800099c:	200003f8 	.word	0x200003f8

080009a0 <BLE_SendCommand>:

#define huart_BLE huart1
extern UART_HandleTypeDef huart_BLE;

// Fonction d'envoi générique
void BLE_SendCommand(const char* cmd) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fbd9 	bl	8000160 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <BLE_SendCommand+0x28>)
 80009ba:	f003 fa78 	bl	8003eae <HAL_UART_Transmit>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000324 	.word	0x20000324

080009cc <BLE_SendTrame>:

void BLE_SendTrame(const uint8_t* cmd) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, cmd, strlen((const char*)cmd), HAL_MAX_DELAY);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fbc3 	bl	8000160 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <BLE_SendTrame+0x28>)
 80009e6:	f003 fa62 	bl	8003eae <HAL_UART_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000324 	.word	0x20000324

080009f8 <BLE_AT>:

// Test AT
void BLE_AT(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT\r\n");
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <BLE_AT+0x10>)
 80009fe:	f7ff ffcf 	bl	80009a0 <BLE_SendCommand>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08006014 	.word	0x08006014

08000a0c <BLE_Reset>:

// Redémarrage du module
void BLE_Reset(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESET\r\n");
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <BLE_Reset+0x10>)
 8000a12:	f7ff ffc5 	bl	80009a0 <BLE_SendCommand>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	0800601c 	.word	0x0800601c

08000a20 <BLE_RestoreDefaults>:

// Restauration usine
void BLE_RestoreDefaults(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESTORE\r\n");
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <BLE_RestoreDefaults+0x10>)
 8000a26:	f7ff ffbb 	bl	80009a0 <BLE_SendCommand>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	08006028 	.word	0x08006028

08000a34 <BLE_ReadVersion>:

// Lire version du firmware
void BLE_ReadVersion(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+VER\r\n");
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <BLE_ReadVersion+0x10>)
 8000a3a:	f7ff ffb1 	bl	80009a0 <BLE_SendCommand>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	08006038 	.word	0x08006038

08000a48 <BLE_ReadName>:

// Lire nom BLE
void BLE_ReadName(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLENAME\r\n");
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <BLE_ReadName+0x10>)
 8000a4e:	f7ff ffa7 	bl	80009a0 <BLE_SendCommand>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08006044 	.word	0x08006044

08000a5c <BLE_SetName>:

// Définir nom BLE
void BLE_SetName(const char* name) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b092      	sub	sp, #72	@ 0x48
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLENAME=%s\r\n", name);
 8000a64:	f107 0008 	add.w	r0, r7, #8
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <BLE_SetName+0x28>)
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	f004 f983 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff92 	bl	80009a0 <BLE_SendCommand>
}
 8000a7c:	bf00      	nop
 8000a7e:	3748      	adds	r7, #72	@ 0x48
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08006054 	.word	0x08006054

08000a88 <BLE_ReadMAC>:

// Lire l’adresse MAC BLE
void BLE_ReadMAC(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLEMAC\r\n");
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <BLE_ReadMAC+0x10>)
 8000a8e:	f7ff ff87 	bl	80009a0 <BLE_SendCommand>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08006064 	.word	0x08006064

08000a9c <BLE_ReadRole>:

// Lire le rôle actuel
void BLE_ReadRole(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ROLE\r\n");
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <BLE_ReadRole+0x10>)
 8000aa2:	f7ff ff7d 	bl	80009a0 <BLE_SendCommand>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08006070 	.word	0x08006070

08000ab0 <BLE_SetRole>:

// Définir rôle (0 = slave, 1 = master)
void BLE_SetRole(uint8_t role) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ROLE=%d\r\n", (char)role);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f107 0008 	add.w	r0, r7, #8
 8000ac0:	4a06      	ldr	r2, [pc, #24]	@ (8000adc <BLE_SetRole+0x2c>)
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	f004 f958 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff67 	bl	80009a0 <BLE_SendCommand>
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	0800607c 	.word	0x0800607c

08000ae0 <BLE_SetPIN>:

// Définir mot de passe
void BLE_SetPIN(const char* pin6digits) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+PIN=%s\r\n", pin6digits);
 8000ae8:	f107 0008 	add.w	r0, r7, #8
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <BLE_SetPIN+0x28>)
 8000af0:	2120      	movs	r1, #32
 8000af2:	f004 f941 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff50 	bl	80009a0 <BLE_SendCommand>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	@ 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0800608c 	.word	0x0800608c

08000b0c <BLE_SetSecurity>:

// Définir le niveau de sécurité
void BLE_SetSecurity(uint8_t level) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SECURITY=%d\r\n", (char)level);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f107 0008 	add.w	r0, r7, #8
 8000b1c:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <BLE_SetSecurity+0x2c>)
 8000b1e:	2120      	movs	r1, #32
 8000b20:	f004 f92a 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff39 	bl	80009a0 <BLE_SendCommand>
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08006098 	.word	0x08006098

08000b3c <BLE_ReadSecurity>:

// Lire niveau de sécurité
void BLE_ReadSecurity(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SECURITY\r\n");
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <BLE_ReadSecurity+0x10>)
 8000b42:	f7ff ff2d 	bl	80009a0 <BLE_SendCommand>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	080060ac 	.word	0x080060ac

08000b50 <BLE_ReadPIN>:

// Lire PIN actuel
void BLE_ReadPIN(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+PIN\r\n");
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <BLE_ReadPIN+0x10>)
 8000b56:	f7ff ff23 	bl	80009a0 <BLE_SendCommand>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	080060bc 	.word	0x080060bc

08000b64 <BLE_EnterATMode>:

// Passer en mode AT
void BLE_EnterATMode(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>9\r\n");
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <BLE_EnterATMode+0x10>)
 8000b6a:	f7ff ff19 	bl	80009a0 <BLE_SendCommand>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	080060c8 	.word	0x080060c8

08000b78 <BLE_EnterBLEMode>:

// Revenir au mode BLE
void BLE_EnterBLEMode(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>8\r\n");
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <BLE_EnterBLEMode+0x10>)
 8000b7e:	f7ff ff0f 	bl	80009a0 <BLE_SendCommand>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	080060d0 	.word	0x080060d0

08000b8c <BLE_SetLog>:

// Activer/désactiver le log
void BLE_SetLog(uint8_t enable) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LOG=%d\r\n", (char)enable);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f107 0008 	add.w	r0, r7, #8
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <BLE_SetLog+0x2c>)
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	f004 f8ea 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fef9 	bl	80009a0 <BLE_SendCommand>
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	080060d8 	.word	0x080060d8

08000bbc <BLE_ReadLog>:

// Lire état du log
void BLE_ReadLog(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LOG\r\n");
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <BLE_ReadLog+0x10>)
 8000bc2:	f7ff feed 	bl	80009a0 <BLE_SendCommand>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	080060e4 	.word	0x080060e4

08000bd0 <BLE_SetLED>:

// Réglage LED d’état
void BLE_SetLED(uint8_t mode) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LED=%d\r\n", (char)mode);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f107 0008 	add.w	r0, r7, #8
 8000be0:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <BLE_SetLED+0x2c>)
 8000be2:	2120      	movs	r1, #32
 8000be4:	f004 f8c8 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fed7 	bl	80009a0 <BLE_SendCommand>
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	@ 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	080060f0 	.word	0x080060f0

08000c00 <BLE_ReadLED>:

// Lire mode LED
void BLE_ReadLED(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LED\r\n");
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <BLE_ReadLED+0x10>)
 8000c06:	f7ff fecb 	bl	80009a0 <BLE_SendCommand>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	080060fc 	.word	0x080060fc

08000c14 <BLE_SetRFPower>:

// Définir puissance d’émission (0 à 9)
void BLE_SetRFPower(uint8_t level) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+RFPWR=%d\r\n", (char)level);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f107 0008 	add.w	r0, r7, #8
 8000c24:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <BLE_SetRFPower+0x2c>)
 8000c26:	2120      	movs	r1, #32
 8000c28:	f004 f8a6 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff feb5 	bl	80009a0 <BLE_SendCommand>
}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08006108 	.word	0x08006108

08000c44 <BLE_ReadUUID>:

// Lire UUID
void BLE_ReadUUID(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+UUID\r\n");
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <BLE_ReadUUID+0x10>)
 8000c4a:	f7ff fea9 	bl	80009a0 <BLE_SendCommand>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08006118 	.word	0x08006118

08000c58 <BLE_SetUUID>:

// Modifier UUID d’un service ou caractéristique
void BLE_SetUUID(uint8_t index, const char* uuid) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0a4      	sub	sp, #144	@ 0x90
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+UUID=%d,%s\r\n", (char)index, (char)uuid);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	f107 0008 	add.w	r0, r7, #8
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <BLE_SetUUID+0x38>)
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	f004 f880 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe8f 	bl	80009a0 <BLE_SendCommand>
    BLE_Reset();  // UUID settings require reboot
 8000c82:	f7ff fec3 	bl	8000a0c <BLE_Reset>
}
 8000c86:	bf00      	nop
 8000c88:	3788      	adds	r7, #136	@ 0x88
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08006124 	.word	0x08006124

08000c94 <BLE_ReadAdvData>:

// Lire données du paquet de broadcast
void BLE_ReadAdvData(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVDATA\r\n");
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <BLE_ReadAdvData+0x10>)
 8000c9a:	f7ff fe81 	bl	80009a0 <BLE_SendCommand>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08006134 	.word	0x08006134

08000ca8 <BLE_SetAdvData>:

// Définir données broadcast personnalisées
void BLE_SetAdvData(const char* adv_data_hex) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0a2      	sub	sp, #136	@ 0x88
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+ADVDATA=%s\r\n", adv_data_hex);
 8000cb0:	f107 0008 	add.w	r0, r7, #8
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <BLE_SetAdvData+0x28>)
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	f004 f85d 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe6c 	bl	80009a0 <BLE_SendCommand>
}
 8000cc8:	bf00      	nop
 8000cca:	3788      	adds	r7, #136	@ 0x88
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	08006144 	.word	0x08006144

08000cd4 <BLE_ReadAdvInterval>:

// Lire intervalle broadcast
void BLE_ReadAdvInterval(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVPARAM\r\n");
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <BLE_ReadAdvInterval+0x10>)
 8000cda:	f7ff fe61 	bl	80009a0 <BLE_SendCommand>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08006154 	.word	0x08006154

08000ce8 <BLE_SetAdvInterval>:

// Définir intervalle broadcast (10~4000 ms)
void BLE_SetAdvInterval(uint16_t interval_ms) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b092      	sub	sp, #72	@ 0x48
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+ADVPARAM=%d\r\n", (char)interval_ms);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f107 0008 	add.w	r0, r7, #8
 8000cfa:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <BLE_SetAdvInterval+0x2c>)
 8000cfc:	2140      	movs	r1, #64	@ 0x40
 8000cfe:	f004 f83b 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe4a 	bl	80009a0 <BLE_SendCommand>
}
 8000d0c:	bf00      	nop
 8000d0e:	3748      	adds	r7, #72	@ 0x48
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	08006164 	.word	0x08006164

08000d18 <BLE_SetBroadcast>:

// Activer/désactiver le broadcast
void BLE_SetBroadcast(uint8_t enable) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ADV=%d\r\n", (char)enable);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f107 0008 	add.w	r0, r7, #8
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <BLE_SetBroadcast+0x2c>)
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	f004 f824 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe33 	bl	80009a0 <BLE_SendCommand>
}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	@ 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08006178 	.word	0x08006178

08000d48 <BLE_SetLowPowerMode>:

// Activer ou désactiver le mode low power
void BLE_SetLowPowerMode(uint8_t enable) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LPM=%d\r\n", (char)enable);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f107 0008 	add.w	r0, r7, #8
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <BLE_SetLowPowerMode+0x2c>)
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	f004 f80c 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe1b 	bl	80009a0 <BLE_SendCommand>
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	@ 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08006184 	.word	0x08006184

08000d78 <BLE_ReadLowPowerMode>:

// Lire état low power
void BLE_ReadLowPowerMode(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LPM\r\n");
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <BLE_ReadLowPowerMode+0x10>)
 8000d7e:	f7ff fe0f 	bl	80009a0 <BLE_SendCommand>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08006190 	.word	0x08006190

08000d8c <BLE_ConnectTo>:
void BLE_Scan(void) {
    BLE_SendCommand("AT+SCAN=1\r\n");
}

// Connexion à un périphérique BLE (master mode)
void BLE_ConnectTo(const char* mac_addr) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b092      	sub	sp, #72	@ 0x48
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+CONN=%s\r\n", mac_addr);
 8000d94:	f107 0008 	add.w	r0, r7, #8
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <BLE_ConnectTo+0x28>)
 8000d9c:	2140      	movs	r1, #64	@ 0x40
 8000d9e:	f003 ffeb 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fdfa 	bl	80009a0 <BLE_SendCommand>
}
 8000dac:	bf00      	nop
 8000dae:	3748      	adds	r7, #72	@ 0x48
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	080061a8 	.word	0x080061a8

08000db8 <BLE_Disconnect>:

// Déconnexion (nécessite d’abord AT>9)
void BLE_Disconnect(uint8_t mode) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+DISC=%d\r\n", (char)mode);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f107 0008 	add.w	r0, r7, #8
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <BLE_Disconnect+0x2c>)
 8000dca:	2120      	movs	r1, #32
 8000dcc:	f003 ffd4 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fde3 	bl	80009a0 <BLE_SendCommand>
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	080061b8 	.word	0x080061b8

08000de8 <BLE_Sleep>:

// Mise en veille (soft shutdown)
void BLE_Sleep(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SLEEP\r\n");
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <BLE_Sleep+0x10>)
 8000dee:	f7ff fdd7 	bl	80009a0 <BLE_SendCommand>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	080061c8 	.word	0x080061c8

08000dfc <BLE_ReadBaudrate>:
// Lire le baudrate
void BLE_ReadBaudrate(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BAUD\r\n");
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <BLE_ReadBaudrate+0x10>)
 8000e02:	f7ff fdcd 	bl	80009a0 <BLE_SendCommand>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	080061d4 	.word	0x080061d4

08000e10 <BLE_SetBaudrate>:

// Définir le baudrate (ex: 9600, 115200, etc.)
void BLE_SetBaudrate(uint32_t baudrate) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+BAUD=%lu\r\n", (char)baudrate);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f107 0008 	add.w	r0, r7, #8
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <BLE_SetBaudrate+0x2c>)
 8000e22:	2120      	movs	r1, #32
 8000e24:	f003 ffa8 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fdb7 	bl	80009a0 <BLE_SendCommand>
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080061e0 	.word	0x080061e0

08000e40 <BLE_ReadMode>:

// Lire le mode (0 = BLE / 1 = BLE&SPP)
void BLE_ReadMode(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+MODE\r\n");
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <BLE_ReadMode+0x10>)
 8000e46:	f7ff fdab 	bl	80009a0 <BLE_SendCommand>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	080061f0 	.word	0x080061f0

08000e54 <BLE_SetMode>:

// Définir le mode BLE ou BLE+SPP
void BLE_SetMode(uint8_t mode) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+MODE=%d\r\n", (char)mode);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f107 0008 	add.w	r0, r7, #8
 8000e64:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <BLE_SetMode+0x2c>)
 8000e66:	2120      	movs	r1, #32
 8000e68:	f003 ff86 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd95 	bl	80009a0 <BLE_SendCommand>
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	080061fc 	.word	0x080061fc

08000e84 <BLE_ReadSPPName>:

// Lire nom SPP
void BLE_ReadSPPName(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPNAME\r\n");
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <BLE_ReadSPPName+0x10>)
 8000e8a:	f7ff fd89 	bl	80009a0 <BLE_SendCommand>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	0800620c 	.word	0x0800620c

08000e98 <BLE_SetSPPName>:

// Définir nom SPP
void BLE_SetSPPName(const char* name) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b092      	sub	sp, #72	@ 0x48
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPNAME=%s\r\n", name);
 8000ea0:	f107 0008 	add.w	r0, r7, #8
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <BLE_SetSPPName+0x28>)
 8000ea8:	2140      	movs	r1, #64	@ 0x40
 8000eaa:	f003 ff65 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fd74 	bl	80009a0 <BLE_SendCommand>
}
 8000eb8:	bf00      	nop
 8000eba:	3748      	adds	r7, #72	@ 0x48
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	0800621c 	.word	0x0800621c

08000ec4 <BLE_ReadSPPMAC>:

// Lire MAC SPP
void BLE_ReadSPPMAC(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPMAC\r\n");
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <BLE_ReadSPPMAC+0x10>)
 8000eca:	f7ff fd69 	bl	80009a0 <BLE_SendCommand>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	0800622c 	.word	0x0800622c

08000ed8 <BLE_SetBLEMAC>:

// Définir MAC BLE
void BLE_SetBLEMAC(const char* mac12) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b092      	sub	sp, #72	@ 0x48
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLEMAC=%s\r\n", mac12);
 8000ee0:	f107 0008 	add.w	r0, r7, #8
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <BLE_SetBLEMAC+0x28>)
 8000ee8:	2140      	movs	r1, #64	@ 0x40
 8000eea:	f003 ff45 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fd54 	bl	80009a0 <BLE_SendCommand>
}
 8000ef8:	bf00      	nop
 8000efa:	3748      	adds	r7, #72	@ 0x48
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	08006238 	.word	0x08006238

08000f04 <BLE_SetSPPMAC>:

// Définir MAC SPP
void BLE_SetSPPMAC(const char* mac12) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b092      	sub	sp, #72	@ 0x48
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPMAC=%s\r\n", mac12);
 8000f0c:	f107 0008 	add.w	r0, r7, #8
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <BLE_SetSPPMAC+0x28>)
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	f003 ff2f 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fd3e 	bl	80009a0 <BLE_SendCommand>
}
 8000f24:	bf00      	nop
 8000f26:	3748      	adds	r7, #72	@ 0x48
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08006248 	.word	0x08006248

08000f30 <BLE_SetTargetUUID>:

// Définir UUID cible pour connexion (client mode)
void BLE_SetTargetUUID(const char* uuid) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a2      	sub	sp, #136	@ 0x88
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TARGETUUID=%s\r\n", uuid);
 8000f38:	f107 0008 	add.w	r0, r7, #8
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <BLE_SetTargetUUID+0x28>)
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	f003 ff19 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fd28 	bl	80009a0 <BLE_SendCommand>
}
 8000f50:	bf00      	nop
 8000f52:	3788      	adds	r7, #136	@ 0x88
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08006258 	.word	0x08006258

08000f5c <BLE_ScanStart>:

// Scanner les périphériques BLE
void BLE_ScanStart(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SCAN=1\r\n");
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <BLE_ScanStart+0x10>)
 8000f62:	f7ff fd1d 	bl	80009a0 <BLE_SendCommand>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0800619c 	.word	0x0800619c

08000f70 <BLE_SetScanLimits>:

// Configurer paramètres de scan (nombre, timeout)
void BLE_SetScanLimits(uint8_t count, uint8_t timeout_sec) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SCANM=%d,%d\r\n", (char)count, (char)timeout_sec);
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	f107 0008 	add.w	r0, r7, #8
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <BLE_SetScanLimits+0x38>)
 8000f8e:	2120      	movs	r1, #32
 8000f90:	f003 fef2 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fd01 	bl	80009a0 <BLE_SendCommand>
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	0800626c 	.word	0x0800626c

08000fac <BLE_SetScanParams>:

// Configurer scan params (mode, interval, window)
void BLE_SetScanParams(uint8_t active, uint8_t interval, uint8_t window) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	717b      	strb	r3, [r7, #5]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SCANPARAM=%d,%d,%d\r\n", (char)active, (char)interval, (char)window);
 8000fbe:	79f9      	ldrb	r1, [r7, #7]
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	797a      	ldrb	r2, [r7, #5]
 8000fc4:	f107 0008 	add.w	r0, r7, #8
 8000fc8:	9201      	str	r2, [sp, #4]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <BLE_SetScanParams+0x3c>)
 8000fd0:	2140      	movs	r1, #64	@ 0x40
 8000fd2:	f003 fed1 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fce0 	bl	80009a0 <BLE_SendCommand>
}
 8000fe0:	bf00      	nop
 8000fe2:	3748      	adds	r7, #72	@ 0x48
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08006280 	.word	0x08006280

08000fec <BLE_ClearBindings>:

// Effacer les liaisons enregistrées
void BLE_ClearBindings(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+CLRBIND\r\n");
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <BLE_ClearBindings+0x10>)
 8000ff2:	f7ff fcd5 	bl	80009a0 <BLE_SendCommand>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08006298 	.word	0x08006298

08001000 <BLE_SetAutoConnect>:

// Configurer auto-connexion (client mode uniquement)
void BLE_SetAutoConnect(const char* mac) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b092      	sub	sp, #72	@ 0x48
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SERVER=%s\r\n", mac);
 8001008:	f107 0008 	add.w	r0, r7, #8
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a07      	ldr	r2, [pc, #28]	@ (800102c <BLE_SetAutoConnect+0x2c>)
 8001010:	2140      	movs	r1, #64	@ 0x40
 8001012:	f003 feb1 	bl	8004d78 <sniprintf>
    BLE_SendCommand(cmd);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fcc0 	bl	80009a0 <BLE_SendCommand>
    BLE_Reset();  // Reboot pour appliquer
 8001020:	f7ff fcf4 	bl	8000a0c <BLE_Reset>
}
 8001024:	bf00      	nop
 8001026:	3748      	adds	r7, #72	@ 0x48
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	080062a8 	.word	0x080062a8

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 ffca 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f830 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 fa50 	bl	80014e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001040:	f000 f89a 	bl	8001178 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001044:	f000 f91a 	bl	800127c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001048:	f000 f970 	bl	800132c <MX_TIM3_Init>
  MX_TIM4_Init();
 800104c:	f000 f9c6 	bl	80013dc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001050:	f000 fa1c 	bl	800148c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001054:	f000 f874 	bl	8001140 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <main+0x60>)
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <main+0x64>)
 800105e:	f002 ffb1 	bl	8003fc4 <HAL_UART_Receive_IT>
  // chaque caractère va être écrit dans le buff et une interruption sera envoyée à HAL_UART_RxCpltCallback

  //Config du module BLE
  config_BLE_drone();
 8001062:	f000 fb91 	bl	8001788 <config_BLE_drone>
  //Config moteurs
  DC_Motor_Init();
 8001066:	f7ff fb77 	bl	8000758 <DC_Motor_Init>

  DC_Motor_SetDuty(1, 15);	//debug
 800106a:	490b      	ldr	r1, [pc, #44]	@ (8001098 <main+0x68>)
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fba9 	bl	80007c4 <DC_Motor_SetDuty>
  DC_Motor_SetDuty(2, 15);
 8001072:	4909      	ldr	r1, [pc, #36]	@ (8001098 <main+0x68>)
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff fba5 	bl	80007c4 <DC_Motor_SetDuty>
  DC_Motor_SetDuty(3, 15);
 800107a:	4907      	ldr	r1, [pc, #28]	@ (8001098 <main+0x68>)
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff fba1 	bl	80007c4 <DC_Motor_SetDuty>
  DC_Motor_SetDuty(4, 15);
 8001082:	4905      	ldr	r1, [pc, #20]	@ (8001098 <main+0x68>)
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff fb9d 	bl	80007c4 <DC_Motor_SetDuty>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <main+0x5a>
 800108e:	bf00      	nop
 8001090:	2000036c 	.word	0x2000036c
 8001094:	20000324 	.word	0x20000324
 8001098:	41700000 	.word	0x41700000

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a6:	2228      	movs	r2, #40	@ 0x28
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fedd 	bl	8004e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010cc:	2309      	movs	r3, #9
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fb48 	bl	8002778 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80010ee:	f000 fa81 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fdb5 	bl	8002c7c <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001118:	f000 fa6c 	bl	80015f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	2301      	movs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f001 ff35 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001134:	f000 fa5e 	bl	80015f4 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	@ 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_RTC_Init+0x30>)
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <MX_RTC_Init+0x34>)
 8001148:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_RTC_Init+0x30>)
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_RTC_Init+0x30>)
 8001154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001158:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_RTC_Init+0x30>)
 800115c:	f002 f888 	bl	8003270 <HAL_RTC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001166:	f000 fa45 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001f0 	.word	0x200001f0
 8001174:	40002800 	.word	0x40002800

08001178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b092      	sub	sp, #72	@ 0x48
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2220      	movs	r2, #32
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fe61 	bl	8004e6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011aa:	4a33      	ldr	r2, [pc, #204]	@ (8001278 <MX_TIM1_Init+0x100>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80011ae:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011b0:	2213      	movs	r2, #19
 80011b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80011ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011bc:	2209      	movs	r2, #9
 80011be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d2:	4828      	ldr	r0, [pc, #160]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011d4:	f002 f99e 	bl	8003514 <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011de:	f000 fa09 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ee:	4619      	mov	r1, r3
 80011f0:	4820      	ldr	r0, [pc, #128]	@ (8001274 <MX_TIM1_Init+0xfc>)
 80011f2:	f002 fd5d 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80011fc:	f000 f9fa 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	@ 0x60
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <MX_TIM1_Init+0xfc>)
 8001226:	f002 fa67 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001230:	f000 f9e0 	bl	80015f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <MX_TIM1_Init+0xfc>)
 8001258:	f002 fd88 	bl	8003d6c <HAL_TIMEx_ConfigBreakDeadTime>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001262:	f000 f9c7 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <MX_TIM1_Init+0xfc>)
 8001268:	f000 fc98 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3748      	adds	r7, #72	@ 0x48
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000204 	.word	0x20000204
 8001278:	40012c00 	.word	0x40012c00

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012a8:	2213      	movs	r2, #19
 80012aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012b4:	2209      	movs	r2, #9
 80012b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012c6:	f002 f925 	bl	8003514 <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012d0:	f000 f990 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012e4:	f002 fce4 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80012ee:	f000 f981 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2208      	movs	r2, #8
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM2_Init+0xac>)
 800130a:	f002 f9f5 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001314:	f000 f96e 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM2_Init+0xac>)
 800131a:	f000 fc3f 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000024c 	.word	0x2000024c

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <MX_TIM3_Init+0xac>)
 8001352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001356:	2213      	movs	r2, #19
 8001358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001360:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001362:	2209      	movs	r2, #9
 8001364:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001374:	f002 f8ce 	bl	8003514 <HAL_TIM_PWM_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800137e:	f000 f939 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 8001392:	f002 fc8d 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800139c:	f000 f92a 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a0:	2360      	movs	r3, #96	@ 0x60
 80013a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 80013b8:	f002 f99e 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013c2:	f000 f917 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013c6:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM3_Init+0xa8>)
 80013c8:	f000 fbe8 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000294 	.word	0x20000294
 80013d8:	40000400 	.word	0x40000400

080013dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001400:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <MX_TIM4_Init+0xac>)
 8001402:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001406:	2213      	movs	r2, #19
 8001408:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_TIM4_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001412:	2209      	movs	r2, #9
 8001414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM4_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001424:	f002 f876 	bl	8003514 <HAL_TIM_PWM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800142e:	f000 f8e1 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4619      	mov	r1, r3
 8001440:	4810      	ldr	r0, [pc, #64]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001442:	f002 fc35 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800144c:	f000 f8d2 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	@ 0x60
 8001452:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2208      	movs	r2, #8
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001468:	f002 f946 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001472:	f000 f8bf 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001476:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM4_Init+0xa8>)
 8001478:	f000 fb90 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	@ 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002dc 	.word	0x200002dc
 8001488:	40000800 	.word	0x40000800

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_USART1_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f002 fca3 	bl	8003e0e <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f891 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000324 	.word	0x20000324
 80014dc:	40013800 	.word	0x40013800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_GPIO_Init+0x58>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_GPIO_Init+0x58>)
 80014ec:	f043 0320 	orr.w	r3, r3, #32
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <MX_GPIO_Init+0x58>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <MX_GPIO_Init+0x58>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <MX_GPIO_Init+0x58>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <MX_GPIO_Init+0x58>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <MX_GPIO_Init+0x58>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <MX_GPIO_Init+0x58>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <MX_GPIO_Init+0x58>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

////////////////////////////////////////////////////////////////// CODE RX

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <HAL_UART_RxCpltCallback+0x9c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d13f      	bne.n	80015ce <HAL_UART_RxCpltCallback+0x92>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_UART_RxCpltCallback+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b3e      	cmp	r3, #62	@ 0x3e
 8001554:	d81e      	bhi.n	8001594 <HAL_UART_RxCpltCallback+0x58>
        	if(debut_de_trame){						//debug
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_UART_RxCpltCallback+0xa4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_UART_RxCpltCallback+0x34>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_UART_RxCpltCallback+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	491d      	ldr	r1, [pc, #116]	@ (80015dc <HAL_UART_RxCpltCallback+0xa0>)
 8001566:	600a      	str	r2, [r1, #0]
 8001568:	4a1e      	ldr	r2, [pc, #120]	@ (80015e4 <HAL_UART_RxCpltCallback+0xa8>)
 800156a:	7811      	ldrb	r1, [r2, #0]
 800156c:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_UART_RxCpltCallback+0xac>)
 800156e:	54d1      	strb	r1, [r2, r3]
        	}
            if((char)rx_it_buffer == '\n'){
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_UART_RxCpltCallback+0xa8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d10d      	bne.n	8001594 <HAL_UART_RxCpltCallback+0x58>
            	if (!debut_de_trame){
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_UART_RxCpltCallback+0xa4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_UART_RxCpltCallback+0x52>
            		debut_de_trame = true;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_UART_RxCpltCallback+0xa4>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e002      	b.n	8001594 <HAL_UART_RxCpltCallback+0x58>
            	}
            	else{
            		fin_de_trame = true;
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_UART_RxCpltCallback+0xb0>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_UART_RxCpltCallback+0xb0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_UART_RxCpltCallback+0x88>
        	process_trame_rx(receive_buffer);  // traite la trame
 800159c:	4812      	ldr	r0, [pc, #72]	@ (80015e8 <HAL_UART_RxCpltCallback+0xac>)
 800159e:	f000 f8b3 	bl	8001708 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	2100      	movs	r1, #0
 80015a6:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <HAL_UART_RxCpltCallback+0xac>)
 80015a8:	f003 fc5f 	bl	8004e6a <memset>
            receive_index = 0;              // réinitialise l'index
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_UART_RxCpltCallback+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_UART_RxCpltCallback+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_UART_RxCpltCallback+0xb0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_UART_RxCpltCallback+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
        }
        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	4907      	ldr	r1, [pc, #28]	@ (80015e4 <HAL_UART_RxCpltCallback+0xa8>)
 80015c8:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <HAL_UART_RxCpltCallback+0xb4>)
 80015ca:	f002 fcfb 	bl	8003fc4 <HAL_UART_Receive_IT>
    }
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40013800 	.word	0x40013800
 80015dc:	20000370 	.word	0x20000370
 80015e0:	20000374 	.word	0x20000374
 80015e4:	2000036c 	.word	0x2000036c
 80015e8:	20000378 	.word	0x20000378
 80015ec:	20000375 	.word	0x20000375
 80015f0:	20000324 	.word	0x20000324

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <Error_Handler+0x8>

08001600 <handle_BLE_DISC>:
    {"BLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <handle_BLE_DISC+0x18>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = true;
 800160a:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <handle_BLE_DISC+0x18>)
 800160c:	2201      	movs	r2, #1
 800160e:	721a      	strb	r2, [r3, #8]

}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	200003f8 	.word	0x200003f8

0800161c <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <handle_BLE_CONN+0x18>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = false;
 8001626:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <handle_BLE_CONN+0x18>)
 8001628:	2200      	movs	r2, #0
 800162a:	721a      	strb	r2, [r3, #8]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	200003f8 	.word	0x200003f8

08001638 <handle_OK>:

void handle_OK(void){
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	flags.OK = true;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <handle_OK+0x14>)
 800163e:	2201      	movs	r2, #1
 8001640:	70da      	strb	r2, [r3, #3]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200003f8 	.word	0x200003f8

08001650 <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <handle_ERR_CMD+0x14>)
 8001656:	2201      	movs	r2, #1
 8001658:	711a      	strb	r2, [r3, #4]
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200003f8 	.word	0x200003f8

08001668 <handle_RSTING>:

void handle_RSTING(void){
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <handle_RSTING+0x14>)
 800166e:	2201      	movs	r2, #1
 8001670:	715a      	strb	r2, [r3, #5]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200003f8 	.word	0x200003f8

08001680 <handle_CONNECTING>:
void handle_CONNECTING(void){
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <handle_CONNECTING+0x14>)
 8001686:	2201      	movs	r2, #1
 8001688:	719a      	strb	r2, [r3, #6]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200003f8 	.word	0x200003f8

08001698 <handle_RESTORING>:
void handle_RESTORING(void){
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	flags.RESTORING = true;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <handle_RESTORING+0x14>)
 800169e:	2201      	movs	r2, #1
 80016a0:	71da      	strb	r2, [r3, #7]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200003f8 	.word	0x200003f8

080016b0 <handle_IM_READY>:

void handle_IM_READY(void){
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
	flags.IM_READY = true;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <handle_IM_READY+0x14>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	731a      	strb	r2, [r3, #12]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200003f8 	.word	0x200003f8

080016c8 <handle_UNKNOW_COMMAND>:

void handle_UNKNOW_COMMAND(char* receive_buffer){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	flags.UNKNOW_COMMAND = true;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <handle_UNKNOW_COMMAND+0x20>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	709a      	strb	r2, [r3, #2]
	strcpy(unknow_command,receive_buffer);
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <handle_UNKNOW_COMMAND+0x24>)
 80016da:	f003 fcaa 	bl	8005032 <strcpy>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003f8 	.word	0x200003f8
 80016ec:	200003b8 	.word	0x200003b8

080016f0 <handle_RUN_AS_SERVER>:

void handle_RUN_AS_SERVER(void){
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	flags.RUN_AS_SERVER = true;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <handle_RUN_AS_SERVER+0x14>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	735a      	strb	r2, [r3, #13]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200003f8 	.word	0x200003f8

08001708 <process_trame_rx>:



// fonctions
void process_trame_rx(char* receive_buffer) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d02c      	beq.n	8001772 <process_trame_rx+0x6a>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e017      	b.n	800174e <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <process_trame_rx+0x74>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe fd0f 	bl	800014c <strcmp>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 8001734:	4a11      	ldr	r2, [pc, #68]	@ (800177c <process_trame_rx+0x74>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <process_trame_rx+0x78>)
 8001742:	2200      	movs	r2, #0
 8001744:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 8001746:	e015      	b.n	8001774 <process_trame_rx+0x6c>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b08      	cmp	r3, #8
 8001752:	dde4      	ble.n	800171e <process_trame_rx+0x16>
			}
		}

		if (receive_buffer[0] == '$') {  // comparaison d'un caractère
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b24      	cmp	r3, #36	@ 0x24
 800175a:	d106      	bne.n	800176a <process_trame_rx+0x62>
		    parse_drone_trame_char(receive_buffer);		//écrit dans les buffers adcData_2 et gpioData_2
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f89b 	bl	8001898 <parse_drone_trame_char>
		    process_gpios(gpioData_2);
 8001762:	4808      	ldr	r0, [pc, #32]	@ (8001784 <process_trame_rx+0x7c>)
 8001764:	f000 f91e 	bl	80019a4 <process_gpios>
 8001768:	e004      	b.n	8001774 <process_trame_rx+0x6c>

		}

		else {							//Erreur
			handle_UNKNOW_COMMAND(receive_buffer);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffac 	bl	80016c8 <handle_UNKNOW_COMMAND>
			return;
 8001770:	e000      	b.n	8001774 <process_trame_rx+0x6c>
		return;
 8001772:	bf00      	nop
		}
		}
}
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000c4 	.word	0x200000c4
 8001780:	200003f8 	.word	0x200003f8
 8001784:	20000410 	.word	0x20000410

08001788 <config_BLE_drone>:
//	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
//	BLE.Reset();                 // Redémarre pour appliquer
//	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
//
//}
void config_BLE_drone(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	BLE.RestoreDefaults();
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <config_BLE_drone+0x8c>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4798      	blx	r3
	wait_until_flag(&flags.RESTORING,BLE_TIMEOUT_MS);
 8001792:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001796:	4820      	ldr	r0, [pc, #128]	@ (8001818 <config_BLE_drone+0x90>)
 8001798:	f000 f848 	bl	800182c <wait_until_flag>
	HAL_Delay(500);
 800179c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017a0:	f000 fc76 	bl	8002090 <HAL_Delay>
	BLE.EnterATMode();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <config_BLE_drone+0x8c>)
 80017a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017aa:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80017ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017b0:	481a      	ldr	r0, [pc, #104]	@ (800181c <config_BLE_drone+0x94>)
 80017b2:	f000 f83b 	bl	800182c <wait_until_flag>
	BLE.SetName(NAME);
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <config_BLE_drone+0x8c>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4819      	ldr	r0, [pc, #100]	@ (8001820 <config_BLE_drone+0x98>)
 80017bc:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80017be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c2:	4816      	ldr	r0, [pc, #88]	@ (800181c <config_BLE_drone+0x94>)
 80017c4:	f000 f832 	bl	800182c <wait_until_flag>
	BLE.SetRole(BLE_ROLE);
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <config_BLE_drone+0x8c>)
 80017ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017cc:	2000      	movs	r0, #0
 80017ce:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80017d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017d4:	4811      	ldr	r0, [pc, #68]	@ (800181c <config_BLE_drone+0x94>)
 80017d6:	f000 f829 	bl	800182c <wait_until_flag>
	BLE.SetBLEMAC(BLE_MAC_SERVEUR);
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <config_BLE_drone+0x8c>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017de:	4811      	ldr	r0, [pc, #68]	@ (8001824 <config_BLE_drone+0x9c>)
 80017e0:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80017e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <config_BLE_drone+0x94>)
 80017e8:	f000 f820 	bl	800182c <wait_until_flag>
	BLE.SetSecurity(SECURITY);
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <config_BLE_drone+0x8c>)
 80017ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f0:	2000      	movs	r0, #0
 80017f2:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 80017f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017f8:	4808      	ldr	r0, [pc, #32]	@ (800181c <config_BLE_drone+0x94>)
 80017fa:	f000 f817 	bl	800182c <wait_until_flag>
	BLE.Reset();                 // Redémarre pour appliquer
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <config_BLE_drone+0x8c>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4798      	blx	r3
	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
 8001804:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <config_BLE_drone+0xa0>)
 800180a:	f000 f80f 	bl	800182c <wait_until_flag>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000
 8001818:	200003ff 	.word	0x200003ff
 800181c:	200003fb 	.word	0x200003fb
 8001820:	08006338 	.word	0x08006338
 8001824:	08006344 	.word	0x08006344
 8001828:	200003fd 	.word	0x200003fd

0800182c <wait_until_flag>:

void wait_until_flag(volatile bool* flag, uint32_t timeout_ms) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8001836:	f000 fc21 	bl	800207c <HAL_GetTick>
 800183a:	60f8      	str	r0, [r7, #12]

    while (!(*flag)) {
 800183c:	e00d      	b.n	800185a <wait_until_flag+0x2e>
        if (HAL_GetTick() - start >= timeout_ms) {
 800183e:	f000 fc1d 	bl	800207c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d805      	bhi.n	800185a <wait_until_flag+0x2e>
            flag_timeout_err = true;      // Indique qu'un timeout s’est produit
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <wait_until_flag+0x50>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
            TIMEOUT_ERR_HANDLER();        // Fonction de traitement personnalisée
 8001854:	f000 f814 	bl	8001880 <TIMEOUT_ERR_HANDLER>
            return;                       // Sort de la fonction
 8001858:	e00d      	b.n	8001876 <wait_until_flag+0x4a>
    while (!(*flag)) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e9      	bne.n	800183e <wait_until_flag+0x12>
        }
    }

    *flag = false;                        // Réinitialise le flag une fois traité
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
    flag_timeout_err = false;             // Tout s’est bien passé
 8001870:	4b02      	ldr	r3, [pc, #8]	@ (800187c <wait_until_flag+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
}
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000407 	.word	0x20000407

08001880 <TIMEOUT_ERR_HANDLER>:


void TIMEOUT_ERR_HANDLER(void){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	flags.TIMEOUT_ERR = true;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <TIMEOUT_ERR_HANDLER+0x14>)
 8001886:	2201      	movs	r2, #1
 8001888:	739a      	strb	r2, [r3, #14]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200003f8 	.word	0x200003f8

08001898 <parse_drone_trame_char>:


uint16_t adcData_2[ADC_NUM_CONVERSIONS];
int gpioData_2[GPIO_NUM_CONVERSIONS];

void parse_drone_trame_char(const char* buffer) {
 8001898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189c:	b08b      	sub	sp, #44	@ 0x2c
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	466b      	mov	r3, sp
 80018a4:	461e      	mov	r6, r3
    // Copie de la trame pour traitement (strtok modifie la chaîne)
    char temp[strlen(buffer) + 1];
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fc5a 	bl	8000160 <strlen>
 80018ac:	4603      	mov	r3, r0
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	460b      	mov	r3, r1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	2300      	movs	r3, #0
 80018b8:	4688      	mov	r8, r1
 80018ba:	4699      	mov	r9, r3
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d0:	2300      	movs	r3, #0
 80018d2:	460c      	mov	r4, r1
 80018d4:	461d      	mov	r5, r3
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	00eb      	lsls	r3, r5, #3
 80018e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e4:	00e2      	lsls	r2, r4, #3
 80018e6:	1dcb      	adds	r3, r1, #7
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	ebad 0d03 	sub.w	sp, sp, r3
 80018f0:	466b      	mov	r3, sp
 80018f2:	3300      	adds	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
    strcpy(temp, buffer);
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6938      	ldr	r0, [r7, #16]
 80018fa:	f003 fb9a 	bl	8005032 <strcpy>

    // Recherche du marqueur '$'
    char* start = strchr(temp, '$');
 80018fe:	2124      	movs	r1, #36	@ 0x24
 8001900:	6938      	ldr	r0, [r7, #16]
 8001902:	f003 faba 	bl	8004e7a <strchr>
 8001906:	6278      	str	r0, [r7, #36]	@ 0x24
    if (start == NULL) return;  // Trame invalide
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03c      	beq.n	8001988 <parse_drone_trame_char+0xf0>

    start++; // Avance après le '$'
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24

    // Séparer les ADC et GPIO : ADC sont suivis de '/' ; GPIO sans séparateur
    int adc_index = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    while (adc_index < ADC_NUM_CONVERSIONS) {
 8001918:	e014      	b.n	8001944 <parse_drone_trame_char+0xac>
        char* token = strtok(start, "/");
 800191a:	491e      	ldr	r1, [pc, #120]	@ (8001994 <parse_drone_trame_char+0xfc>)
 800191c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800191e:	f003 fab9 	bl	8004e94 <strtok>
 8001922:	60f8      	str	r0, [r7, #12]
        if (token == NULL) return;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02d      	beq.n	8001986 <parse_drone_trame_char+0xee>
        adcData_2[adc_index++] = (uint16_t)atoi(token);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f003 f8da 	bl	8004ae4 <atoi>
 8001930:	4601      	mov	r1, r0
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	623a      	str	r2, [r7, #32]
 8001938:	b289      	uxth	r1, r1
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <parse_drone_trame_char+0x100>)
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        start = NULL;  // Après le premier appel, strtok utilise NULL
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
    while (adc_index < ADC_NUM_CONVERSIONS) {
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b03      	cmp	r3, #3
 8001948:	dde7      	ble.n	800191a <parse_drone_trame_char+0x82>
    }

    // Ce qu'il reste : les GPIO, un par caractère numérique
    int gpio_index = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    char* token = strtok(NULL, "\r\n");
 800194e:	4913      	ldr	r1, [pc, #76]	@ (800199c <parse_drone_trame_char+0x104>)
 8001950:	2000      	movs	r0, #0
 8001952:	f003 fa9f 	bl	8004e94 <strtok>
 8001956:	61b8      	str	r0, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 8001958:	e00d      	b.n	8001976 <parse_drone_trame_char+0xde>
        gpioData_2[gpio_index++] = token[0] - '0';  // Convertit '1' -> 1
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	61fa      	str	r2, [r7, #28]
 8001966:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <parse_drone_trame_char+0x108>)
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        token++;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	3301      	adds	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <parse_drone_trame_char+0xea>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b04      	cmp	r3, #4
 8001980:	ddeb      	ble.n	800195a <parse_drone_trame_char+0xc2>
 8001982:	46b5      	mov	sp, r6
 8001984:	e001      	b.n	800198a <parse_drone_trame_char+0xf2>
        if (token == NULL) return;
 8001986:	bf00      	nop
    if (start == NULL) return;  // Trame invalide
 8001988:	46b5      	mov	sp, r6
    }
}
 800198a:	372c      	adds	r7, #44	@ 0x2c
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001992:	bf00      	nop
 8001994:	08006354 	.word	0x08006354
 8001998:	20000408 	.word	0x20000408
 800199c:	08006358 	.word	0x08006358
 80019a0:	20000410 	.word	0x20000410

080019a4 <process_gpios>:


////////////////////////////////////////////////////////////////// CODE BUTTONS
SystemButtons buttons = {0};

void process_gpios(int* gpioData){
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if (gpioData[4]){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3310      	adds	r3, #16
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <process_gpios+0x20>
		buttons.EMERGENCY_STOP_BUTTON = true;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <process_gpios+0x88>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	711a      	strb	r2, [r3, #4]
		gpioData[4]=0; //sécurité
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3310      	adds	r3, #16
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[0]){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <process_gpios+0x34>
		buttons.BACK_OFFSET_BUTTON = true;
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <process_gpios+0x88>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	70da      	strb	r2, [r3, #3]
		gpioData[0]=0; //sécurité
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[1]){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <process_gpios+0x4c>
		buttons.LEFT_OFFSET_BUTTON = true;
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <process_gpios+0x88>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		gpioData[1]=0; //sécurité
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[2]){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3308      	adds	r3, #8
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <process_gpios+0x64>
		buttons.FRONT_OFFSET_BUTTON = true;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <process_gpios+0x88>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	709a      	strb	r2, [r3, #2]
		gpioData[2]=0; //sécurité
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3308      	adds	r3, #8
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[3]){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <process_gpios+0x7c>
		buttons.RIGHT_OFFSET_BUTTON = true;
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <process_gpios+0x88>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	705a      	strb	r2, [r3, #1]
		gpioData[3]=0; //sécurité
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	330c      	adds	r3, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	}


}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000424 	.word	0x20000424

08001a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_MspInit+0x60>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_MspInit+0x60>)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000

08001a94 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <HAL_RTC_MspInit+0x4c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001aa6:	f000 fe5b 	bl	8002760 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_RTC_MspInit+0x50>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <HAL_RTC_MspInit+0x50>)
 8001ab0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RTC_MspInit+0x50>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RTC_MspInit+0x54>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2101      	movs	r1, #1
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 fbda 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f000 fbf3 	bl	80022be <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40002800 	.word	0x40002800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	4242043c 	.word	0x4242043c

08001aec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a24      	ldr	r2, [pc, #144]	@ (8001b8c <HAL_TIM_PWM_MspInit+0xa0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10c      	bne.n	8001b18 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b16:	e034      	b.n	8001b82 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b20:	d10c      	bne.n	8001b3c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
}
 8001b3a:	e022      	b.n	8001b82 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <HAL_TIM_PWM_MspInit+0xa8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10c      	bne.n	8001b60 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a11      	ldr	r2, [pc, #68]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	e010      	b.n	8001b82 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <HAL_TIM_PWM_MspInit+0xac>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_TIM_PWM_MspInit+0xa4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8001cac <HAL_TIM_MspPostInit+0x110>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d119      	bne.n	8001bf0 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0318 	add.w	r3, r7, #24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4832      	ldr	r0, [pc, #200]	@ (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001bea:	f000 fc35 	bl	8002458 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bee:	e059      	b.n	8001ca4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf8:	d118      	bne.n	8001c2c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c12:	2304      	movs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4823      	ldr	r0, [pc, #140]	@ (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c26:	f000 fc17 	bl	8002458 <HAL_GPIO_Init>
}
 8001c2a:	e03b      	b.n	8001ca4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <HAL_TIM_MspPostInit+0x11c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d118      	bne.n	8001c68 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c4e:	2340      	movs	r3, #64	@ 0x40
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2302      	movs	r3, #2
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4814      	ldr	r0, [pc, #80]	@ (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c62:	f000 fbf9 	bl	8002458 <HAL_GPIO_Init>
}
 8001c66:	e01d      	b.n	8001ca4 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	@ (8001cbc <HAL_TIM_MspPostInit+0x120>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d118      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2302      	movs	r3, #2
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <HAL_TIM_MspPostInit+0x124>)
 8001ca0:	f000 fbda 	bl	8002458 <HAL_GPIO_Init>
}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800
 8001cc0:	40010c00 	.word	0x40010c00

08001cc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a20      	ldr	r2, [pc, #128]	@ (8001d60 <HAL_UART_MspInit+0x9c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d139      	bne.n	8001d58 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_UART_MspInit+0xa0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	480f      	ldr	r0, [pc, #60]	@ (8001d68 <HAL_UART_MspInit+0xa4>)
 8001d2a:	f000 fb95 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4809      	ldr	r0, [pc, #36]	@ (8001d68 <HAL_UART_MspInit+0xa4>)
 8001d44:	f000 fb88 	bl	8002458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2025      	movs	r0, #37	@ 0x25
 8001d4e:	f000 fa9a 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d52:	2025      	movs	r0, #37	@ 0x25
 8001d54:	f000 fab3 	bl	80022be <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <NMI_Handler+0x4>

08001d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <MemManage_Handler+0x4>

08001d84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 f94c 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  DC_Motor_RampTick();
 8001dc0:	f7fe fd5e 	bl	8000880 <DC_Motor_RampTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <RTC_IRQHandler+0x10>)
 8001dce:	f001 fb58 	bl	8003482 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200001f0 	.word	0x200001f0

08001ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <USART1_IRQHandler+0x10>)
 8001de2:	f002 f915 	bl	8004010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000324 	.word	0x20000324

08001df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_kill>:

int _kill(int pid, int sig)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e08:	f003 f8e6 	bl	8004fd8 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2216      	movs	r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
  return -1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_exit>:

void _exit (int status)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e26:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffe7 	bl	8001dfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <_exit+0x12>

08001e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e00a      	b.n	8001e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e46:	f3af 8000 	nop.w
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf0      	blt.n	8001e46 <_read+0x12>
  }

  return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf1      	blt.n	8001e80 <_write+0x12>
  }
  return len;
 8001e9c:	687b      	ldr	r3, [r7, #4]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_close>:

int _close(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f003 f84e 	bl	8004fd8 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20005000 	.word	0x20005000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	2000042c 	.word	0x2000042c
 8001f70:	20000580 	.word	0x20000580

08001f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f80:	f7ff fff8 	bl	8001f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f86:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f9c:	4c09      	ldr	r4, [pc, #36]	@ (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001faa:	f003 f81b 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff f83f 	bl	8001030 <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001fbc:	0800658c 	.word	0x0800658c
  ldr r2, =_sbss
 8001fc0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001fc4:	20000580 	.word	0x20000580

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_Init+0x28>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	@ (8001ff4 <HAL_Init+0x28>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 f947 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f808 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe8:	f7ff fd22 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_InitTick+0x54>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_InitTick+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f95f 	bl	80022da <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 f927 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <HAL_InitTick+0x5c>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000010c 	.word	0x2000010c
 8002050:	20000114 	.word	0x20000114
 8002054:	20000110 	.word	0x20000110

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_IncTick+0x1c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_IncTick+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a03      	ldr	r2, [pc, #12]	@ (8002078 <HAL_IncTick+0x20>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000114 	.word	0x20000114
 8002078:	20000430 	.word	0x20000430

0800207c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b02      	ldr	r3, [pc, #8]	@ (800208c <HAL_GetTick+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000430 	.word	0x20000430

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fff0 	bl	800207c <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffe0 	bl	800207c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000114 	.word	0x20000114

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4906      	ldr	r1, [pc, #24]	@ (8002170 <__NVIC_EnableIRQ+0x34>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	@ (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	@ (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	@ 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff90 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff2d 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff42 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff90 	bl	80021c8 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5f 	bl	8002174 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff35 	bl	800213c <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d008      	beq.n	800231c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e020      	b.n	800235e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 020e 	bic.w	r2, r2, #14
 800232a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d005      	beq.n	800238c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e051      	b.n	8002430 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 020e 	bic.w	r2, r2, #14
 800239a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <HAL_DMA_Abort_IT+0xd4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d029      	beq.n	800240a <HAL_DMA_Abort_IT+0xa2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <HAL_DMA_Abort_IT+0xd8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Abort_IT+0x9e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <HAL_DMA_Abort_IT+0xdc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01a      	beq.n	8002400 <HAL_DMA_Abort_IT+0x98>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002448 <HAL_DMA_Abort_IT+0xe0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_Abort_IT+0x92>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <HAL_DMA_Abort_IT+0xe4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00a      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x8c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <HAL_DMA_Abort_IT+0xe8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <HAL_DMA_Abort_IT+0x86>
 80023e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023ec:	e00e      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 80023ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f2:	e00b      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 80023f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f8:	e008      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 80023fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fe:	e005      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 8002400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002404:	e002      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 8002406:	2310      	movs	r3, #16
 8002408:	e000      	b.n	800240c <HAL_DMA_Abort_IT+0xa4>
 800240a:	2301      	movs	r3, #1
 800240c:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_DMA_Abort_IT+0xec>)
 800240e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
    } 
  }
  return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020008 	.word	0x40020008
 8002440:	4002001c 	.word	0x4002001c
 8002444:	40020030 	.word	0x40020030
 8002448:	40020044 	.word	0x40020044
 800244c:	40020058 	.word	0x40020058
 8002450:	4002006c 	.word	0x4002006c
 8002454:	40020000 	.word	0x40020000

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b08b      	sub	sp, #44	@ 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e169      	b.n	8002740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800246c:	2201      	movs	r2, #1
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8158 	bne.w	800273a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a9a      	ldr	r2, [pc, #616]	@ (80026f8 <HAL_GPIO_Init+0x2a0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d05e      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 8002494:	4a98      	ldr	r2, [pc, #608]	@ (80026f8 <HAL_GPIO_Init+0x2a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d875      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 800249a:	4a98      	ldr	r2, [pc, #608]	@ (80026fc <HAL_GPIO_Init+0x2a4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d058      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024a0:	4a96      	ldr	r2, [pc, #600]	@ (80026fc <HAL_GPIO_Init+0x2a4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d86f      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024a6:	4a96      	ldr	r2, [pc, #600]	@ (8002700 <HAL_GPIO_Init+0x2a8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d052      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024ac:	4a94      	ldr	r2, [pc, #592]	@ (8002700 <HAL_GPIO_Init+0x2a8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d869      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024b2:	4a94      	ldr	r2, [pc, #592]	@ (8002704 <HAL_GPIO_Init+0x2ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04c      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024b8:	4a92      	ldr	r2, [pc, #584]	@ (8002704 <HAL_GPIO_Init+0x2ac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d863      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024be:	4a92      	ldr	r2, [pc, #584]	@ (8002708 <HAL_GPIO_Init+0x2b0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d046      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024c4:	4a90      	ldr	r2, [pc, #576]	@ (8002708 <HAL_GPIO_Init+0x2b0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d85d      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d82a      	bhi.n	8002524 <HAL_GPIO_Init+0xcc>
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d859      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024d2:	a201      	add	r2, pc, #4	@ (adr r2, 80024d8 <HAL_GPIO_Init+0x80>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	08002553 	.word	0x08002553
 80024dc:	0800252d 	.word	0x0800252d
 80024e0:	0800253f 	.word	0x0800253f
 80024e4:	08002581 	.word	0x08002581
 80024e8:	08002587 	.word	0x08002587
 80024ec:	08002587 	.word	0x08002587
 80024f0:	08002587 	.word	0x08002587
 80024f4:	08002587 	.word	0x08002587
 80024f8:	08002587 	.word	0x08002587
 80024fc:	08002587 	.word	0x08002587
 8002500:	08002587 	.word	0x08002587
 8002504:	08002587 	.word	0x08002587
 8002508:	08002587 	.word	0x08002587
 800250c:	08002587 	.word	0x08002587
 8002510:	08002587 	.word	0x08002587
 8002514:	08002587 	.word	0x08002587
 8002518:	08002587 	.word	0x08002587
 800251c:	08002535 	.word	0x08002535
 8002520:	08002549 	.word	0x08002549
 8002524:	4a79      	ldr	r2, [pc, #484]	@ (800270c <HAL_GPIO_Init+0x2b4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800252a:	e02c      	b.n	8002586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	623b      	str	r3, [r7, #32]
          break;
 8002532:	e029      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	3304      	adds	r3, #4
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e024      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	3308      	adds	r3, #8
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e01f      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	330c      	adds	r3, #12
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e01a      	b.n	8002588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800255a:	2304      	movs	r3, #4
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e013      	b.n	8002588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002568:	2308      	movs	r3, #8
 800256a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	611a      	str	r2, [r3, #16]
          break;
 8002572:	e009      	b.n	8002588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002574:	2308      	movs	r3, #8
 8002576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	615a      	str	r2, [r3, #20]
          break;
 800257e:	e003      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
          break;
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x130>
          break;
 8002586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2bff      	cmp	r3, #255	@ 0xff
 800258c:	d801      	bhi.n	8002592 <HAL_GPIO_Init+0x13a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	e001      	b.n	8002596 <HAL_GPIO_Init+0x13e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2bff      	cmp	r3, #255	@ 0xff
 800259c:	d802      	bhi.n	80025a4 <HAL_GPIO_Init+0x14c>
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x152>
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	3b08      	subs	r3, #8
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	210f      	movs	r1, #15
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80b1 	beq.w	800273a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002710 <HAL_GPIO_Init+0x2b8>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_GPIO_Init+0x2b8>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002710 <HAL_GPIO_Init+0x2b8>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f0:	4a48      	ldr	r2, [pc, #288]	@ (8002714 <HAL_GPIO_Init+0x2bc>)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	220f      	movs	r2, #15
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <HAL_GPIO_Init+0x2c0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d013      	beq.n	8002644 <HAL_GPIO_Init+0x1ec>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <HAL_GPIO_Init+0x2c4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00d      	beq.n	8002640 <HAL_GPIO_Init+0x1e8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3e      	ldr	r2, [pc, #248]	@ (8002720 <HAL_GPIO_Init+0x2c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d007      	beq.n	800263c <HAL_GPIO_Init+0x1e4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3d      	ldr	r2, [pc, #244]	@ (8002724 <HAL_GPIO_Init+0x2cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_GPIO_Init+0x1e0>
 8002634:	2303      	movs	r3, #3
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002638:	2304      	movs	r3, #4
 800263a:	e004      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 800263c:	2302      	movs	r3, #2
 800263e:	e002      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002644:	2300      	movs	r3, #0
 8002646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002648:	f002 0203 	and.w	r2, r2, #3
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	4093      	lsls	r3, r2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002656:	492f      	ldr	r1, [pc, #188]	@ (8002714 <HAL_GPIO_Init+0x2bc>)
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002670:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	492c      	ldr	r1, [pc, #176]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800267e:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4928      	ldr	r1, [pc, #160]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002698:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4922      	ldr	r1, [pc, #136]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	491e      	ldr	r1, [pc, #120]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4918      	ldr	r1, [pc, #96]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ce:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4914      	ldr	r1, [pc, #80]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026d8:	4013      	ands	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d021      	beq.n	800272c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	490e      	ldr	r1, [pc, #56]	@ (8002728 <HAL_GPIO_Init+0x2d0>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e021      	b.n	800273a <HAL_GPIO_Init+0x2e2>
 80026f6:	bf00      	nop
 80026f8:	10320000 	.word	0x10320000
 80026fc:	10310000 	.word	0x10310000
 8002700:	10220000 	.word	0x10220000
 8002704:	10210000 	.word	0x10210000
 8002708:	10120000 	.word	0x10120000
 800270c:	10110000 	.word	0x10110000
 8002710:	40021000 	.word	0x40021000
 8002714:	40010000 	.word	0x40010000
 8002718:	40010800 	.word	0x40010800
 800271c:	40010c00 	.word	0x40010c00
 8002720:	40011000 	.word	0x40011000
 8002724:	40011400 	.word	0x40011400
 8002728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_GPIO_Init+0x304>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	43db      	mvns	r3, r3
 8002734:	4909      	ldr	r1, [pc, #36]	@ (800275c <HAL_GPIO_Init+0x304>)
 8002736:	4013      	ands	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f ae8e 	bne.w	800246c <HAL_GPIO_Init+0x14>
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	372c      	adds	r7, #44	@ 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40010400 	.word	0x40010400

08002760 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	420e0020 	.word	0x420e0020

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e272      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8087 	beq.w	80028a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002798:	4b92      	ldr	r3, [pc, #584]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d00c      	beq.n	80027be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a4:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d112      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
 80027b0:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x12c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d168      	bne.n	80028a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e24c      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x76>
 80027e0:	4b80      	ldr	r3, [pc, #512]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a7f      	ldr	r2, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e02e      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b7b      	ldr	r3, [pc, #492]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b78      	ldr	r3, [pc, #480]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a77      	ldr	r2, [pc, #476]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0xbc>
 800281a:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a71      	ldr	r2, [pc, #452]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6f      	ldr	r3, [pc, #444]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6e      	ldr	r2, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002834:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a67      	ldr	r2, [pc, #412]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fc12 	bl	800207c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fc0e 	bl	800207c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	@ 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e200      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b5d      	ldr	r3, [pc, #372]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xe4>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fbfe 	bl	800207c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fbfa 	bl	800207c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1ec      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x10c>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	4b4c      	ldr	r3, [pc, #304]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
 80028ca:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1c0      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4939      	ldr	r1, [pc, #228]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b36      	ldr	r3, [pc, #216]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7ff fbb3 	bl	800207c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7ff fbaf 	bl	800207c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1a1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4927      	ldr	r1, [pc, #156]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fb92 	bl	800207c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295c:	f7ff fb8e 	bl	800207c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e180      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03a      	beq.n	80029fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_RCC_OscConfig+0x274>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7ff fb72 	bl	800207c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7ff fb6e 	bl	800207c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e160      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f000 face 	bl	8002f5c <RCC_Delay>
 80029c0:	e01c      	b.n	80029fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_RCC_OscConfig+0x274>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7ff fb58 	bl	800207c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7ff fb54 	bl	800207c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d908      	bls.n	80029f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e146      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	42420000 	.word	0x42420000
 80029ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b92      	ldr	r3, [pc, #584]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e9      	bne.n	80029d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a6 	beq.w	8002b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a87      	ldr	r2, [pc, #540]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]
 8002a26:	4b85      	ldr	r3, [pc, #532]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b82      	ldr	r3, [pc, #520]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7e      	ldr	r2, [pc, #504]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff fb15 	bl	800207c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7ff fb11 	bl	800207c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	@ 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e103      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x312>
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	e02d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x334>
 8002a92:	4b6a      	ldr	r3, [pc, #424]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a69      	ldr	r2, [pc, #420]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b67      	ldr	r3, [pc, #412]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a66      	ldr	r2, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x356>
 8002ab4:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a60      	ldr	r2, [pc, #384]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002ace:	4b5b      	ldr	r3, [pc, #364]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b58      	ldr	r3, [pc, #352]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a57      	ldr	r2, [pc, #348]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fac5 	bl	800207c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff fac1 	bl	800207c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0b1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCC_OscConfig+0x37e>
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff faaf 	bl	800207c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7ff faab 	bl	800207c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e09b      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	4b40      	ldr	r3, [pc, #256]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b60:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d061      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d146      	bne.n	8002c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fa7f 	bl	800207c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7ff fa7b 	bl	800207c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e06d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4921      	ldr	r1, [pc, #132]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a19      	ldr	r1, [r3, #32]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	491b      	ldr	r1, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7ff fa4f 	bl	800207c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7ff fa4b 	bl	800207c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e03d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46a>
 8002c00:	e035      	b.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fa38 	bl	800207c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff fa34 	bl	800207c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e026      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x498>
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e019      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d0      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b6a      	ldr	r3, [pc, #424]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b67      	ldr	r3, [pc, #412]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4965      	ldr	r1, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d040      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e073      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4936      	ldr	r1, [pc, #216]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f986 	bl	800207c <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f982 	bl	800207c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e053      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d210      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_RCC_ClockConfig+0x1cc>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1d0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8e4 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	0800635c 	.word	0x0800635c
 8002e48:	2000010c 	.word	0x2000010c
 8002e4c:	20000110 	.word	0x20000110

08002e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x30>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x36>
 8002e7e:	e027      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	613b      	str	r3, [r7, #16]
      break;
 8002e84:	e027      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0c5b      	lsrs	r3, r3, #17
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	4a11      	ldr	r2, [pc, #68]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb2:	fb03 f202 	mul.w	r2, r3, r2
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e004      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	613b      	str	r3, [r7, #16]
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed2:	613b      	str	r3, [r7, #16]
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	693b      	ldr	r3, [r7, #16]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	007a1200 	.word	0x007a1200
 8002eec:	08006374 	.word	0x08006374
 8002ef0:	08006384 	.word	0x08006384
 8002ef4:	003d0900 	.word	0x003d0900

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	2000010c 	.word	0x2000010c

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff2 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	0800636c 	.word	0x0800636c

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f38:	f7ff ffde 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0adb      	lsrs	r3, r3, #11
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	0800636c 	.word	0x0800636c

08002f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <RCC_Delay+0x34>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <RCC_Delay+0x38>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0a5b      	lsrs	r3, r3, #9
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f78:	bf00      	nop
  }
  while (Delay --);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	60fa      	str	r2, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f9      	bne.n	8002f78 <RCC_Delay+0x1c>
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	2000010c 	.word	0x2000010c
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d07d      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fce:	61d3      	str	r3, [r2, #28]
 8002fd0:	4b49      	ldr	r3, [pc, #292]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b46      	ldr	r3, [pc, #280]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d118      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fec:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff8:	f7ff f840 	bl	800207c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7ff f83c 	bl	800207c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e06d      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800301e:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02e      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d027      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800303c:	4b2e      	ldr	r3, [pc, #184]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003046:	4b2e      	ldr	r3, [pc, #184]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800304c:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003052:	4a29      	ldr	r2, [pc, #164]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7ff f80b 	bl	800207c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff f807 	bl	800207c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e036      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4917      	ldr	r1, [pc, #92]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309a:	4313      	orrs	r3, r2
 800309c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	490b      	ldr	r1, [pc, #44]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4904      	ldr	r1, [pc, #16]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
 8003100:	42420440 	.word	0x42420440

08003104 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b10      	cmp	r3, #16
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b10      	cmp	r3, #16
 800312a:	f200 808a 	bhi.w	8003242 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d045      	beq.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d075      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800313a:	e082      	b.n	8003242 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800313c:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003142:	4b45      	ldr	r3, [pc, #276]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d07b      	beq.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0c9b      	lsrs	r3, r3, #18
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a41      	ldr	r2, [pc, #260]	@ (800325c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003166:	4b3c      	ldr	r3, [pc, #240]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0c5b      	lsrs	r3, r3, #17
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	4a3b      	ldr	r2, [pc, #236]	@ (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003180:	4a38      	ldr	r2, [pc, #224]	@ (8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e004      	b.n	800319c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a34      	ldr	r2, [pc, #208]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a8:	d102      	bne.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
      break;
 80031ae:	e04a      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
      break;
 80031be:	e042      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d0:	d108      	bne.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80031dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e01f      	b.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ee:	d109      	bne.n	8003204 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80031fc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e00f      	b.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320e:	d11c      	bne.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003210:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d016      	beq.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800321c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003220:	61bb      	str	r3, [r7, #24]
      break;
 8003222:	e012      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003224:	e011      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003226:	f7ff fe85 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0b9b      	lsrs	r3, r3, #14
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e004      	b.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800324a:	bf00      	nop
    }
  }
  return (frequency);
 800324c:	69bb      	ldr	r3, [r7, #24]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	08006388 	.word	0x08006388
 8003260:	08006398 	.word	0x08006398
 8003264:	007a1200 	.word	0x007a1200
 8003268:	003d0900 	.word	0x003d0900
 800326c:	aaaaaaab 	.word	0xaaaaaaab

08003270 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07a      	b.n	800337c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7c5b      	ldrb	r3, [r3, #17]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fbfc 	bl	8001a94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f870 	bl	8003388 <HAL_RTC_WaitForSynchro>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e061      	b.n	800337c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f892 	bl	80033e2 <RTC_EnterInitMode>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2204      	movs	r2, #4
 80032c8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e056      	b.n	800337c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0207 	bic.w	r2, r2, #7
 80032dc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032e6:	4b27      	ldr	r3, [pc, #156]	@ (8003384 <HAL_RTC_Init+0x114>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_RTC_Init+0x114>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RTC_Init+0x114>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4921      	ldr	r1, [pc, #132]	@ (8003384 <HAL_RTC_Init+0x114>)
 8003300:	4313      	orrs	r3, r2
 8003302:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d003      	beq.n	8003316 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e00e      	b.n	8003334 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff fef4 	bl	8003104 <HAL_RCCEx_GetPeriphCLKFreq>
 800331c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e026      	b.n	800337c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	0c1a      	lsrs	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 020f 	and.w	r2, r2, #15
 8003340:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	b292      	uxth	r2, r2
 800334a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f870 	bl	8003432 <RTC_ExitInitMode>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00c      	b.n	800337c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40006c00 	.word	0x40006c00

08003388 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01d      	b.n	80033da <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0208 	bic.w	r2, r2, #8
 80033ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80033ae:	f7fe fe65 	bl	800207c <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80033b4:	e009      	b.n	80033ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033b6:	f7fe fe61 	bl	800207c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033c4:	d901      	bls.n	80033ca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e007      	b.n	80033da <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80033ee:	f7fe fe45 	bl	800207c <HAL_GetTick>
 80033f2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033f4:	e009      	b.n	800340a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033f6:	f7fe fe41 	bl	800207c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003404:	d901      	bls.n	800340a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e00f      	b.n	800342a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ee      	beq.n	80033f6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0210 	orr.w	r2, r2, #16
 8003426:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0210 	bic.w	r2, r2, #16
 800344c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800344e:	f7fe fe15 	bl	800207c <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003454:	e009      	b.n	800346a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003456:	f7fe fe11 	bl	800207c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003464:	d901      	bls.n	800346a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e007      	b.n	800347a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d027      	beq.n	80034e8 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00b      	beq.n	80034cc <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f824 	bl	8003502 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0204 	mvn.w	r2, #4
 80034c2:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2204      	movs	r2, #4
 80034c8:	745a      	strb	r2, [r3, #17]
 80034ca:	e005      	b.n	80034d8 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f80f 	bl	80034f0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e041      	b.n	80035aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe fad6 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f000 f992 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x24>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e022      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d109      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x3e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e015      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x58>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e008      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e05e      	b.n	80036e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_TIM_PWM_Start+0x82>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003634:	e013      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0x92>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	e00b      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003654:	e003      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fafe 	bl	8003c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_TIM_PWM_Start+0x138>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d107      	bne.n	8003686 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_TIM_PWM_Start+0x138>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_PWM_Start+0xfa>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003698:	d009      	beq.n	80036ae <HAL_TIM_PWM_Start+0xfa>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <HAL_TIM_PWM_Start+0x13c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_PWM_Start+0xfa>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <HAL_TIM_PWM_Start+0x140>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d111      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d010      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	e007      	b.n	80036e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800

080036f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ae      	b.n	8003874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	f200 809f 	bhi.w	8003864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003726:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003761 	.word	0x08003761
 8003730:	08003865 	.word	0x08003865
 8003734:	08003865 	.word	0x08003865
 8003738:	08003865 	.word	0x08003865
 800373c:	080037a1 	.word	0x080037a1
 8003740:	08003865 	.word	0x08003865
 8003744:	08003865 	.word	0x08003865
 8003748:	08003865 	.word	0x08003865
 800374c:	080037e3 	.word	0x080037e3
 8003750:	08003865 	.word	0x08003865
 8003754:	08003865 	.word	0x08003865
 8003758:	08003865 	.word	0x08003865
 800375c:	08003823 	.word	0x08003823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f8f6 	bl	8003958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
      break;
 800379e:	e064      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f93c 	bl	8003a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]
      break;
 80037e0:	e043      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f985 	bl	8003af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0208 	orr.w	r2, r2, #8
 80037fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0204 	bic.w	r2, r2, #4
 800380c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	61da      	str	r2, [r3, #28]
      break;
 8003820:	e023      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f9cf 	bl	8003bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69d9      	ldr	r1, [r3, #28]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	021a      	lsls	r2, r3, #8
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
      break;
 8003862:	e002      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <TIM_Base_SetConfig+0xd0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <TIM_Base_SetConfig+0xd4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x30>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003954 <TIM_Base_SetConfig+0xd8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <TIM_Base_SetConfig+0xd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003950 <TIM_Base_SetConfig+0xd4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <TIM_Base_SetConfig+0xd8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0d      	ldr	r2, [pc, #52]	@ (800394c <TIM_Base_SetConfig+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
  }
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800

08003958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 0201 	bic.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 0302 	bic.w	r3, r3, #2
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <TIM_OC1_SetConfig+0xc8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10c      	bne.n	80039ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0308 	bic.w	r3, r3, #8
 80039ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a13      	ldr	r2, [pc, #76]	@ (8003a20 <TIM_OC1_SetConfig+0xc8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d111      	bne.n	80039fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00

08003a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f023 0210 	bic.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0320 	bic.w	r3, r3, #32
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <TIM_OC2_SetConfig+0xd0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10d      	bne.n	8003aa0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <TIM_OC2_SetConfig+0xd0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d113      	bne.n	8003ad0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00

08003af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <TIM_OC3_SetConfig+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10d      	bne.n	8003b72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <TIM_OC3_SetConfig+0xd0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d113      	bne.n	8003ba2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00

08003bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a0f      	ldr	r2, [pc, #60]	@ (8003c64 <TIM_OC4_SetConfig+0x98>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d109      	bne.n	8003c40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	40012c00 	.word	0x40012c00

08003c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e046      	b.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d14:	d009      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a10      	ldr	r2, [pc, #64]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10c      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800

08003d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e03d      	b.n	8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e042      	b.n	8003ea6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fd ff45 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2224      	movs	r2, #36	@ 0x24
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fdb8 	bl	80049c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08a      	sub	sp, #40	@ 0x28
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d175      	bne.n	8003fba <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_Transmit+0x2c>
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06e      	b.n	8003fbc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	@ 0x21
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eec:	f7fe f8c6 	bl	800207c <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f06:	d108      	bne.n	8003f1a <HAL_UART_Transmit+0x6c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e003      	b.n	8003f22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f22:	e02e      	b.n	8003f82 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fb1d 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e03a      	b.n	8003fbc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3302      	adds	r3, #2
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e007      	b.n	8003f74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1cb      	bne.n	8003f24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2140      	movs	r1, #64	@ 0x40
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fae9 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e006      	b.n	8003fbc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d112      	bne.n	8004004 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_UART_Receive_IT+0x26>
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00b      	b.n	8004006 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb10 	bl	8004620 <UART_Start_Receive_IT>
 8004000:	4603      	mov	r3, r0
 8004002:	e000      	b.n	8004006 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b0ba      	sub	sp, #232	@ 0xe8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800404e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_UART_IRQHandler+0x66>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fbec 	bl	800484c <UART_Receive_IT>
      return;
 8004074:	e25b      	b.n	800452e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80de 	beq.w	800423c <HAL_UART_IRQHandler+0x22c>
 8004080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80d1 	beq.w	800423c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xae>
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xd2>
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0202 	orr.w	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_UART_IRQHandler+0xf6>
 80040ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d011      	beq.n	8004136 <HAL_UART_IRQHandler+0x126>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 81f2 	beq.w	8004524 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_UART_IRQHandler+0x14e>
 800414c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb77 	bl	800484c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <HAL_UART_IRQHandler+0x17a>
 8004182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d04f      	beq.n	800422a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa81 	bl	8004692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d041      	beq.n	8004222 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1d9      	bne.n	800419e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d013      	beq.n	800421a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f6:	4a7e      	ldr	r2, [pc, #504]	@ (80043f0 <HAL_UART_IRQHandler+0x3e0>)
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f8b2 	bl	8002368 <HAL_DMA_Abort_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004214:	4610      	mov	r0, r2
 8004216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004218:	e00e      	b.n	8004238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f993 	bl	8004546 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	e00a      	b.n	8004238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f98f 	bl	8004546 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e006      	b.n	8004238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f98b 	bl	8004546 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004236:	e175      	b.n	8004524 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	bf00      	nop
    return;
 800423a:	e173      	b.n	8004524 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 814f 	bne.w	80044e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8148 	beq.w	80044e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8141 	beq.w	80044e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80b6 	beq.w	80043f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004294:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8145 	beq.w	8004528 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042a6:	429a      	cmp	r2, r3
 80042a8:	f080 813e 	bcs.w	8004528 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	f000 8088 	beq.w	80043d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1d9      	bne.n	80042c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800431c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004330:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004334:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004338:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e1      	bne.n	800430c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004358:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800435a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800436c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800436e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004372:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800437a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e3      	bne.n	8004348 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800439e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a0:	f023 0310 	bic.w	r3, r3, #16
 80043a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e3      	bne.n	800438e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd ff91 	bl	80022f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8b6 	bl	8004558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ec:	e09c      	b.n	8004528 <HAL_UART_IRQHandler+0x518>
 80043ee:	bf00      	nop
 80043f0:	08004757 	.word	0x08004757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 808e 	beq.w	800452c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8089 	beq.w	800452c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800443e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004440:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e3      	bne.n	800441a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	623b      	str	r3, [r7, #32]
   return(result);
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004476:	633a      	str	r2, [r7, #48]	@ 0x30
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800447c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e3      	bne.n	8004452 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0310 	bic.w	r3, r3, #16
 80044ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044bc:	61fa      	str	r2, [r7, #28]
 80044be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	69b9      	ldr	r1, [r7, #24]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e3      	bne.n	8004498 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f83b 	bl	8004558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044e2:	e023      	b.n	800452c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_UART_IRQHandler+0x4f4>
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f93e 	bl	800477e <UART_Transmit_IT>
    return;
 8004502:	e014      	b.n	800452e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <HAL_UART_IRQHandler+0x51e>
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f97d 	bl	800481c <UART_EndTransmit_IT>
    return;
 8004522:	e004      	b.n	800452e <HAL_UART_IRQHandler+0x51e>
    return;
 8004524:	bf00      	nop
 8004526:	e002      	b.n	800452e <HAL_UART_IRQHandler+0x51e>
      return;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_UART_IRQHandler+0x51e>
      return;
 800452c:	bf00      	nop
  }
}
 800452e:	37e8      	adds	r7, #232	@ 0xe8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	e03b      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d037      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fd fd78 	bl	800207c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	6a3a      	ldr	r2, [r7, #32]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <UART_WaitOnFlagUntilTimeout+0x30>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e03a      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b80      	cmp	r3, #128	@ 0x80
 80045b4:	d020      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d01d      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d116      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f856 	bl	8004692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2208      	movs	r2, #8
 80045ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e00f      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d0b4      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	@ 0x22
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004664:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0220 	orr.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b095      	sub	sp, #84	@ 0x54
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80046bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	2b01      	cmp	r3, #1
 8004708:	d119      	bne.n	800473e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	60bb      	str	r3, [r7, #8]
   return(result);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800472a:	61ba      	str	r2, [r7, #24]
 800472c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800474c:	bf00      	nop
 800474e:	3754      	adds	r7, #84	@ 0x54
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fee8 	bl	8004546 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b21      	cmp	r3, #33	@ 0x21
 8004790:	d13e      	bne.n	8004810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	d114      	bne.n	80047c6 <UART_Transmit_IT+0x48>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]
 80047c4:	e008      	b.n	80047d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6211      	str	r1, [r2, #32]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4619      	mov	r1, r3
 80047e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800480a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004832:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fe79 	bl	8004534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	@ 0x30
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b22      	cmp	r3, #34	@ 0x22
 800485e:	f040 80ae 	bne.w	80049be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	d117      	bne.n	800489c <UART_Receive_IT+0x50>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d113      	bne.n	800489c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	b29a      	uxth	r2, r3
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	1c9a      	adds	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	629a      	str	r2, [r3, #40]	@ 0x28
 800489a:	e026      	b.n	80048ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ae:	d007      	beq.n	80048c0 <UART_Receive_IT+0x74>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <UART_Receive_IT+0x82>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e008      	b.n	80048e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4619      	mov	r1, r3
 80048f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d15d      	bne.n	80049ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0220 	bic.w	r2, r2, #32
 800490c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800491c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	2b01      	cmp	r3, #1
 8004942:	d135      	bne.n	80049b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d10a      	bne.n	80049a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fdd5 	bl	8004558 <HAL_UARTEx_RxEventCallback>
 80049ae:	e002      	b.n	80049b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fc fdc3 	bl	800153c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e002      	b.n	80049c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3730      	adds	r7, #48	@ 0x30
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a02:	f023 030c 	bic.w	r3, r3, #12
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <UART_SetConfig+0x114>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a30:	f7fe fa80 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	e002      	b.n	8004a3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fa68 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8004a3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009a      	lsls	r2, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	4a22      	ldr	r2, [pc, #136]	@ (8004ae0 <UART_SetConfig+0x118>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	0119      	lsls	r1, r3, #4
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009a      	lsls	r2, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <UART_SetConfig+0x118>)
 8004a76:	fba3 0302 	umull	r0, r3, r3, r2
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2064      	movs	r0, #100	@ 0x64
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	3332      	adds	r3, #50	@ 0x32
 8004a88:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <UART_SetConfig+0x118>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a94:	4419      	add	r1, r3
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <UART_SetConfig+0x118>)
 8004aae:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2064      	movs	r0, #100	@ 0x64
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	@ 0x32
 8004ac0:	4a07      	ldr	r2, [pc, #28]	@ (8004ae0 <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	51eb851f 	.word	0x51eb851f

08004ae4 <atoi>:
 8004ae4:	220a      	movs	r2, #10
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f000 b87a 	b.w	8004be0 <strtol>

08004aec <_strtol_l.isra.0>:
 8004aec:	2b24      	cmp	r3, #36	@ 0x24
 8004aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af2:	4686      	mov	lr, r0
 8004af4:	4690      	mov	r8, r2
 8004af6:	d801      	bhi.n	8004afc <_strtol_l.isra.0+0x10>
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <_strtol_l.isra.0+0x1e>
 8004afc:	f000 fa6c 	bl	8004fd8 <__errno>
 8004b00:	2316      	movs	r3, #22
 8004b02:	6003      	str	r3, [r0, #0]
 8004b04:	2000      	movs	r0, #0
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	4833      	ldr	r0, [pc, #204]	@ (8004bdc <_strtol_l.isra.0+0xf0>)
 8004b0e:	462a      	mov	r2, r5
 8004b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b14:	5d06      	ldrb	r6, [r0, r4]
 8004b16:	f016 0608 	ands.w	r6, r6, #8
 8004b1a:	d1f8      	bne.n	8004b0e <_strtol_l.isra.0+0x22>
 8004b1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004b1e:	d110      	bne.n	8004b42 <_strtol_l.isra.0+0x56>
 8004b20:	2601      	movs	r6, #1
 8004b22:	782c      	ldrb	r4, [r5, #0]
 8004b24:	1c95      	adds	r5, r2, #2
 8004b26:	f033 0210 	bics.w	r2, r3, #16
 8004b2a:	d115      	bne.n	8004b58 <_strtol_l.isra.0+0x6c>
 8004b2c:	2c30      	cmp	r4, #48	@ 0x30
 8004b2e:	d10d      	bne.n	8004b4c <_strtol_l.isra.0+0x60>
 8004b30:	782a      	ldrb	r2, [r5, #0]
 8004b32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004b36:	2a58      	cmp	r2, #88	@ 0x58
 8004b38:	d108      	bne.n	8004b4c <_strtol_l.isra.0+0x60>
 8004b3a:	786c      	ldrb	r4, [r5, #1]
 8004b3c:	3502      	adds	r5, #2
 8004b3e:	2310      	movs	r3, #16
 8004b40:	e00a      	b.n	8004b58 <_strtol_l.isra.0+0x6c>
 8004b42:	2c2b      	cmp	r4, #43	@ 0x2b
 8004b44:	bf04      	itt	eq
 8004b46:	782c      	ldrbeq	r4, [r5, #0]
 8004b48:	1c95      	addeq	r5, r2, #2
 8004b4a:	e7ec      	b.n	8004b26 <_strtol_l.isra.0+0x3a>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f6      	bne.n	8004b3e <_strtol_l.isra.0+0x52>
 8004b50:	2c30      	cmp	r4, #48	@ 0x30
 8004b52:	bf14      	ite	ne
 8004b54:	230a      	movne	r3, #10
 8004b56:	2308      	moveq	r3, #8
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004b5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b62:	fbbc f9f3 	udiv	r9, ip, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b70:	2f09      	cmp	r7, #9
 8004b72:	d80f      	bhi.n	8004b94 <_strtol_l.isra.0+0xa8>
 8004b74:	463c      	mov	r4, r7
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	dd1b      	ble.n	8004bb2 <_strtol_l.isra.0+0xc6>
 8004b7a:	1c57      	adds	r7, r2, #1
 8004b7c:	d007      	beq.n	8004b8e <_strtol_l.isra.0+0xa2>
 8004b7e:	4581      	cmp	r9, r0
 8004b80:	d314      	bcc.n	8004bac <_strtol_l.isra.0+0xc0>
 8004b82:	d101      	bne.n	8004b88 <_strtol_l.isra.0+0x9c>
 8004b84:	45a2      	cmp	sl, r4
 8004b86:	db11      	blt.n	8004bac <_strtol_l.isra.0+0xc0>
 8004b88:	2201      	movs	r2, #1
 8004b8a:	fb00 4003 	mla	r0, r0, r3, r4
 8004b8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b92:	e7eb      	b.n	8004b6c <_strtol_l.isra.0+0x80>
 8004b94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b98:	2f19      	cmp	r7, #25
 8004b9a:	d801      	bhi.n	8004ba0 <_strtol_l.isra.0+0xb4>
 8004b9c:	3c37      	subs	r4, #55	@ 0x37
 8004b9e:	e7ea      	b.n	8004b76 <_strtol_l.isra.0+0x8a>
 8004ba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004ba4:	2f19      	cmp	r7, #25
 8004ba6:	d804      	bhi.n	8004bb2 <_strtol_l.isra.0+0xc6>
 8004ba8:	3c57      	subs	r4, #87	@ 0x57
 8004baa:	e7e4      	b.n	8004b76 <_strtol_l.isra.0+0x8a>
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	e7ed      	b.n	8004b8e <_strtol_l.isra.0+0xa2>
 8004bb2:	1c53      	adds	r3, r2, #1
 8004bb4:	d108      	bne.n	8004bc8 <_strtol_l.isra.0+0xdc>
 8004bb6:	2322      	movs	r3, #34	@ 0x22
 8004bb8:	4660      	mov	r0, ip
 8004bba:	f8ce 3000 	str.w	r3, [lr]
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	d0a0      	beq.n	8004b06 <_strtol_l.isra.0+0x1a>
 8004bc4:	1e69      	subs	r1, r5, #1
 8004bc6:	e006      	b.n	8004bd6 <_strtol_l.isra.0+0xea>
 8004bc8:	b106      	cbz	r6, 8004bcc <_strtol_l.isra.0+0xe0>
 8004bca:	4240      	negs	r0, r0
 8004bcc:	f1b8 0f00 	cmp.w	r8, #0
 8004bd0:	d099      	beq.n	8004b06 <_strtol_l.isra.0+0x1a>
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	d1f6      	bne.n	8004bc4 <_strtol_l.isra.0+0xd8>
 8004bd6:	f8c8 1000 	str.w	r1, [r8]
 8004bda:	e794      	b.n	8004b06 <_strtol_l.isra.0+0x1a>
 8004bdc:	0800639b 	.word	0x0800639b

08004be0 <strtol>:
 8004be0:	4613      	mov	r3, r2
 8004be2:	460a      	mov	r2, r1
 8004be4:	4601      	mov	r1, r0
 8004be6:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <strtol+0x10>)
 8004be8:	6800      	ldr	r0, [r0, #0]
 8004bea:	f7ff bf7f 	b.w	8004aec <_strtol_l.isra.0>
 8004bee:	bf00      	nop
 8004bf0:	20000124 	.word	0x20000124

08004bf4 <std>:
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c02:	6083      	str	r3, [r0, #8]
 8004c04:	8181      	strh	r1, [r0, #12]
 8004c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c08:	81c2      	strh	r2, [r0, #14]
 8004c0a:	6183      	str	r3, [r0, #24]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	2208      	movs	r2, #8
 8004c10:	305c      	adds	r0, #92	@ 0x5c
 8004c12:	f000 f92a 	bl	8004e6a <memset>
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <std+0x58>)
 8004c18:	6224      	str	r4, [r4, #32]
 8004c1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <std+0x5c>)
 8004c1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <std+0x60>)
 8004c22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <std+0x64>)
 8004c26:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <std+0x68>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d006      	beq.n	8004c3c <std+0x48>
 8004c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c32:	4294      	cmp	r4, r2
 8004c34:	d002      	beq.n	8004c3c <std+0x48>
 8004c36:	33d0      	adds	r3, #208	@ 0xd0
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d105      	bne.n	8004c48 <std+0x54>
 8004c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f000 b9f2 	b.w	800502c <__retarget_lock_init_recursive>
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	08004de5 	.word	0x08004de5
 8004c50:	08004e07 	.word	0x08004e07
 8004c54:	08004e3f 	.word	0x08004e3f
 8004c58:	08004e63 	.word	0x08004e63
 8004c5c:	20000434 	.word	0x20000434

08004c60 <stdio_exit_handler>:
 8004c60:	4a02      	ldr	r2, [pc, #8]	@ (8004c6c <stdio_exit_handler+0xc>)
 8004c62:	4903      	ldr	r1, [pc, #12]	@ (8004c70 <stdio_exit_handler+0x10>)
 8004c64:	4803      	ldr	r0, [pc, #12]	@ (8004c74 <stdio_exit_handler+0x14>)
 8004c66:	f000 b869 	b.w	8004d3c <_fwalk_sglue>
 8004c6a:	bf00      	nop
 8004c6c:	20000118 	.word	0x20000118
 8004c70:	0800594d 	.word	0x0800594d
 8004c74:	20000128 	.word	0x20000128

08004c78 <cleanup_stdio>:
 8004c78:	6841      	ldr	r1, [r0, #4]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <cleanup_stdio+0x34>)
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	4604      	mov	r4, r0
 8004c82:	d001      	beq.n	8004c88 <cleanup_stdio+0x10>
 8004c84:	f000 fe62 	bl	800594c <_fflush_r>
 8004c88:	68a1      	ldr	r1, [r4, #8]
 8004c8a:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <cleanup_stdio+0x38>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <cleanup_stdio+0x1e>
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fe5b 	bl	800594c <_fflush_r>
 8004c96:	68e1      	ldr	r1, [r4, #12]
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <cleanup_stdio+0x3c>)
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	d004      	beq.n	8004ca8 <cleanup_stdio+0x30>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca4:	f000 be52 	b.w	800594c <_fflush_r>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	20000434 	.word	0x20000434
 8004cb0:	2000049c 	.word	0x2000049c
 8004cb4:	20000504 	.word	0x20000504

08004cb8 <global_stdio_init.part.0>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <global_stdio_init.part.0+0x30>)
 8004cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8004cec <global_stdio_init.part.0+0x34>)
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <global_stdio_init.part.0+0x38>)
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f7ff ff94 	bl	8004bf4 <std>
 8004ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2109      	movs	r1, #9
 8004cd4:	f7ff ff8e 	bl	8004bf4 <std>
 8004cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cdc:	2202      	movs	r2, #2
 8004cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce2:	2112      	movs	r1, #18
 8004ce4:	f7ff bf86 	b.w	8004bf4 <std>
 8004ce8:	2000056c 	.word	0x2000056c
 8004cec:	20000434 	.word	0x20000434
 8004cf0:	08004c61 	.word	0x08004c61

08004cf4 <__sfp_lock_acquire>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__sfp_lock_acquire+0x8>)
 8004cf6:	f000 b99a 	b.w	800502e <__retarget_lock_acquire_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20000575 	.word	0x20000575

08004d00 <__sfp_lock_release>:
 8004d00:	4801      	ldr	r0, [pc, #4]	@ (8004d08 <__sfp_lock_release+0x8>)
 8004d02:	f000 b995 	b.w	8005030 <__retarget_lock_release_recursive>
 8004d06:	bf00      	nop
 8004d08:	20000575 	.word	0x20000575

08004d0c <__sinit>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f7ff fff0 	bl	8004cf4 <__sfp_lock_acquire>
 8004d14:	6a23      	ldr	r3, [r4, #32]
 8004d16:	b11b      	cbz	r3, 8004d20 <__sinit+0x14>
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f7ff bff0 	b.w	8004d00 <__sfp_lock_release>
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <__sinit+0x28>)
 8004d22:	6223      	str	r3, [r4, #32]
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <__sinit+0x2c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f5      	bne.n	8004d18 <__sinit+0xc>
 8004d2c:	f7ff ffc4 	bl	8004cb8 <global_stdio_init.part.0>
 8004d30:	e7f2      	b.n	8004d18 <__sinit+0xc>
 8004d32:	bf00      	nop
 8004d34:	08004c79 	.word	0x08004c79
 8004d38:	2000056c 	.word	0x2000056c

08004d3c <_fwalk_sglue>:
 8004d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d40:	4607      	mov	r7, r0
 8004d42:	4688      	mov	r8, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	2600      	movs	r6, #0
 8004d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d50:	d505      	bpl.n	8004d5e <_fwalk_sglue+0x22>
 8004d52:	6824      	ldr	r4, [r4, #0]
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	d1f7      	bne.n	8004d48 <_fwalk_sglue+0xc>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d907      	bls.n	8004d74 <_fwalk_sglue+0x38>
 8004d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	d003      	beq.n	8004d74 <_fwalk_sglue+0x38>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c0      	blx	r8
 8004d72:	4306      	orrs	r6, r0
 8004d74:	3568      	adds	r5, #104	@ 0x68
 8004d76:	e7e9      	b.n	8004d4c <_fwalk_sglue+0x10>

08004d78 <sniprintf>:
 8004d78:	b40c      	push	{r2, r3}
 8004d7a:	b530      	push	{r4, r5, lr}
 8004d7c:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <sniprintf+0x68>)
 8004d7e:	1e0c      	subs	r4, r1, #0
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	b09d      	sub	sp, #116	@ 0x74
 8004d84:	da08      	bge.n	8004d98 <sniprintf+0x20>
 8004d86:	238b      	movs	r3, #139	@ 0x8b
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	b01d      	add	sp, #116	@ 0x74
 8004d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d94:	b002      	add	sp, #8
 8004d96:	4770      	bx	lr
 8004d98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004da6:	bf0c      	ite	eq
 8004da8:	4623      	moveq	r3, r4
 8004daa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	9307      	str	r3, [sp, #28]
 8004db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004db6:	9002      	str	r0, [sp, #8]
 8004db8:	9006      	str	r0, [sp, #24]
 8004dba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	ab21      	add	r3, sp, #132	@ 0x84
 8004dc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004dc4:	a902      	add	r1, sp, #8
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	f000 fab4 	bl	8005334 <_svfiprintf_r>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	bfbc      	itt	lt
 8004dd0:	238b      	movlt	r3, #139	@ 0x8b
 8004dd2:	602b      	strlt	r3, [r5, #0]
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	d0da      	beq.n	8004d8e <sniprintf+0x16>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e7d6      	b.n	8004d8e <sniprintf+0x16>
 8004de0:	20000124 	.word	0x20000124

08004de4 <__sread>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	f000 f8d0 	bl	8004f90 <_read_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	bfab      	itete	ge
 8004df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004df6:	89a3      	ldrhlt	r3, [r4, #12]
 8004df8:	181b      	addge	r3, r3, r0
 8004dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dfe:	bfac      	ite	ge
 8004e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e02:	81a3      	strhlt	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__swrite>:
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	898b      	ldrh	r3, [r1, #12]
 8004e0e:	4605      	mov	r5, r0
 8004e10:	05db      	lsls	r3, r3, #23
 8004e12:	460c      	mov	r4, r1
 8004e14:	4616      	mov	r6, r2
 8004e16:	d505      	bpl.n	8004e24 <__swrite+0x1e>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	f000 f8a4 	bl	8004f6c <_lseek_r>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	4632      	mov	r2, r6
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	4628      	mov	r0, r5
 8004e30:	463b      	mov	r3, r7
 8004e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	f000 b8bb 	b.w	8004fb4 <_write_r>

08004e3e <__sseek>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 f891 	bl	8004f6c <_lseek_r>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	bf15      	itete	ne
 8004e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e5a:	81a3      	strheq	r3, [r4, #12]
 8004e5c:	bf18      	it	ne
 8004e5e:	81a3      	strhne	r3, [r4, #12]
 8004e60:	bd10      	pop	{r4, pc}

08004e62 <__sclose>:
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 b871 	b.w	8004f4c <_close_r>

08004e6a <memset>:
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d100      	bne.n	8004e74 <memset+0xa>
 8004e72:	4770      	bx	lr
 8004e74:	f803 1b01 	strb.w	r1, [r3], #1
 8004e78:	e7f9      	b.n	8004e6e <memset+0x4>

08004e7a <strchr>:
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	b2c9      	uxtb	r1, r1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e84:	b112      	cbz	r2, 8004e8c <strchr+0x12>
 8004e86:	428a      	cmp	r2, r1
 8004e88:	d1f9      	bne.n	8004e7e <strchr+0x4>
 8004e8a:	4770      	bx	lr
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	bf18      	it	ne
 8004e90:	2000      	movne	r0, #0
 8004e92:	4770      	bx	lr

08004e94 <strtok>:
 8004e94:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <strtok+0x5c>)
 8004e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9a:	681f      	ldr	r7, [r3, #0]
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004ea0:	460e      	mov	r6, r1
 8004ea2:	b9ec      	cbnz	r4, 8004ee0 <strtok+0x4c>
 8004ea4:	2050      	movs	r0, #80	@ 0x50
 8004ea6:	f000 f933 	bl	8005110 <malloc>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6478      	str	r0, [r7, #68]	@ 0x44
 8004eae:	b920      	cbnz	r0, 8004eba <strtok+0x26>
 8004eb0:	215b      	movs	r1, #91	@ 0x5b
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <strtok+0x60>)
 8004eb4:	4810      	ldr	r0, [pc, #64]	@ (8004ef8 <strtok+0x64>)
 8004eb6:	f000 f8c5 	bl	8005044 <__assert_func>
 8004eba:	e9c0 4400 	strd	r4, r4, [r0]
 8004ebe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ec2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ec6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004eca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004ece:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004ed2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004ed6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004eda:	6184      	str	r4, [r0, #24]
 8004edc:	7704      	strb	r4, [r0, #28]
 8004ede:	6244      	str	r4, [r0, #36]	@ 0x24
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	f000 b806 	b.w	8004efc <__strtok_r>
 8004ef0:	20000124 	.word	0x20000124
 8004ef4:	0800649b 	.word	0x0800649b
 8004ef8:	080064b2 	.word	0x080064b2

08004efc <__strtok_r>:
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	4604      	mov	r4, r0
 8004f00:	b908      	cbnz	r0, 8004f06 <__strtok_r+0xa>
 8004f02:	6814      	ldr	r4, [r2, #0]
 8004f04:	b144      	cbz	r4, 8004f18 <__strtok_r+0x1c>
 8004f06:	460f      	mov	r7, r1
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f12:	b91e      	cbnz	r6, 8004f1c <__strtok_r+0x20>
 8004f14:	b965      	cbnz	r5, 8004f30 <__strtok_r+0x34>
 8004f16:	6015      	str	r5, [r2, #0]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e005      	b.n	8004f28 <__strtok_r+0x2c>
 8004f1c:	42b5      	cmp	r5, r6
 8004f1e:	d1f6      	bne.n	8004f0e <__strtok_r+0x12>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <__strtok_r+0xa>
 8004f24:	6014      	str	r4, [r2, #0]
 8004f26:	7003      	strb	r3, [r0, #0]
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2a:	461c      	mov	r4, r3
 8004f2c:	e00c      	b.n	8004f48 <__strtok_r+0x4c>
 8004f2e:	b91d      	cbnz	r5, 8004f38 <__strtok_r+0x3c>
 8004f30:	460e      	mov	r6, r1
 8004f32:	4627      	mov	r7, r4
 8004f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f38:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	d1f6      	bne.n	8004f2e <__strtok_r+0x32>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f2      	beq.n	8004f2a <__strtok_r+0x2e>
 8004f44:	2300      	movs	r3, #0
 8004f46:	703b      	strb	r3, [r7, #0]
 8004f48:	6014      	str	r4, [r2, #0]
 8004f4a:	e7ed      	b.n	8004f28 <__strtok_r+0x2c>

08004f4c <_close_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	2300      	movs	r3, #0
 8004f50:	4d05      	ldr	r5, [pc, #20]	@ (8004f68 <_close_r+0x1c>)
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	f7fc ffa5 	bl	8001ea6 <_close>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_close_r+0x1a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_close_r+0x1a>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000570 	.word	0x20000570

08004f6c <_lseek_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	2200      	movs	r2, #0
 8004f76:	4d05      	ldr	r5, [pc, #20]	@ (8004f8c <_lseek_r+0x20>)
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7fc ffb7 	bl	8001eee <_lseek>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_lseek_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_lseek_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000570 	.word	0x20000570

08004f90 <_read_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4d05      	ldr	r5, [pc, #20]	@ (8004fb0 <_read_r+0x20>)
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc ff48 	bl	8001e34 <_read>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_read_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_read_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000570 	.word	0x20000570

08004fb4 <_write_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4d05      	ldr	r5, [pc, #20]	@ (8004fd4 <_write_r+0x20>)
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fc ff53 	bl	8001e6e <_write>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_write_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_write_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000570 	.word	0x20000570

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	@ (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000124 	.word	0x20000124

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	4d0c      	ldr	r5, [pc, #48]	@ (800501c <__libc_init_array+0x38>)
 8004fea:	4c0d      	ldr	r4, [pc, #52]	@ (8005020 <__libc_init_array+0x3c>)
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	f001 f802 	bl	8005ffc <_init>
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	4d0a      	ldr	r5, [pc, #40]	@ (8005024 <__libc_init_array+0x40>)
 8004ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8005028 <__libc_init_array+0x44>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08006584 	.word	0x08006584
 8005020:	08006584 	.word	0x08006584
 8005024:	08006584 	.word	0x08006584
 8005028:	08006588 	.word	0x08006588

0800502c <__retarget_lock_init_recursive>:
 800502c:	4770      	bx	lr

0800502e <__retarget_lock_acquire_recursive>:
 800502e:	4770      	bx	lr

08005030 <__retarget_lock_release_recursive>:
 8005030:	4770      	bx	lr

08005032 <strcpy>:
 8005032:	4603      	mov	r3, r0
 8005034:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005038:	f803 2b01 	strb.w	r2, [r3], #1
 800503c:	2a00      	cmp	r2, #0
 800503e:	d1f9      	bne.n	8005034 <strcpy+0x2>
 8005040:	4770      	bx	lr
	...

08005044 <__assert_func>:
 8005044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005046:	4614      	mov	r4, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <__assert_func+0x2c>)
 800504c:	4605      	mov	r5, r0
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68d8      	ldr	r0, [r3, #12]
 8005052:	b14c      	cbz	r4, 8005068 <__assert_func+0x24>
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <__assert_func+0x30>)
 8005056:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800505a:	9100      	str	r1, [sp, #0]
 800505c:	462b      	mov	r3, r5
 800505e:	4906      	ldr	r1, [pc, #24]	@ (8005078 <__assert_func+0x34>)
 8005060:	f000 fc9c 	bl	800599c <fiprintf>
 8005064:	f000 fcf2 	bl	8005a4c <abort>
 8005068:	4b04      	ldr	r3, [pc, #16]	@ (800507c <__assert_func+0x38>)
 800506a:	461c      	mov	r4, r3
 800506c:	e7f3      	b.n	8005056 <__assert_func+0x12>
 800506e:	bf00      	nop
 8005070:	20000124 	.word	0x20000124
 8005074:	0800650c 	.word	0x0800650c
 8005078:	08006519 	.word	0x08006519
 800507c:	08006547 	.word	0x08006547

08005080 <_free_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	2900      	cmp	r1, #0
 8005086:	d040      	beq.n	800510a <_free_r+0x8a>
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	18e4      	addlt	r4, r4, r3
 8005094:	f000 f8e6 	bl	8005264 <__malloc_lock>
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <_free_r+0x8c>)
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	b933      	cbnz	r3, 80050ac <_free_r+0x2c>
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	6014      	str	r4, [r2, #0]
 80050a2:	4628      	mov	r0, r5
 80050a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a8:	f000 b8e2 	b.w	8005270 <__malloc_unlock>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d908      	bls.n	80050c2 <_free_r+0x42>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	e7ed      	b.n	800509e <_free_r+0x1e>
 80050c2:	461a      	mov	r2, r3
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b10b      	cbz	r3, 80050cc <_free_r+0x4c>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d9fa      	bls.n	80050c2 <_free_r+0x42>
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	1850      	adds	r0, r2, r1
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d10b      	bne.n	80050ec <_free_r+0x6c>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	4401      	add	r1, r0
 80050d8:	1850      	adds	r0, r2, r1
 80050da:	4283      	cmp	r3, r0
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	d1e0      	bne.n	80050a2 <_free_r+0x22>
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4408      	add	r0, r1
 80050e6:	6010      	str	r0, [r2, #0]
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	e7da      	b.n	80050a2 <_free_r+0x22>
 80050ec:	d902      	bls.n	80050f4 <_free_r+0x74>
 80050ee:	230c      	movs	r3, #12
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	e7d6      	b.n	80050a2 <_free_r+0x22>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf01      	itttt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	1809      	addeq	r1, r1, r0
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	6054      	str	r4, [r2, #4]
 8005108:	e7cb      	b.n	80050a2 <_free_r+0x22>
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	2000057c 	.word	0x2000057c

08005110 <malloc>:
 8005110:	4b02      	ldr	r3, [pc, #8]	@ (800511c <malloc+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f000 b825 	b.w	8005164 <_malloc_r>
 800511a:	bf00      	nop
 800511c:	20000124 	.word	0x20000124

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0f      	ldr	r6, [pc, #60]	@ (8005160 <sbrk_aligned+0x40>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 fc62 	bl	80059f4 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fc5d 	bl	80059f4 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d103      	bne.n	8005146 <sbrk_aligned+0x26>
 800513e:	f04f 34ff 	mov.w	r4, #4294967295
 8005142:	4620      	mov	r0, r4
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	1cc4      	adds	r4, r0, #3
 8005148:	f024 0403 	bic.w	r4, r4, #3
 800514c:	42a0      	cmp	r0, r4
 800514e:	d0f8      	beq.n	8005142 <sbrk_aligned+0x22>
 8005150:	1a21      	subs	r1, r4, r0
 8005152:	4628      	mov	r0, r5
 8005154:	f000 fc4e 	bl	80059f4 <_sbrk_r>
 8005158:	3001      	adds	r0, #1
 800515a:	d1f2      	bne.n	8005142 <sbrk_aligned+0x22>
 800515c:	e7ef      	b.n	800513e <sbrk_aligned+0x1e>
 800515e:	bf00      	nop
 8005160:	20000578 	.word	0x20000578

08005164 <_malloc_r>:
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005168:	1ccd      	adds	r5, r1, #3
 800516a:	f025 0503 	bic.w	r5, r5, #3
 800516e:	3508      	adds	r5, #8
 8005170:	2d0c      	cmp	r5, #12
 8005172:	bf38      	it	cc
 8005174:	250c      	movcc	r5, #12
 8005176:	2d00      	cmp	r5, #0
 8005178:	4606      	mov	r6, r0
 800517a:	db01      	blt.n	8005180 <_malloc_r+0x1c>
 800517c:	42a9      	cmp	r1, r5
 800517e:	d904      	bls.n	800518a <_malloc_r+0x26>
 8005180:	230c      	movs	r3, #12
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	2000      	movs	r0, #0
 8005186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005260 <_malloc_r+0xfc>
 800518e:	f000 f869 	bl	8005264 <__malloc_lock>
 8005192:	f8d8 3000 	ldr.w	r3, [r8]
 8005196:	461c      	mov	r4, r3
 8005198:	bb44      	cbnz	r4, 80051ec <_malloc_r+0x88>
 800519a:	4629      	mov	r1, r5
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff ffbf 	bl	8005120 <sbrk_aligned>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	4604      	mov	r4, r0
 80051a6:	d158      	bne.n	800525a <_malloc_r+0xf6>
 80051a8:	f8d8 4000 	ldr.w	r4, [r8]
 80051ac:	4627      	mov	r7, r4
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	d143      	bne.n	800523a <_malloc_r+0xd6>
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	d04b      	beq.n	800524e <_malloc_r+0xea>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	4639      	mov	r1, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	eb04 0903 	add.w	r9, r4, r3
 80051c0:	f000 fc18 	bl	80059f4 <_sbrk_r>
 80051c4:	4581      	cmp	r9, r0
 80051c6:	d142      	bne.n	800524e <_malloc_r+0xea>
 80051c8:	6821      	ldr	r1, [r4, #0]
 80051ca:	4630      	mov	r0, r6
 80051cc:	1a6d      	subs	r5, r5, r1
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7ff ffa6 	bl	8005120 <sbrk_aligned>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d03a      	beq.n	800524e <_malloc_r+0xea>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	442b      	add	r3, r5
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	f8d8 3000 	ldr.w	r3, [r8]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	bb62      	cbnz	r2, 8005240 <_malloc_r+0xdc>
 80051e6:	f8c8 7000 	str.w	r7, [r8]
 80051ea:	e00f      	b.n	800520c <_malloc_r+0xa8>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	1b52      	subs	r2, r2, r5
 80051f0:	d420      	bmi.n	8005234 <_malloc_r+0xd0>
 80051f2:	2a0b      	cmp	r2, #11
 80051f4:	d917      	bls.n	8005226 <_malloc_r+0xc2>
 80051f6:	1961      	adds	r1, r4, r5
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	6025      	str	r5, [r4, #0]
 80051fc:	bf18      	it	ne
 80051fe:	6059      	strne	r1, [r3, #4]
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	bf08      	it	eq
 8005204:	f8c8 1000 	streq.w	r1, [r8]
 8005208:	5162      	str	r2, [r4, r5]
 800520a:	604b      	str	r3, [r1, #4]
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f82f 	bl	8005270 <__malloc_unlock>
 8005212:	f104 000b 	add.w	r0, r4, #11
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	f020 0007 	bic.w	r0, r0, #7
 800521c:	1ac2      	subs	r2, r0, r3
 800521e:	bf1c      	itt	ne
 8005220:	1a1b      	subne	r3, r3, r0
 8005222:	50a3      	strne	r3, [r4, r2]
 8005224:	e7af      	b.n	8005186 <_malloc_r+0x22>
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	42a3      	cmp	r3, r4
 800522a:	bf0c      	ite	eq
 800522c:	f8c8 2000 	streq.w	r2, [r8]
 8005230:	605a      	strne	r2, [r3, #4]
 8005232:	e7eb      	b.n	800520c <_malloc_r+0xa8>
 8005234:	4623      	mov	r3, r4
 8005236:	6864      	ldr	r4, [r4, #4]
 8005238:	e7ae      	b.n	8005198 <_malloc_r+0x34>
 800523a:	463c      	mov	r4, r7
 800523c:	687f      	ldr	r7, [r7, #4]
 800523e:	e7b6      	b.n	80051ae <_malloc_r+0x4a>
 8005240:	461a      	mov	r2, r3
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	42a3      	cmp	r3, r4
 8005246:	d1fb      	bne.n	8005240 <_malloc_r+0xdc>
 8005248:	2300      	movs	r3, #0
 800524a:	6053      	str	r3, [r2, #4]
 800524c:	e7de      	b.n	800520c <_malloc_r+0xa8>
 800524e:	230c      	movs	r3, #12
 8005250:	4630      	mov	r0, r6
 8005252:	6033      	str	r3, [r6, #0]
 8005254:	f000 f80c 	bl	8005270 <__malloc_unlock>
 8005258:	e794      	b.n	8005184 <_malloc_r+0x20>
 800525a:	6005      	str	r5, [r0, #0]
 800525c:	e7d6      	b.n	800520c <_malloc_r+0xa8>
 800525e:	bf00      	nop
 8005260:	2000057c 	.word	0x2000057c

08005264 <__malloc_lock>:
 8005264:	4801      	ldr	r0, [pc, #4]	@ (800526c <__malloc_lock+0x8>)
 8005266:	f7ff bee2 	b.w	800502e <__retarget_lock_acquire_recursive>
 800526a:	bf00      	nop
 800526c:	20000574 	.word	0x20000574

08005270 <__malloc_unlock>:
 8005270:	4801      	ldr	r0, [pc, #4]	@ (8005278 <__malloc_unlock+0x8>)
 8005272:	f7ff bedd 	b.w	8005030 <__retarget_lock_release_recursive>
 8005276:	bf00      	nop
 8005278:	20000574 	.word	0x20000574

0800527c <__ssputs_r>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	461f      	mov	r7, r3
 8005282:	688e      	ldr	r6, [r1, #8]
 8005284:	4682      	mov	sl, r0
 8005286:	42be      	cmp	r6, r7
 8005288:	460c      	mov	r4, r1
 800528a:	4690      	mov	r8, r2
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	d82d      	bhi.n	80052ec <__ssputs_r+0x70>
 8005290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005298:	d026      	beq.n	80052e8 <__ssputs_r+0x6c>
 800529a:	6965      	ldr	r5, [r4, #20]
 800529c:	6909      	ldr	r1, [r1, #16]
 800529e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a2:	eba3 0901 	sub.w	r9, r3, r1
 80052a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052aa:	1c7b      	adds	r3, r7, #1
 80052ac:	444b      	add	r3, r9
 80052ae:	106d      	asrs	r5, r5, #1
 80052b0:	429d      	cmp	r5, r3
 80052b2:	bf38      	it	cc
 80052b4:	461d      	movcc	r5, r3
 80052b6:	0553      	lsls	r3, r2, #21
 80052b8:	d527      	bpl.n	800530a <__ssputs_r+0x8e>
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7ff ff52 	bl	8005164 <_malloc_r>
 80052c0:	4606      	mov	r6, r0
 80052c2:	b360      	cbz	r0, 800531e <__ssputs_r+0xa2>
 80052c4:	464a      	mov	r2, r9
 80052c6:	6921      	ldr	r1, [r4, #16]
 80052c8:	f000 fbb2 	bl	8005a30 <memcpy>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	6126      	str	r6, [r4, #16]
 80052da:	444e      	add	r6, r9
 80052dc:	6026      	str	r6, [r4, #0]
 80052de:	463e      	mov	r6, r7
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	eba5 0509 	sub.w	r5, r5, r9
 80052e6:	60a5      	str	r5, [r4, #8]
 80052e8:	42be      	cmp	r6, r7
 80052ea:	d900      	bls.n	80052ee <__ssputs_r+0x72>
 80052ec:	463e      	mov	r6, r7
 80052ee:	4632      	mov	r2, r6
 80052f0:	4641      	mov	r1, r8
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	f000 fb64 	bl	80059c0 <memmove>
 80052f8:	2000      	movs	r0, #0
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	1b9b      	subs	r3, r3, r6
 80052fe:	60a3      	str	r3, [r4, #8]
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	4433      	add	r3, r6
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530a:	462a      	mov	r2, r5
 800530c:	f000 fba5 	bl	8005a5a <_realloc_r>
 8005310:	4606      	mov	r6, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d1e0      	bne.n	80052d8 <__ssputs_r+0x5c>
 8005316:	4650      	mov	r0, sl
 8005318:	6921      	ldr	r1, [r4, #16]
 800531a:	f7ff feb1 	bl	8005080 <_free_r>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f04f 30ff 	mov.w	r0, #4294967295
 800532a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	e7e9      	b.n	8005306 <__ssputs_r+0x8a>
	...

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	4607      	mov	r7, r0
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	460d      	mov	r5, r1
 8005342:	4614      	mov	r4, r2
 8005344:	b09d      	sub	sp, #116	@ 0x74
 8005346:	d510      	bpl.n	800536a <_svfiprintf_r+0x36>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b973      	cbnz	r3, 800536a <_svfiprintf_r+0x36>
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	f7ff ff09 	bl	8005164 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b930      	cbnz	r0, 8005366 <_svfiprintf_r+0x32>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b01d      	add	sp, #116	@ 0x74
 8005362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005366:	2340      	movs	r3, #64	@ 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005374:	2330      	movs	r3, #48	@ 0x30
 8005376:	f04f 0901 	mov.w	r9, #1
 800537a:	f8cd 800c 	str.w	r8, [sp, #12]
 800537e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005518 <_svfiprintf_r+0x1e4>
 8005382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x60>
 8005390:	2a25      	cmp	r2, #37	@ 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x54>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7e>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6b 	bl	800527c <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a7 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 809f 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	484e      	ldr	r0, [pc, #312]	@ (8005518 <_svfiprintf_r+0x1e4>)
 80053de:	f000 fb19 	bl	8005a14 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xea>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	@ 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xfa>
 8005402:	4654      	mov	r4, sl
 8005404:	2000      	movs	r0, #0
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	@ 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94b      	bls.n	80054b0 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x114>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x114>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	46a2      	mov	sl, r4
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0xa0>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	@ 0x2e
 800544c:	d10a      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	@ 0x2a
 8005452:	d132      	bne.n	80054ba <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	3402      	adds	r4, #2
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	9203      	str	r2, [sp, #12]
 800545e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800551c <_svfiprintf_r+0x1e8>
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	f000 fad1 	bl	8005a14 <memchr>
 8005472:	b138      	cbz	r0, 8005484 <_svfiprintf_r+0x150>
 8005474:	2240      	movs	r2, #64	@ 0x40
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	eba0 000a 	sub.w	r0, r0, sl
 800547c:	4082      	lsls	r2, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	3401      	adds	r4, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	2206      	movs	r2, #6
 800548a:	4825      	ldr	r0, [pc, #148]	@ (8005520 <_svfiprintf_r+0x1ec>)
 800548c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005490:	f000 fac0 	bl	8005a14 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d036      	beq.n	8005506 <_svfiprintf_r+0x1d2>
 8005498:	4b22      	ldr	r3, [pc, #136]	@ (8005524 <_svfiprintf_r+0x1f0>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_svfiprintf_r+0x1b0>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054aa:	4433      	add	r3, r6
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	e76a      	b.n	8005386 <_svfiprintf_r+0x52>
 80054b0:	460c      	mov	r4, r1
 80054b2:	2001      	movs	r0, #1
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	e7a8      	b.n	800540c <_svfiprintf_r+0xd8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4619      	mov	r1, r3
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	@ 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_svfiprintf_r+0x1a6>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c4      	b.n	8005464 <_svfiprintf_r+0x130>
 80054da:	4604      	mov	r4, r0
 80054dc:	2301      	movs	r3, #1
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	e7f0      	b.n	80054c6 <_svfiprintf_r+0x192>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005528 <_svfiprintf_r+0x1f4>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	f3af 8000 	nop.w
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	d1d6      	bne.n	80054a8 <_svfiprintf_r+0x174>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af2d 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005504:	e72c      	b.n	8005360 <_svfiprintf_r+0x2c>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4638      	mov	r0, r7
 800550e:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <_svfiprintf_r+0x1f4>)
 8005510:	a904      	add	r1, sp, #16
 8005512:	f000 f87d 	bl	8005610 <_printf_i>
 8005516:	e7ed      	b.n	80054f4 <_svfiprintf_r+0x1c0>
 8005518:	08006548 	.word	0x08006548
 800551c:	0800654e 	.word	0x0800654e
 8005520:	08006552 	.word	0x08006552
 8005524:	00000000 	.word	0x00000000
 8005528:	0800527d 	.word	0x0800527d

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4698      	mov	r8, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4607      	mov	r7, r0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfb8      	it	lt
 800553e:	4613      	movlt	r3, r2
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005546:	460c      	mov	r4, r1
 8005548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc2b      	bgt.n	80055cc <_printf_common+0xa0>
 8005574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	3b00      	subs	r3, #0
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d430      	bmi.n	80055e6 <_printf_common+0xba>
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d023      	beq.n	80055da <_printf_common+0xae>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf14      	ite	ne
 800559e:	2500      	movne	r5, #0
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	f04f 0600 	mov.w	r6, #0
 80055a6:	bf08      	it	eq
 80055a8:	68e5      	ldreq	r5, [r4, #12]
 80055aa:	f104 041a 	add.w	r4, r4, #26
 80055ae:	bf08      	it	eq
 80055b0:	1aed      	subeq	r5, r5, r3
 80055b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055b6:	bf08      	it	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	4293      	cmp	r3, r2
 80055be:	bfc4      	itt	gt
 80055c0:	1a9b      	subgt	r3, r3, r2
 80055c2:	18ed      	addgt	r5, r5, r3
 80055c4:	42b5      	cmp	r5, r6
 80055c6:	d11a      	bne.n	80055fe <_printf_common+0xd2>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e008      	b.n	80055de <_printf_common+0xb2>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4652      	mov	r2, sl
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d103      	bne.n	80055e2 <_printf_common+0xb6>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	3501      	adds	r5, #1
 80055e4:	e7c1      	b.n	800556a <_printf_common+0x3e>
 80055e6:	2030      	movs	r0, #48	@ 0x30
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055f4:	4422      	add	r2, r4
 80055f6:	3302      	adds	r3, #2
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055fc:	e7c2      	b.n	8005584 <_printf_common+0x58>
 80055fe:	2301      	movs	r3, #1
 8005600:	4622      	mov	r2, r4
 8005602:	4641      	mov	r1, r8
 8005604:	4638      	mov	r0, r7
 8005606:	47c8      	blx	r9
 8005608:	3001      	adds	r0, #1
 800560a:	d0e6      	beq.n	80055da <_printf_common+0xae>
 800560c:	3601      	adds	r6, #1
 800560e:	e7d9      	b.n	80055c4 <_printf_common+0x98>

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	4691      	mov	r9, r2
 8005618:	2f78      	cmp	r7, #120	@ 0x78
 800561a:	4680      	mov	r8, r0
 800561c:	460c      	mov	r4, r1
 800561e:	469a      	mov	sl, r3
 8005620:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	@ 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d1 	beq.w	80057d4 <_printf_i+0x1c4>
 8005632:	2f58      	cmp	r7, #88	@ 0x58
 8005634:	f000 80b8 	beq.w	80057a8 <_printf_i+0x198>
 8005638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	@ (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057bb 	.word	0x080057bb
 8005680:	080056e7 	.word	0x080056e7
 8005684:	08005775 	.word	0x08005775
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057dd 	.word	0x080057dd
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e7 	.word	0x080056e7
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	0800577d 	.word	0x0800577d
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6032      	str	r2, [r6, #0]
 80056b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09c      	b.n	80057f6 <_printf_i+0x1e6>
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1d19      	adds	r1, r3, #4
 80056c2:	6031      	str	r1, [r6, #0]
 80056c4:	0606      	lsls	r6, r0, #24
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0xbc>
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	e003      	b.n	80056d4 <_printf_i+0xc4>
 80056cc:	0645      	lsls	r5, r0, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0xb8>
 80056d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	da03      	bge.n	80056e0 <_printf_i+0xd0>
 80056d8:	232d      	movs	r3, #45	@ 0x2d
 80056da:	426d      	negs	r5, r5
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e0:	230a      	movs	r3, #10
 80056e2:	4858      	ldr	r0, [pc, #352]	@ (8005844 <_printf_i+0x234>)
 80056e4:	e011      	b.n	800570a <_printf_i+0xfa>
 80056e6:	6821      	ldr	r1, [r4, #0]
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	0608      	lsls	r0, r1, #24
 80056ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f0:	d402      	bmi.n	80056f8 <_printf_i+0xe8>
 80056f2:	0649      	lsls	r1, r1, #25
 80056f4:	bf48      	it	mi
 80056f6:	b2ad      	uxthmi	r5, r5
 80056f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056fa:	6033      	str	r3, [r6, #0]
 80056fc:	bf14      	ite	ne
 80056fe:	230a      	movne	r3, #10
 8005700:	2308      	moveq	r3, #8
 8005702:	4850      	ldr	r0, [pc, #320]	@ (8005844 <_printf_i+0x234>)
 8005704:	2100      	movs	r1, #0
 8005706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800570a:	6866      	ldr	r6, [r4, #4]
 800570c:	2e00      	cmp	r6, #0
 800570e:	60a6      	str	r6, [r4, #8]
 8005710:	db05      	blt.n	800571e <_printf_i+0x10e>
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	432e      	orrs	r6, r5
 8005716:	f021 0104 	bic.w	r1, r1, #4
 800571a:	6021      	str	r1, [r4, #0]
 800571c:	d04b      	beq.n	80057b6 <_printf_i+0x1a6>
 800571e:	4616      	mov	r6, r2
 8005720:	fbb5 f1f3 	udiv	r1, r5, r3
 8005724:	fb03 5711 	mls	r7, r3, r1, r5
 8005728:	5dc7      	ldrb	r7, [r0, r7]
 800572a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800572e:	462f      	mov	r7, r5
 8005730:	42bb      	cmp	r3, r7
 8005732:	460d      	mov	r5, r1
 8005734:	d9f4      	bls.n	8005720 <_printf_i+0x110>
 8005736:	2b08      	cmp	r3, #8
 8005738:	d10b      	bne.n	8005752 <_printf_i+0x142>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	07df      	lsls	r7, r3, #31
 800573e:	d508      	bpl.n	8005752 <_printf_i+0x142>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6861      	ldr	r1, [r4, #4]
 8005744:	4299      	cmp	r1, r3
 8005746:	bfde      	ittt	le
 8005748:	2330      	movle	r3, #48	@ 0x30
 800574a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800574e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005752:	1b92      	subs	r2, r2, r6
 8005754:	6122      	str	r2, [r4, #16]
 8005756:	464b      	mov	r3, r9
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	aa03      	add	r2, sp, #12
 8005762:	f7ff fee3 	bl	800552c <_printf_common>
 8005766:	3001      	adds	r0, #1
 8005768:	d14a      	bne.n	8005800 <_printf_i+0x1f0>
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	b004      	add	sp, #16
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	f043 0320 	orr.w	r3, r3, #32
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	2778      	movs	r7, #120	@ 0x78
 800577e:	4832      	ldr	r0, [pc, #200]	@ (8005848 <_printf_i+0x238>)
 8005780:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	6831      	ldr	r1, [r6, #0]
 8005788:	061f      	lsls	r7, r3, #24
 800578a:	f851 5b04 	ldr.w	r5, [r1], #4
 800578e:	d402      	bmi.n	8005796 <_printf_i+0x186>
 8005790:	065f      	lsls	r7, r3, #25
 8005792:	bf48      	it	mi
 8005794:	b2ad      	uxthmi	r5, r5
 8005796:	6031      	str	r1, [r6, #0]
 8005798:	07d9      	lsls	r1, r3, #31
 800579a:	bf44      	itt	mi
 800579c:	f043 0320 	orrmi.w	r3, r3, #32
 80057a0:	6023      	strmi	r3, [r4, #0]
 80057a2:	b11d      	cbz	r5, 80057ac <_printf_i+0x19c>
 80057a4:	2310      	movs	r3, #16
 80057a6:	e7ad      	b.n	8005704 <_printf_i+0xf4>
 80057a8:	4826      	ldr	r0, [pc, #152]	@ (8005844 <_printf_i+0x234>)
 80057aa:	e7e9      	b.n	8005780 <_printf_i+0x170>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f023 0320 	bic.w	r3, r3, #32
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	e7f6      	b.n	80057a4 <_printf_i+0x194>
 80057b6:	4616      	mov	r6, r2
 80057b8:	e7bd      	b.n	8005736 <_printf_i+0x126>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1d18      	adds	r0, r3, #4
 80057c0:	6961      	ldr	r1, [r4, #20]
 80057c2:	6030      	str	r0, [r6, #0]
 80057c4:	062e      	lsls	r6, r5, #24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	d501      	bpl.n	80057ce <_printf_i+0x1be>
 80057ca:	6019      	str	r1, [r3, #0]
 80057cc:	e002      	b.n	80057d4 <_printf_i+0x1c4>
 80057ce:	0668      	lsls	r0, r5, #25
 80057d0:	d5fb      	bpl.n	80057ca <_printf_i+0x1ba>
 80057d2:	8019      	strh	r1, [r3, #0]
 80057d4:	2300      	movs	r3, #0
 80057d6:	4616      	mov	r6, r2
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	e7bc      	b.n	8005756 <_printf_i+0x146>
 80057dc:	6833      	ldr	r3, [r6, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	1d1a      	adds	r2, r3, #4
 80057e2:	6032      	str	r2, [r6, #0]
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	6862      	ldr	r2, [r4, #4]
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 f913 	bl	8005a14 <memchr>
 80057ee:	b108      	cbz	r0, 80057f4 <_printf_i+0x1e4>
 80057f0:	1b80      	subs	r0, r0, r6
 80057f2:	6060      	str	r0, [r4, #4]
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2300      	movs	r3, #0
 80057fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057fe:	e7aa      	b.n	8005756 <_printf_i+0x146>
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	47d0      	blx	sl
 800580a:	3001      	adds	r0, #1
 800580c:	d0ad      	beq.n	800576a <_printf_i+0x15a>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	079b      	lsls	r3, r3, #30
 8005812:	d413      	bmi.n	800583c <_printf_i+0x22c>
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	4298      	cmp	r0, r3
 800581a:	bfb8      	it	lt
 800581c:	4618      	movlt	r0, r3
 800581e:	e7a6      	b.n	800576e <_printf_i+0x15e>
 8005820:	2301      	movs	r3, #1
 8005822:	4632      	mov	r2, r6
 8005824:	4649      	mov	r1, r9
 8005826:	4640      	mov	r0, r8
 8005828:	47d0      	blx	sl
 800582a:	3001      	adds	r0, #1
 800582c:	d09d      	beq.n	800576a <_printf_i+0x15a>
 800582e:	3501      	adds	r5, #1
 8005830:	68e3      	ldr	r3, [r4, #12]
 8005832:	9903      	ldr	r1, [sp, #12]
 8005834:	1a5b      	subs	r3, r3, r1
 8005836:	42ab      	cmp	r3, r5
 8005838:	dcf2      	bgt.n	8005820 <_printf_i+0x210>
 800583a:	e7eb      	b.n	8005814 <_printf_i+0x204>
 800583c:	2500      	movs	r5, #0
 800583e:	f104 0619 	add.w	r6, r4, #25
 8005842:	e7f5      	b.n	8005830 <_printf_i+0x220>
 8005844:	08006559 	.word	0x08006559
 8005848:	0800656a 	.word	0x0800656a

0800584c <__sflush_r>:
 800584c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	0716      	lsls	r6, r2, #28
 8005854:	4605      	mov	r5, r0
 8005856:	460c      	mov	r4, r1
 8005858:	d454      	bmi.n	8005904 <__sflush_r+0xb8>
 800585a:	684b      	ldr	r3, [r1, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dc02      	bgt.n	8005866 <__sflush_r+0x1a>
 8005860:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd48      	ble.n	80058f8 <__sflush_r+0xac>
 8005866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005868:	2e00      	cmp	r6, #0
 800586a:	d045      	beq.n	80058f8 <__sflush_r+0xac>
 800586c:	2300      	movs	r3, #0
 800586e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005872:	682f      	ldr	r7, [r5, #0]
 8005874:	6a21      	ldr	r1, [r4, #32]
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	d030      	beq.n	80058dc <__sflush_r+0x90>
 800587a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	0759      	lsls	r1, r3, #29
 8005880:	d505      	bpl.n	800588e <__sflush_r+0x42>
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	1ad2      	subs	r2, r2, r3
 8005886:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005888:	b10b      	cbz	r3, 800588e <__sflush_r+0x42>
 800588a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800588c:	1ad2      	subs	r2, r2, r3
 800588e:	2300      	movs	r3, #0
 8005890:	4628      	mov	r0, r5
 8005892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005894:	6a21      	ldr	r1, [r4, #32]
 8005896:	47b0      	blx	r6
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	d106      	bne.n	80058ac <__sflush_r+0x60>
 800589e:	6829      	ldr	r1, [r5, #0]
 80058a0:	291d      	cmp	r1, #29
 80058a2:	d82b      	bhi.n	80058fc <__sflush_r+0xb0>
 80058a4:	4a28      	ldr	r2, [pc, #160]	@ (8005948 <__sflush_r+0xfc>)
 80058a6:	40ca      	lsrs	r2, r1
 80058a8:	07d6      	lsls	r6, r2, #31
 80058aa:	d527      	bpl.n	80058fc <__sflush_r+0xb0>
 80058ac:	2200      	movs	r2, #0
 80058ae:	6062      	str	r2, [r4, #4]
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	04d9      	lsls	r1, r3, #19
 80058b4:	6022      	str	r2, [r4, #0]
 80058b6:	d504      	bpl.n	80058c2 <__sflush_r+0x76>
 80058b8:	1c42      	adds	r2, r0, #1
 80058ba:	d101      	bne.n	80058c0 <__sflush_r+0x74>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b903      	cbnz	r3, 80058c2 <__sflush_r+0x76>
 80058c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80058c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058c4:	602f      	str	r7, [r5, #0]
 80058c6:	b1b9      	cbz	r1, 80058f8 <__sflush_r+0xac>
 80058c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <__sflush_r+0x8a>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7ff fbd5 	bl	8005080 <_free_r>
 80058d6:	2300      	movs	r3, #0
 80058d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80058da:	e00d      	b.n	80058f8 <__sflush_r+0xac>
 80058dc:	2301      	movs	r3, #1
 80058de:	4628      	mov	r0, r5
 80058e0:	47b0      	blx	r6
 80058e2:	4602      	mov	r2, r0
 80058e4:	1c50      	adds	r0, r2, #1
 80058e6:	d1c9      	bne.n	800587c <__sflush_r+0x30>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c6      	beq.n	800587c <__sflush_r+0x30>
 80058ee:	2b1d      	cmp	r3, #29
 80058f0:	d001      	beq.n	80058f6 <__sflush_r+0xaa>
 80058f2:	2b16      	cmp	r3, #22
 80058f4:	d11d      	bne.n	8005932 <__sflush_r+0xe6>
 80058f6:	602f      	str	r7, [r5, #0]
 80058f8:	2000      	movs	r0, #0
 80058fa:	e021      	b.n	8005940 <__sflush_r+0xf4>
 80058fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005900:	b21b      	sxth	r3, r3
 8005902:	e01a      	b.n	800593a <__sflush_r+0xee>
 8005904:	690f      	ldr	r7, [r1, #16]
 8005906:	2f00      	cmp	r7, #0
 8005908:	d0f6      	beq.n	80058f8 <__sflush_r+0xac>
 800590a:	0793      	lsls	r3, r2, #30
 800590c:	bf18      	it	ne
 800590e:	2300      	movne	r3, #0
 8005910:	680e      	ldr	r6, [r1, #0]
 8005912:	bf08      	it	eq
 8005914:	694b      	ldreq	r3, [r1, #20]
 8005916:	1bf6      	subs	r6, r6, r7
 8005918:	600f      	str	r7, [r1, #0]
 800591a:	608b      	str	r3, [r1, #8]
 800591c:	2e00      	cmp	r6, #0
 800591e:	ddeb      	ble.n	80058f8 <__sflush_r+0xac>
 8005920:	4633      	mov	r3, r6
 8005922:	463a      	mov	r2, r7
 8005924:	4628      	mov	r0, r5
 8005926:	6a21      	ldr	r1, [r4, #32]
 8005928:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800592c:	47e0      	blx	ip
 800592e:	2800      	cmp	r0, #0
 8005930:	dc07      	bgt.n	8005942 <__sflush_r+0xf6>
 8005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005942:	4407      	add	r7, r0
 8005944:	1a36      	subs	r6, r6, r0
 8005946:	e7e9      	b.n	800591c <__sflush_r+0xd0>
 8005948:	20400001 	.word	0x20400001

0800594c <_fflush_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b913      	cbnz	r3, 800595c <_fflush_r+0x10>
 8005956:	2500      	movs	r5, #0
 8005958:	4628      	mov	r0, r5
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	b118      	cbz	r0, 8005966 <_fflush_r+0x1a>
 800595e:	6a03      	ldr	r3, [r0, #32]
 8005960:	b90b      	cbnz	r3, 8005966 <_fflush_r+0x1a>
 8005962:	f7ff f9d3 	bl	8004d0c <__sinit>
 8005966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f3      	beq.n	8005956 <_fflush_r+0xa>
 800596e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005970:	07d0      	lsls	r0, r2, #31
 8005972:	d404      	bmi.n	800597e <_fflush_r+0x32>
 8005974:	0599      	lsls	r1, r3, #22
 8005976:	d402      	bmi.n	800597e <_fflush_r+0x32>
 8005978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597a:	f7ff fb58 	bl	800502e <__retarget_lock_acquire_recursive>
 800597e:	4628      	mov	r0, r5
 8005980:	4621      	mov	r1, r4
 8005982:	f7ff ff63 	bl	800584c <__sflush_r>
 8005986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005988:	4605      	mov	r5, r0
 800598a:	07da      	lsls	r2, r3, #31
 800598c:	d4e4      	bmi.n	8005958 <_fflush_r+0xc>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d4e1      	bmi.n	8005958 <_fflush_r+0xc>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f7ff fb4b 	bl	8005030 <__retarget_lock_release_recursive>
 800599a:	e7dd      	b.n	8005958 <_fflush_r+0xc>

0800599c <fiprintf>:
 800599c:	b40e      	push	{r1, r2, r3}
 800599e:	b503      	push	{r0, r1, lr}
 80059a0:	4601      	mov	r1, r0
 80059a2:	ab03      	add	r3, sp, #12
 80059a4:	4805      	ldr	r0, [pc, #20]	@ (80059bc <fiprintf+0x20>)
 80059a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	f000 f8a9 	bl	8005b04 <_vfiprintf_r>
 80059b2:	b002      	add	sp, #8
 80059b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b8:	b003      	add	sp, #12
 80059ba:	4770      	bx	lr
 80059bc:	20000124 	.word	0x20000124

080059c0 <memmove>:
 80059c0:	4288      	cmp	r0, r1
 80059c2:	b510      	push	{r4, lr}
 80059c4:	eb01 0402 	add.w	r4, r1, r2
 80059c8:	d902      	bls.n	80059d0 <memmove+0x10>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4623      	mov	r3, r4
 80059ce:	d807      	bhi.n	80059e0 <memmove+0x20>
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	42a1      	cmp	r1, r4
 80059d4:	d008      	beq.n	80059e8 <memmove+0x28>
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059de:	e7f8      	b.n	80059d2 <memmove+0x12>
 80059e0:	4601      	mov	r1, r0
 80059e2:	4402      	add	r2, r0
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d100      	bne.n	80059ea <memmove+0x2a>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f2:	e7f7      	b.n	80059e4 <memmove+0x24>

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	2300      	movs	r3, #0
 80059f8:	4d05      	ldr	r5, [pc, #20]	@ (8005a10 <_sbrk_r+0x1c>)
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fc fa82 	bl	8001f08 <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000570 	.word	0x20000570

08005a14 <memchr>:
 8005a14:	4603      	mov	r3, r0
 8005a16:	b510      	push	{r4, lr}
 8005a18:	b2c9      	uxtb	r1, r1
 8005a1a:	4402      	add	r2, r0
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	d101      	bne.n	8005a26 <memchr+0x12>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e003      	b.n	8005a2e <memchr+0x1a>
 8005a26:	7804      	ldrb	r4, [r0, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	428c      	cmp	r4, r1
 8005a2c:	d1f6      	bne.n	8005a1c <memchr+0x8>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <memcpy>:
 8005a30:	440a      	add	r2, r1
 8005a32:	4291      	cmp	r1, r2
 8005a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a38:	d100      	bne.n	8005a3c <memcpy+0xc>
 8005a3a:	4770      	bx	lr
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a42:	4291      	cmp	r1, r2
 8005a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a48:	d1f9      	bne.n	8005a3e <memcpy+0xe>
 8005a4a:	bd10      	pop	{r4, pc}

08005a4c <abort>:
 8005a4c:	2006      	movs	r0, #6
 8005a4e:	b508      	push	{r3, lr}
 8005a50:	f000 fa2c 	bl	8005eac <raise>
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7fc f9e2 	bl	8001e1e <_exit>

08005a5a <_realloc_r>:
 8005a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	4607      	mov	r7, r0
 8005a60:	4614      	mov	r4, r2
 8005a62:	460d      	mov	r5, r1
 8005a64:	b921      	cbnz	r1, 8005a70 <_realloc_r+0x16>
 8005a66:	4611      	mov	r1, r2
 8005a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6c:	f7ff bb7a 	b.w	8005164 <_malloc_r>
 8005a70:	b92a      	cbnz	r2, 8005a7e <_realloc_r+0x24>
 8005a72:	f7ff fb05 	bl	8005080 <_free_r>
 8005a76:	4625      	mov	r5, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7e:	f000 fa31 	bl	8005ee4 <_malloc_usable_size_r>
 8005a82:	4284      	cmp	r4, r0
 8005a84:	4606      	mov	r6, r0
 8005a86:	d802      	bhi.n	8005a8e <_realloc_r+0x34>
 8005a88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a8c:	d8f4      	bhi.n	8005a78 <_realloc_r+0x1e>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff fb67 	bl	8005164 <_malloc_r>
 8005a96:	4680      	mov	r8, r0
 8005a98:	b908      	cbnz	r0, 8005a9e <_realloc_r+0x44>
 8005a9a:	4645      	mov	r5, r8
 8005a9c:	e7ec      	b.n	8005a78 <_realloc_r+0x1e>
 8005a9e:	42b4      	cmp	r4, r6
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	bf28      	it	cs
 8005aa6:	4632      	movcs	r2, r6
 8005aa8:	f7ff ffc2 	bl	8005a30 <memcpy>
 8005aac:	4629      	mov	r1, r5
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f7ff fae6 	bl	8005080 <_free_r>
 8005ab4:	e7f1      	b.n	8005a9a <_realloc_r+0x40>

08005ab6 <__sfputc_r>:
 8005ab6:	6893      	ldr	r3, [r2, #8]
 8005ab8:	b410      	push	{r4}
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	6093      	str	r3, [r2, #8]
 8005ac0:	da07      	bge.n	8005ad2 <__sfputc_r+0x1c>
 8005ac2:	6994      	ldr	r4, [r2, #24]
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	db01      	blt.n	8005acc <__sfputc_r+0x16>
 8005ac8:	290a      	cmp	r1, #10
 8005aca:	d102      	bne.n	8005ad2 <__sfputc_r+0x1c>
 8005acc:	bc10      	pop	{r4}
 8005ace:	f000 b931 	b.w	8005d34 <__swbuf_r>
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	1c58      	adds	r0, r3, #1
 8005ad6:	6010      	str	r0, [r2, #0]
 8005ad8:	7019      	strb	r1, [r3, #0]
 8005ada:	4608      	mov	r0, r1
 8005adc:	bc10      	pop	{r4}
 8005ade:	4770      	bx	lr

08005ae0 <__sfputs_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	18d5      	adds	r5, r2, r3
 8005aea:	42ac      	cmp	r4, r5
 8005aec:	d101      	bne.n	8005af2 <__sfputs_r+0x12>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e007      	b.n	8005b02 <__sfputs_r+0x22>
 8005af2:	463a      	mov	r2, r7
 8005af4:	4630      	mov	r0, r6
 8005af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afa:	f7ff ffdc 	bl	8005ab6 <__sfputc_r>
 8005afe:	1c43      	adds	r3, r0, #1
 8005b00:	d1f3      	bne.n	8005aea <__sfputs_r+0xa>
 8005b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b04 <_vfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	460d      	mov	r5, r1
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	4698      	mov	r8, r3
 8005b0e:	4606      	mov	r6, r0
 8005b10:	b09d      	sub	sp, #116	@ 0x74
 8005b12:	b118      	cbz	r0, 8005b1c <_vfiprintf_r+0x18>
 8005b14:	6a03      	ldr	r3, [r0, #32]
 8005b16:	b90b      	cbnz	r3, 8005b1c <_vfiprintf_r+0x18>
 8005b18:	f7ff f8f8 	bl	8004d0c <__sinit>
 8005b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b1e:	07d9      	lsls	r1, r3, #31
 8005b20:	d405      	bmi.n	8005b2e <_vfiprintf_r+0x2a>
 8005b22:	89ab      	ldrh	r3, [r5, #12]
 8005b24:	059a      	lsls	r2, r3, #22
 8005b26:	d402      	bmi.n	8005b2e <_vfiprintf_r+0x2a>
 8005b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b2a:	f7ff fa80 	bl	800502e <__retarget_lock_acquire_recursive>
 8005b2e:	89ab      	ldrh	r3, [r5, #12]
 8005b30:	071b      	lsls	r3, r3, #28
 8005b32:	d501      	bpl.n	8005b38 <_vfiprintf_r+0x34>
 8005b34:	692b      	ldr	r3, [r5, #16]
 8005b36:	b99b      	cbnz	r3, 8005b60 <_vfiprintf_r+0x5c>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f000 f938 	bl	8005db0 <__swsetup_r>
 8005b40:	b170      	cbz	r0, 8005b60 <_vfiprintf_r+0x5c>
 8005b42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b44:	07dc      	lsls	r4, r3, #31
 8005b46:	d504      	bpl.n	8005b52 <_vfiprintf_r+0x4e>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	b01d      	add	sp, #116	@ 0x74
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	0598      	lsls	r0, r3, #22
 8005b56:	d4f7      	bmi.n	8005b48 <_vfiprintf_r+0x44>
 8005b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b5a:	f7ff fa69 	bl	8005030 <__retarget_lock_release_recursive>
 8005b5e:	e7f3      	b.n	8005b48 <_vfiprintf_r+0x44>
 8005b60:	2300      	movs	r3, #0
 8005b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b64:	2320      	movs	r3, #32
 8005b66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b6a:	2330      	movs	r3, #48	@ 0x30
 8005b6c:	f04f 0901 	mov.w	r9, #1
 8005b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d20 <_vfiprintf_r+0x21c>
 8005b78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	469a      	mov	sl, r3
 8005b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b84:	b10a      	cbz	r2, 8005b8a <_vfiprintf_r+0x86>
 8005b86:	2a25      	cmp	r2, #37	@ 0x25
 8005b88:	d1f9      	bne.n	8005b7e <_vfiprintf_r+0x7a>
 8005b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8e:	d00b      	beq.n	8005ba8 <_vfiprintf_r+0xa4>
 8005b90:	465b      	mov	r3, fp
 8005b92:	4622      	mov	r2, r4
 8005b94:	4629      	mov	r1, r5
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff ffa2 	bl	8005ae0 <__sfputs_r>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f000 80a7 	beq.w	8005cf0 <_vfiprintf_r+0x1ec>
 8005ba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ba4:	445a      	add	r2, fp
 8005ba6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 809f 	beq.w	8005cf0 <_vfiprintf_r+0x1ec>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bbc:	f10a 0a01 	add.w	sl, sl, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	9307      	str	r3, [sp, #28]
 8005bc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bca:	4654      	mov	r4, sl
 8005bcc:	2205      	movs	r2, #5
 8005bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd2:	4853      	ldr	r0, [pc, #332]	@ (8005d20 <_vfiprintf_r+0x21c>)
 8005bd4:	f7ff ff1e 	bl	8005a14 <memchr>
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	b9d8      	cbnz	r0, 8005c14 <_vfiprintf_r+0x110>
 8005bdc:	06d1      	lsls	r1, r2, #27
 8005bde:	bf44      	itt	mi
 8005be0:	2320      	movmi	r3, #32
 8005be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be6:	0713      	lsls	r3, r2, #28
 8005be8:	bf44      	itt	mi
 8005bea:	232b      	movmi	r3, #43	@ 0x2b
 8005bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf6:	d015      	beq.n	8005c24 <_vfiprintf_r+0x120>
 8005bf8:	4654      	mov	r4, sl
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f04f 0c0a 	mov.w	ip, #10
 8005c00:	9a07      	ldr	r2, [sp, #28]
 8005c02:	4621      	mov	r1, r4
 8005c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c08:	3b30      	subs	r3, #48	@ 0x30
 8005c0a:	2b09      	cmp	r3, #9
 8005c0c:	d94b      	bls.n	8005ca6 <_vfiprintf_r+0x1a2>
 8005c0e:	b1b0      	cbz	r0, 8005c3e <_vfiprintf_r+0x13a>
 8005c10:	9207      	str	r2, [sp, #28]
 8005c12:	e014      	b.n	8005c3e <_vfiprintf_r+0x13a>
 8005c14:	eba0 0308 	sub.w	r3, r0, r8
 8005c18:	fa09 f303 	lsl.w	r3, r9, r3
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	46a2      	mov	sl, r4
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	e7d2      	b.n	8005bca <_vfiprintf_r+0xc6>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	1d19      	adds	r1, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	9103      	str	r1, [sp, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bfbb      	ittet	lt
 8005c30:	425b      	neglt	r3, r3
 8005c32:	f042 0202 	orrlt.w	r2, r2, #2
 8005c36:	9307      	strge	r3, [sp, #28]
 8005c38:	9307      	strlt	r3, [sp, #28]
 8005c3a:	bfb8      	it	lt
 8005c3c:	9204      	strlt	r2, [sp, #16]
 8005c3e:	7823      	ldrb	r3, [r4, #0]
 8005c40:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c42:	d10a      	bne.n	8005c5a <_vfiprintf_r+0x156>
 8005c44:	7863      	ldrb	r3, [r4, #1]
 8005c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c48:	d132      	bne.n	8005cb0 <_vfiprintf_r+0x1ac>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	3402      	adds	r4, #2
 8005c4e:	1d1a      	adds	r2, r3, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	9203      	str	r2, [sp, #12]
 8005c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c58:	9305      	str	r3, [sp, #20]
 8005c5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d24 <_vfiprintf_r+0x220>
 8005c5e:	2203      	movs	r2, #3
 8005c60:	4650      	mov	r0, sl
 8005c62:	7821      	ldrb	r1, [r4, #0]
 8005c64:	f7ff fed6 	bl	8005a14 <memchr>
 8005c68:	b138      	cbz	r0, 8005c7a <_vfiprintf_r+0x176>
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	eba0 000a 	sub.w	r0, r0, sl
 8005c72:	4082      	lsls	r2, r0
 8005c74:	4313      	orrs	r3, r2
 8005c76:	3401      	adds	r4, #1
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7e:	2206      	movs	r2, #6
 8005c80:	4829      	ldr	r0, [pc, #164]	@ (8005d28 <_vfiprintf_r+0x224>)
 8005c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c86:	f7ff fec5 	bl	8005a14 <memchr>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d03f      	beq.n	8005d0e <_vfiprintf_r+0x20a>
 8005c8e:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <_vfiprintf_r+0x228>)
 8005c90:	bb1b      	cbnz	r3, 8005cda <_vfiprintf_r+0x1d6>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	3307      	adds	r3, #7
 8005c96:	f023 0307 	bic.w	r3, r3, #7
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca0:	443b      	add	r3, r7
 8005ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca4:	e76a      	b.n	8005b7c <_vfiprintf_r+0x78>
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2001      	movs	r0, #1
 8005caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cae:	e7a8      	b.n	8005c02 <_vfiprintf_r+0xfe>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	3401      	adds	r4, #1
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc2:	3a30      	subs	r2, #48	@ 0x30
 8005cc4:	2a09      	cmp	r2, #9
 8005cc6:	d903      	bls.n	8005cd0 <_vfiprintf_r+0x1cc>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0c6      	beq.n	8005c5a <_vfiprintf_r+0x156>
 8005ccc:	9105      	str	r1, [sp, #20]
 8005cce:	e7c4      	b.n	8005c5a <_vfiprintf_r+0x156>
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd8:	e7f0      	b.n	8005cbc <_vfiprintf_r+0x1b8>
 8005cda:	ab03      	add	r3, sp, #12
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <_vfiprintf_r+0x22c>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	f3af 8000 	nop.w
 8005cea:	4607      	mov	r7, r0
 8005cec:	1c78      	adds	r0, r7, #1
 8005cee:	d1d6      	bne.n	8005c9e <_vfiprintf_r+0x19a>
 8005cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cf2:	07d9      	lsls	r1, r3, #31
 8005cf4:	d405      	bmi.n	8005d02 <_vfiprintf_r+0x1fe>
 8005cf6:	89ab      	ldrh	r3, [r5, #12]
 8005cf8:	059a      	lsls	r2, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_vfiprintf_r+0x1fe>
 8005cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cfe:	f7ff f997 	bl	8005030 <__retarget_lock_release_recursive>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	065b      	lsls	r3, r3, #25
 8005d06:	f53f af1f 	bmi.w	8005b48 <_vfiprintf_r+0x44>
 8005d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d0c:	e71e      	b.n	8005b4c <_vfiprintf_r+0x48>
 8005d0e:	ab03      	add	r3, sp, #12
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	462a      	mov	r2, r5
 8005d14:	4630      	mov	r0, r6
 8005d16:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <_vfiprintf_r+0x22c>)
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	f7ff fc79 	bl	8005610 <_printf_i>
 8005d1e:	e7e4      	b.n	8005cea <_vfiprintf_r+0x1e6>
 8005d20:	08006548 	.word	0x08006548
 8005d24:	0800654e 	.word	0x0800654e
 8005d28:	08006552 	.word	0x08006552
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	08005ae1 	.word	0x08005ae1

08005d34 <__swbuf_r>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	460e      	mov	r6, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	b118      	cbz	r0, 8005d46 <__swbuf_r+0x12>
 8005d3e:	6a03      	ldr	r3, [r0, #32]
 8005d40:	b90b      	cbnz	r3, 8005d46 <__swbuf_r+0x12>
 8005d42:	f7fe ffe3 	bl	8004d0c <__sinit>
 8005d46:	69a3      	ldr	r3, [r4, #24]
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	071a      	lsls	r2, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <__swbuf_r+0x20>
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	b943      	cbnz	r3, 8005d66 <__swbuf_r+0x32>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f82a 	bl	8005db0 <__swsetup_r>
 8005d5c:	b118      	cbz	r0, 8005d66 <__swbuf_r+0x32>
 8005d5e:	f04f 37ff 	mov.w	r7, #4294967295
 8005d62:	4638      	mov	r0, r7
 8005d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	6922      	ldr	r2, [r4, #16]
 8005d6a:	b2f6      	uxtb	r6, r6
 8005d6c:	1a98      	subs	r0, r3, r2
 8005d6e:	6963      	ldr	r3, [r4, #20]
 8005d70:	4637      	mov	r7, r6
 8005d72:	4283      	cmp	r3, r0
 8005d74:	dc05      	bgt.n	8005d82 <__swbuf_r+0x4e>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f7ff fde7 	bl	800594c <_fflush_r>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1ed      	bne.n	8005d5e <__swbuf_r+0x2a>
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	60a3      	str	r3, [r4, #8]
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	6022      	str	r2, [r4, #0]
 8005d8e:	701e      	strb	r6, [r3, #0]
 8005d90:	6962      	ldr	r2, [r4, #20]
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d004      	beq.n	8005da2 <__swbuf_r+0x6e>
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d5e1      	bpl.n	8005d62 <__swbuf_r+0x2e>
 8005d9e:	2e0a      	cmp	r6, #10
 8005da0:	d1df      	bne.n	8005d62 <__swbuf_r+0x2e>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f7ff fdd1 	bl	800594c <_fflush_r>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0d9      	beq.n	8005d62 <__swbuf_r+0x2e>
 8005dae:	e7d6      	b.n	8005d5e <__swbuf_r+0x2a>

08005db0 <__swsetup_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <__swsetup_r+0xa8>)
 8005db4:	4605      	mov	r5, r0
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	460c      	mov	r4, r1
 8005dba:	b118      	cbz	r0, 8005dc4 <__swsetup_r+0x14>
 8005dbc:	6a03      	ldr	r3, [r0, #32]
 8005dbe:	b90b      	cbnz	r3, 8005dc4 <__swsetup_r+0x14>
 8005dc0:	f7fe ffa4 	bl	8004d0c <__sinit>
 8005dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc8:	0719      	lsls	r1, r3, #28
 8005dca:	d422      	bmi.n	8005e12 <__swsetup_r+0x62>
 8005dcc:	06da      	lsls	r2, r3, #27
 8005dce:	d407      	bmi.n	8005de0 <__swsetup_r+0x30>
 8005dd0:	2209      	movs	r2, #9
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	e033      	b.n	8005e48 <__swsetup_r+0x98>
 8005de0:	0758      	lsls	r0, r3, #29
 8005de2:	d512      	bpl.n	8005e0a <__swsetup_r+0x5a>
 8005de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005de6:	b141      	cbz	r1, 8005dfa <__swsetup_r+0x4a>
 8005de8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d002      	beq.n	8005df6 <__swsetup_r+0x46>
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7ff f945 	bl	8005080 <_free_r>
 8005df6:	2300      	movs	r3, #0
 8005df8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	2300      	movs	r3, #0
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f043 0308 	orr.w	r3, r3, #8
 8005e10:	81a3      	strh	r3, [r4, #12]
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	b94b      	cbnz	r3, 8005e2a <__swsetup_r+0x7a>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e20:	d003      	beq.n	8005e2a <__swsetup_r+0x7a>
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f88a 	bl	8005f3e <__smakebuf_r>
 8005e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e2e:	f013 0201 	ands.w	r2, r3, #1
 8005e32:	d00a      	beq.n	8005e4a <__swsetup_r+0x9a>
 8005e34:	2200      	movs	r2, #0
 8005e36:	60a2      	str	r2, [r4, #8]
 8005e38:	6962      	ldr	r2, [r4, #20]
 8005e3a:	4252      	negs	r2, r2
 8005e3c:	61a2      	str	r2, [r4, #24]
 8005e3e:	6922      	ldr	r2, [r4, #16]
 8005e40:	b942      	cbnz	r2, 8005e54 <__swsetup_r+0xa4>
 8005e42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e46:	d1c5      	bne.n	8005dd4 <__swsetup_r+0x24>
 8005e48:	bd38      	pop	{r3, r4, r5, pc}
 8005e4a:	0799      	lsls	r1, r3, #30
 8005e4c:	bf58      	it	pl
 8005e4e:	6962      	ldrpl	r2, [r4, #20]
 8005e50:	60a2      	str	r2, [r4, #8]
 8005e52:	e7f4      	b.n	8005e3e <__swsetup_r+0x8e>
 8005e54:	2000      	movs	r0, #0
 8005e56:	e7f7      	b.n	8005e48 <__swsetup_r+0x98>
 8005e58:	20000124 	.word	0x20000124

08005e5c <_raise_r>:
 8005e5c:	291f      	cmp	r1, #31
 8005e5e:	b538      	push	{r3, r4, r5, lr}
 8005e60:	4605      	mov	r5, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	d904      	bls.n	8005e70 <_raise_r+0x14>
 8005e66:	2316      	movs	r3, #22
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e72:	b112      	cbz	r2, 8005e7a <_raise_r+0x1e>
 8005e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e78:	b94b      	cbnz	r3, 8005e8e <_raise_r+0x32>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f830 	bl	8005ee0 <_getpid_r>
 8005e80:	4622      	mov	r2, r4
 8005e82:	4601      	mov	r1, r0
 8005e84:	4628      	mov	r0, r5
 8005e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e8a:	f000 b817 	b.w	8005ebc <_kill_r>
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d00a      	beq.n	8005ea8 <_raise_r+0x4c>
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	d103      	bne.n	8005e9e <_raise_r+0x42>
 8005e96:	2316      	movs	r3, #22
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	e7e7      	b.n	8005e6e <_raise_r+0x12>
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ea6:	4798      	blx	r3
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e7e0      	b.n	8005e6e <_raise_r+0x12>

08005eac <raise>:
 8005eac:	4b02      	ldr	r3, [pc, #8]	@ (8005eb8 <raise+0xc>)
 8005eae:	4601      	mov	r1, r0
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	f7ff bfd3 	b.w	8005e5c <_raise_r>
 8005eb6:	bf00      	nop
 8005eb8:	20000124 	.word	0x20000124

08005ebc <_kill_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d06      	ldr	r5, [pc, #24]	@ (8005edc <_kill_r+0x20>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f7fb ff98 	bl	8001dfe <_kill>
 8005ece:	1c43      	adds	r3, r0, #1
 8005ed0:	d102      	bne.n	8005ed8 <_kill_r+0x1c>
 8005ed2:	682b      	ldr	r3, [r5, #0]
 8005ed4:	b103      	cbz	r3, 8005ed8 <_kill_r+0x1c>
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	bf00      	nop
 8005edc:	20000570 	.word	0x20000570

08005ee0 <_getpid_r>:
 8005ee0:	f7fb bf86 	b.w	8001df0 <_getpid>

08005ee4 <_malloc_usable_size_r>:
 8005ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee8:	1f18      	subs	r0, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfbc      	itt	lt
 8005eee:	580b      	ldrlt	r3, [r1, r0]
 8005ef0:	18c0      	addlt	r0, r0, r3
 8005ef2:	4770      	bx	lr

08005ef4 <__swhatbuf_r>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efc:	4615      	mov	r5, r2
 8005efe:	2900      	cmp	r1, #0
 8005f00:	461e      	mov	r6, r3
 8005f02:	b096      	sub	sp, #88	@ 0x58
 8005f04:	da0c      	bge.n	8005f20 <__swhatbuf_r+0x2c>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f0e:	bf14      	ite	ne
 8005f10:	2340      	movne	r3, #64	@ 0x40
 8005f12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f16:	2000      	movs	r0, #0
 8005f18:	6031      	str	r1, [r6, #0]
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	b016      	add	sp, #88	@ 0x58
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	466a      	mov	r2, sp
 8005f22:	f000 f849 	bl	8005fb8 <_fstat_r>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	dbed      	blt.n	8005f06 <__swhatbuf_r+0x12>
 8005f2a:	9901      	ldr	r1, [sp, #4]
 8005f2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f34:	4259      	negs	r1, r3
 8005f36:	4159      	adcs	r1, r3
 8005f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f3c:	e7eb      	b.n	8005f16 <__swhatbuf_r+0x22>

08005f3e <__smakebuf_r>:
 8005f3e:	898b      	ldrh	r3, [r1, #12]
 8005f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f42:	079d      	lsls	r5, r3, #30
 8005f44:	4606      	mov	r6, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	d507      	bpl.n	8005f5a <__smakebuf_r+0x1c>
 8005f4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	2301      	movs	r3, #1
 8005f54:	6163      	str	r3, [r4, #20]
 8005f56:	b003      	add	sp, #12
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5a:	466a      	mov	r2, sp
 8005f5c:	ab01      	add	r3, sp, #4
 8005f5e:	f7ff ffc9 	bl	8005ef4 <__swhatbuf_r>
 8005f62:	9f00      	ldr	r7, [sp, #0]
 8005f64:	4605      	mov	r5, r0
 8005f66:	4639      	mov	r1, r7
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff f8fb 	bl	8005164 <_malloc_r>
 8005f6e:	b948      	cbnz	r0, 8005f84 <__smakebuf_r+0x46>
 8005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f74:	059a      	lsls	r2, r3, #22
 8005f76:	d4ee      	bmi.n	8005f56 <__smakebuf_r+0x18>
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	e7e2      	b.n	8005f4a <__smakebuf_r+0xc>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	9b01      	ldr	r3, [sp, #4]
 8005f92:	6020      	str	r0, [r4, #0]
 8005f94:	b15b      	cbz	r3, 8005fae <__smakebuf_r+0x70>
 8005f96:	4630      	mov	r0, r6
 8005f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9c:	f000 f81e 	bl	8005fdc <_isatty_r>
 8005fa0:	b128      	cbz	r0, 8005fae <__smakebuf_r+0x70>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	f023 0303 	bic.w	r3, r3, #3
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	431d      	orrs	r5, r3
 8005fb2:	81a5      	strh	r5, [r4, #12]
 8005fb4:	e7cf      	b.n	8005f56 <__smakebuf_r+0x18>
	...

08005fb8 <_fstat_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d06      	ldr	r5, [pc, #24]	@ (8005fd8 <_fstat_r+0x20>)
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	f7fb ff79 	bl	8001ebc <_fstat>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d102      	bne.n	8005fd4 <_fstat_r+0x1c>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	b103      	cbz	r3, 8005fd4 <_fstat_r+0x1c>
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000570 	.word	0x20000570

08005fdc <_isatty_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4d05      	ldr	r5, [pc, #20]	@ (8005ff8 <_isatty_r+0x1c>)
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fb ff77 	bl	8001eda <_isatty>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_isatty_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_isatty_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000570 	.word	0x20000570

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
