
UESTC_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb8  08002fb8  0000403c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002fb8  08002fb8  00003fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc0  08002fc0  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00003fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00003fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002fc8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000003c  08003004  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003004  00004258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1d1  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7a  00000000  00000000  00010236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00011fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  00012c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d7e  00000000  00000000  0001360e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e03f  00000000  00000000  0001538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afb4  00000000  00000000  000233cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000ae3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b1850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ef0 	.word	0x08002ef0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002ef0 	.word	0x08002ef0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fcf2 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f818 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fa04 	bl	8000578 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000170:	f000 f84e 	bl	8000210 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000174:	f000 f8ce 	bl	8000314 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000178:	f000 f924 	bl	80003c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800017c:	f000 f97a 	bl	8000474 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000180:	f000 f9d0 	bl	8000524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <main+0x34>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <main+0x38>)
 800018a:	f002 f946 	bl	800241a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018e:	bf00      	nop
 8000190:	e7fd      	b.n	800018e <main+0x2e>
 8000192:	bf00      	nop
 8000194:	200001c0 	.word	0x200001c0
 8000198:	20000178 	.word	0x20000178

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	@ 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	@ 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 fe6c 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001be:	2301      	movs	r3, #1
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c8:	2300      	movs	r3, #0
 80001ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f861 	bl	8001298 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001dc:	f000 fa52 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001e4:	2301      	movs	r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 facf 	bl	800179c <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000204:	f000 fa3e 	bl	8000684 <Error_Handler>
  }
}
 8000208:	bf00      	nop
 800020a:	3740      	adds	r7, #64	@ 0x40
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b092      	sub	sp, #72	@ 0x48
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000216:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2220      	movs	r2, #32
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fe24 	bl	8002e88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000240:	4b32      	ldr	r3, [pc, #200]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000242:	4a33      	ldr	r2, [pc, #204]	@ (8000310 <MX_TIM1_Init+0x100>)
 8000244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8000246:	4b31      	ldr	r3, [pc, #196]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000248:	2213      	movs	r2, #19
 800024a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024c:	4b2f      	ldr	r3, [pc, #188]	@ (800030c <MX_TIM1_Init+0xfc>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000252:	4b2e      	ldr	r3, [pc, #184]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000254:	2209      	movs	r2, #9
 8000256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000258:	4b2c      	ldr	r3, [pc, #176]	@ (800030c <MX_TIM1_Init+0xfc>)
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800025e:	4b2b      	ldr	r3, [pc, #172]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000260:	2200      	movs	r2, #0
 8000262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000264:	4b29      	ldr	r3, [pc, #164]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000266:	2200      	movs	r2, #0
 8000268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800026a:	4828      	ldr	r0, [pc, #160]	@ (800030c <MX_TIM1_Init+0xfc>)
 800026c:	f001 fc24 	bl	8001ab8 <HAL_TIM_OC_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000276:	f000 fa05 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800027a:	2300      	movs	r3, #0
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027e:	2300      	movs	r3, #0
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000282:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000286:	4619      	mov	r1, r3
 8000288:	4820      	ldr	r0, [pc, #128]	@ (800030c <MX_TIM1_Init+0xfc>)
 800028a:	f001 ffc7 	bl	800221c <HAL_TIMEx_MasterConfigSynchronization>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000294:	f000 f9f6 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002a0:	2300      	movs	r3, #0
 80002a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002a4:	2300      	movs	r3, #0
 80002a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002ac:	2300      	movs	r3, #0
 80002ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002b0:	2300      	movs	r3, #0
 80002b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4813      	ldr	r0, [pc, #76]	@ (800030c <MX_TIM1_Init+0xfc>)
 80002be:	f001 fc99 	bl	8001bf4 <HAL_TIM_OC_ConfigChannel>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80002c8:	f000 f9dc 	bl	8000684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80002e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4807      	ldr	r0, [pc, #28]	@ (800030c <MX_TIM1_Init+0xfc>)
 80002f0:	f001 fff2 	bl	80022d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80002fa:	f000 f9c3 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80002fe:	4803      	ldr	r0, [pc, #12]	@ (800030c <MX_TIM1_Init+0xfc>)
 8000300:	f000 fada 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 8000304:	bf00      	nop
 8000306:	3748      	adds	r7, #72	@ 0x48
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000058 	.word	0x20000058
 8000310:	40012c00 	.word	0x40012c00

08000314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	@ 0x28
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031a:	f107 0320 	add.w	r3, r7, #32
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]
 8000334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000336:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <MX_TIM2_Init+0xac>)
 8000338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 800033e:	4b20      	ldr	r3, [pc, #128]	@ (80003c0 <MX_TIM2_Init+0xac>)
 8000340:	2213      	movs	r2, #19
 8000342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b1e      	ldr	r3, [pc, #120]	@ (80003c0 <MX_TIM2_Init+0xac>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <MX_TIM2_Init+0xac>)
 800034c:	2209      	movs	r2, #9
 800034e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_TIM2_Init+0xac>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_TIM2_Init+0xac>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800035c:	4818      	ldr	r0, [pc, #96]	@ (80003c0 <MX_TIM2_Init+0xac>)
 800035e:	f001 fbfa 	bl	8001b56 <HAL_TIM_PWM_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000368:	f000 f98c 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000374:	f107 0320 	add.w	r3, r7, #32
 8000378:	4619      	mov	r1, r3
 800037a:	4811      	ldr	r0, [pc, #68]	@ (80003c0 <MX_TIM2_Init+0xac>)
 800037c:	f001 ff4e 	bl	800221c <HAL_TIMEx_MasterConfigSynchronization>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000386:	f000 f97d 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038a:	2360      	movs	r3, #96	@ 0x60
 800038c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2208      	movs	r2, #8
 800039e:	4619      	mov	r1, r3
 80003a0:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <MX_TIM2_Init+0xac>)
 80003a2:	f001 fc83 	bl	8001cac <HAL_TIM_PWM_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003ac:	f000 f96a 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <MX_TIM2_Init+0xac>)
 80003b2:	f000 fa81 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 80003b6:	bf00      	nop
 80003b8:	3728      	adds	r7, #40	@ 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200000a0 	.word	0x200000a0

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	@ 0x28
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ca:	f107 0320 	add.w	r3, r7, #32
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <MX_TIM3_Init+0xa8>)
 80003e8:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <MX_TIM3_Init+0xac>)
 80003ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_TIM3_Init+0xa8>)
 80003ee:	2213      	movs	r2, #19
 80003f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	@ (800046c <MX_TIM3_Init+0xa8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <MX_TIM3_Init+0xa8>)
 80003fa:	2209      	movs	r2, #9
 80003fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_TIM3_Init+0xa8>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <MX_TIM3_Init+0xa8>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800040a:	4818      	ldr	r0, [pc, #96]	@ (800046c <MX_TIM3_Init+0xa8>)
 800040c:	f001 fba3 	bl	8001b56 <HAL_TIM_PWM_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000416:	f000 f935 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	4619      	mov	r1, r3
 8000428:	4810      	ldr	r0, [pc, #64]	@ (800046c <MX_TIM3_Init+0xa8>)
 800042a:	f001 fef7 	bl	800221c <HAL_TIMEx_MasterConfigSynchronization>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000434:	f000 f926 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000438:	2360      	movs	r3, #96	@ 0x60
 800043a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	4619      	mov	r1, r3
 800044e:	4807      	ldr	r0, [pc, #28]	@ (800046c <MX_TIM3_Init+0xa8>)
 8000450:	f001 fc2c 	bl	8001cac <HAL_TIM_PWM_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800045a:	f000 f913 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800045e:	4803      	ldr	r0, [pc, #12]	@ (800046c <MX_TIM3_Init+0xa8>)
 8000460:	f000 fa2a 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	@ 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000e8 	.word	0x200000e8
 8000470:	40000400 	.word	0x40000400

08000474 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	@ 0x28
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	f107 0320 	add.w	r3, r7, #32
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000496:	4b21      	ldr	r3, [pc, #132]	@ (800051c <MX_TIM4_Init+0xa8>)
 8000498:	4a21      	ldr	r2, [pc, #132]	@ (8000520 <MX_TIM4_Init+0xac>)
 800049a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 800049c:	4b1f      	ldr	r3, [pc, #124]	@ (800051c <MX_TIM4_Init+0xa8>)
 800049e:	2213      	movs	r2, #19
 80004a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a2:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004aa:	2209      	movs	r2, #9
 80004ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004ba:	4818      	ldr	r0, [pc, #96]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004bc:	f001 fb4b 	bl	8001b56 <HAL_TIM_PWM_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80004c6:	f000 f8dd 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	4619      	mov	r1, r3
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <MX_TIM4_Init+0xa8>)
 80004da:	f001 fe9f 	bl	800221c <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80004e4:	f000 f8ce 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e8:	2360      	movs	r3, #96	@ 0x60
 80004ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2208      	movs	r2, #8
 80004fc:	4619      	mov	r1, r3
 80004fe:	4807      	ldr	r0, [pc, #28]	@ (800051c <MX_TIM4_Init+0xa8>)
 8000500:	f001 fbd4 	bl	8001cac <HAL_TIM_PWM_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800050a:	f000 f8bb 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800050e:	4803      	ldr	r0, [pc, #12]	@ (800051c <MX_TIM4_Init+0xa8>)
 8000510:	f000 f9d2 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 8000514:	bf00      	nop
 8000516:	3728      	adds	r7, #40	@ 0x28
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000130 	.word	0x20000130
 8000520:	40000800 	.word	0x40000800

08000524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <MX_USART1_UART_Init+0x50>)
 800052c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <MX_USART1_UART_Init+0x4c>)
 800055c:	f001 ff0d 	bl	800237a <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000566:	f000 f88d 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000178 	.word	0x20000178
 8000574:	40013800 	.word	0x40013800

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_GPIO_Init+0x58>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a13      	ldr	r2, [pc, #76]	@ (80005d0 <MX_GPIO_Init+0x58>)
 8000584:	f043 0320 	orr.w	r3, r3, #32
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_GPIO_Init+0x58>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0320 	and.w	r3, r3, #32
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_GPIO_Init+0x58>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <MX_GPIO_Init+0x58>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0x58>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_GPIO_Init+0x58>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <MX_GPIO_Init+0x58>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <MX_GPIO_Init+0x58>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <HAL_UART_RxCpltCallback+0x94>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d13b      	bne.n	800065e <HAL_UART_RxCpltCallback+0x8a>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <HAL_UART_RxCpltCallback+0x98>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80005ec:	d81a      	bhi.n	8000624 <HAL_UART_RxCpltCallback+0x50>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <HAL_UART_RxCpltCallback+0x98>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	491d      	ldr	r1, [pc, #116]	@ (800066c <HAL_UART_RxCpltCallback+0x98>)
 80005f6:	600a      	str	r2, [r1, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000670 <HAL_UART_RxCpltCallback+0x9c>)
 80005fa:	7811      	ldrb	r1, [r2, #0]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000674 <HAL_UART_RxCpltCallback+0xa0>)
 80005fe:	54d1      	strb	r1, [r2, r3]
            if((char)rx_it_buffer == '\n'){
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <HAL_UART_RxCpltCallback+0x9c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d10d      	bne.n	8000624 <HAL_UART_RxCpltCallback+0x50>
            	if (!debut_de_trame){
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <HAL_UART_RxCpltCallback+0xa4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f083 0301 	eor.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <HAL_UART_RxCpltCallback+0x4a>
            		debut_de_trame = true;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <HAL_UART_RxCpltCallback+0xa4>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e002      	b.n	8000624 <HAL_UART_RxCpltCallback+0x50>
            	}
            	else{
            		fin_de_trame = true;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <HAL_UART_RxCpltCallback+0xa8>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <HAL_UART_RxCpltCallback+0xa8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d013      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x80>
        	process_trame_rx(receive_buffer);  // traite la trame
 800062c:	4811      	ldr	r0, [pc, #68]	@ (8000674 <HAL_UART_RxCpltCallback+0xa0>)
 800062e:	f000 f877 	bl	8000720 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 8000632:	2240      	movs	r2, #64	@ 0x40
 8000634:	2100      	movs	r1, #0
 8000636:	480f      	ldr	r0, [pc, #60]	@ (8000674 <HAL_UART_RxCpltCallback+0xa0>)
 8000638:	f002 fc26 	bl	8002e88 <memset>
            receive_index = 0;              // réinitialise l'index
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <HAL_UART_RxCpltCallback+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <HAL_UART_RxCpltCallback+0xa4>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_UART_RxCpltCallback+0xa8>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <HAL_UART_RxCpltCallback+0x9c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]


        }

        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	4906      	ldr	r1, [pc, #24]	@ (8000670 <HAL_UART_RxCpltCallback+0x9c>)
 8000658:	4809      	ldr	r0, [pc, #36]	@ (8000680 <HAL_UART_RxCpltCallback+0xac>)
 800065a:	f001 fede 	bl	800241a <HAL_UART_Receive_IT>
    }
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40013800 	.word	0x40013800
 800066c:	200001c4 	.word	0x200001c4
 8000670:	200001c0 	.word	0x200001c0
 8000674:	200001cc 	.word	0x200001cc
 8000678:	200001c8 	.word	0x200001c8
 800067c:	200001c9 	.word	0x200001c9
 8000680:	20000178 	.word	0x20000178

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <Error_Handler+0x8>

08000690 <handle_BLE_DISC>:
    {"\r\nBLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <handle_BLE_DISC+0x14>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2000024c 	.word	0x2000024c

080006a8 <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <handle_BLE_CONN+0x14>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000024c 	.word	0x2000024c

080006c0 <handle_OK>:

void handle_OK(void){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	flags.OK = true;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <handle_OK+0x14>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	70da      	strb	r2, [r3, #3]
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000024c 	.word	0x2000024c

080006d8 <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <handle_ERR_CMD+0x14>)
 80006de:	2201      	movs	r2, #1
 80006e0:	711a      	strb	r2, [r3, #4]
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000024c 	.word	0x2000024c

080006f0 <handle_RSTING>:

void handle_RSTING(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <handle_RSTING+0x14>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	715a      	strb	r2, [r3, #5]
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	2000024c 	.word	0x2000024c

08000708 <handle_CONNECTING>:
void handle_CONNECTING(void){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <handle_CONNECTING+0x14>)
 800070e:	2201      	movs	r2, #1
 8000710:	719a      	strb	r2, [r3, #6]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	2000024c 	.word	0x2000024c

08000720 <process_trame_rx>:


// fonctions
void process_trame_rx(char* receive_buffer) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d025      	beq.n	800077c <process_trame_rx+0x5c>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	e017      	b.n	8000766 <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <process_trame_rx+0x64>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fd03 	bl	800014c <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d109      	bne.n	8000760 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <process_trame_rx+0x64>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <process_trame_rx+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 800075e:	e00e      	b.n	800077e <process_trame_rx+0x5e>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b05      	cmp	r3, #5
 800076a:	dde4      	ble.n	8000736 <process_trame_rx+0x16>
			}
		}
		flags.UNKNOW_COMMAND = true;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <process_trame_rx+0x68>)
 800076e:	2201      	movs	r2, #1
 8000770:	709a      	strb	r2, [r3, #2]
		strcpy(receive_buffer, unknow_command); //utile pr le debug
 8000772:	4906      	ldr	r1, [pc, #24]	@ (800078c <process_trame_rx+0x6c>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 fbb3 	bl	8002ee0 <strcpy>
		return;
 800077a:	e000      	b.n	800077e <process_trame_rx+0x5e>
		return;
 800077c:	bf00      	nop
		}
}
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	2000024c 	.word	0x2000024c
 800078c:	2000020c 	.word	0x2000020c

08000790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_MspInit+0x5c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <HAL_MspInit+0x5c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <HAL_MspInit+0x5c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <HAL_MspInit+0x5c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_MspInit+0x60>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <HAL_MspInit+0x60>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000

080007f4 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a09      	ldr	r2, [pc, #36]	@ (8000828 <HAL_TIM_OC_MspInit+0x34>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_TIM_OC_MspInit+0x38>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <HAL_TIM_OC_MspInit+0x38>)
 800080c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_TIM_OC_MspInit+0x38>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40012c00 	.word	0x40012c00
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000840:	d10c      	bne.n	800085c <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800085a:	e022      	b.n	80008a2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_TIM_PWM_MspInit+0x80>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10c      	bne.n	8000880 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
}
 800087e:	e010      	b.n	80008a2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0b      	ldr	r2, [pc, #44]	@ (80008b4 <HAL_TIM_PWM_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10b      	bne.n	80008a2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_TIM_PWM_MspInit+0x7c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40000400 	.word	0x40000400
 80008b4:	40000800 	.word	0x40000800

080008b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a3d      	ldr	r2, [pc, #244]	@ (80009c8 <HAL_TIM_MspPostInit+0x110>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d119      	bne.n	800090c <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b3c      	ldr	r3, [pc, #240]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a3b      	ldr	r2, [pc, #236]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b39      	ldr	r3, [pc, #228]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	4619      	mov	r1, r3
 8000904:	4832      	ldr	r0, [pc, #200]	@ (80009d0 <HAL_TIM_MspPostInit+0x118>)
 8000906:	f000 fb43 	bl	8000f90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800090a:	e059      	b.n	80009c0 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000914:	d118      	bne.n	8000948 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a2c      	ldr	r2, [pc, #176]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800092e:	2304      	movs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2302      	movs	r3, #2
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4619      	mov	r1, r3
 8000940:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <HAL_TIM_MspPostInit+0x118>)
 8000942:	f000 fb25 	bl	8000f90 <HAL_GPIO_Init>
}
 8000946:	e03b      	b.n	80009c0 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <HAL_TIM_MspPostInit+0x11c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d118      	bne.n	8000984 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a1d      	ldr	r2, [pc, #116]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	4619      	mov	r1, r3
 800097c:	4814      	ldr	r0, [pc, #80]	@ (80009d0 <HAL_TIM_MspPostInit+0x118>)
 800097e:	f000 fb07 	bl	8000f90 <HAL_GPIO_Init>
}
 8000982:	e01d      	b.n	80009c0 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <HAL_TIM_MspPostInit+0x120>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d118      	bne.n	80009c0 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_TIM_MspPostInit+0x114>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <HAL_TIM_MspPostInit+0x124>)
 80009bc:	f000 fae8 	bl	8000f90 <HAL_GPIO_Init>
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40012c00 	.word	0x40012c00
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40000400 	.word	0x40000400
 80009d8:	40000800 	.word	0x40000800
 80009dc:	40010c00 	.word	0x40010c00

080009e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <HAL_UART_MspInit+0x9c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d139      	bne.n	8000a74 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <HAL_UART_MspInit+0xa0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <HAL_UART_MspInit+0xa4>)
 8000a46:	f000 faa3 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <HAL_UART_MspInit+0xa4>)
 8000a60:	f000 fa96 	bl	8000f90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2025      	movs	r0, #37	@ 0x25
 8000a6a:	f000 f9a8 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a6e:	2025      	movs	r0, #37	@ 0x25
 8000a70:	f000 f9c1 	bl	8000df6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f87e 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART1_IRQHandler+0x10>)
 8000ae6:	f001 fcbd 	bl	8002464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000178 	.word	0x20000178

08000af4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff fff8 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b06:	490c      	ldr	r1, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b08:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b1c:	4c09      	ldr	r4, [pc, #36]	@ (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 f9b5 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fb17 	bl	8000160 <main>
  bx lr
 8000b32:	4770      	bx	lr
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000b3c:	08002fc8 	.word	0x08002fc8
  ldr r2, =_sbss
 8000b40:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000b44:	20000258 	.word	0x20000258

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f923 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe12 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f93b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f903 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000030 	.word	0x20000030
 8000bd0:	20000038 	.word	0x20000038
 8000bd4:	20000034 	.word	0x20000034

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a03      	ldr	r2, [pc, #12]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	20000254 	.word	0x20000254

08000bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b02      	ldr	r3, [pc, #8]	@ (8000c0c <HAL_GetTick+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000254 	.word	0x20000254

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4906      	ldr	r1, [pc, #24]	@ (8000ca8 <__NVIC_EnableIRQ+0x34>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff90 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff2d 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff42 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff35 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d008      	beq.n	8000e54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2204      	movs	r2, #4
 8000e46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e020      	b.n	8000e96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 020e 	bic.w	r2, r2, #14
 8000e62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d005      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e051      	b.n	8000f68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 020e 	bic.w	r2, r2, #14
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <HAL_DMA_Abort_IT+0xd4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d029      	beq.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <HAL_DMA_Abort_IT+0xd8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d022      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x9e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f7c <HAL_DMA_Abort_IT+0xdc>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01a      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x98>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <HAL_DMA_Abort_IT+0xe0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d012      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x92>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <HAL_DMA_Abort_IT+0xe4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00a      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x8c>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <HAL_DMA_Abort_IT+0xe8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <HAL_DMA_Abort_IT+0x86>
 8000f20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f24:	e00e      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f2a:	e00b      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f30:	e008      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	e005      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3c:	e002      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f3e:	2310      	movs	r3, #16
 8000f40:	e000      	b.n	8000f44 <HAL_DMA_Abort_IT+0xa4>
 8000f42:	2301      	movs	r3, #1
 8000f44:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <HAL_DMA_Abort_IT+0xec>)
 8000f46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
    } 
  }
  return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020008 	.word	0x40020008
 8000f78:	4002001c 	.word	0x4002001c
 8000f7c:	40020030 	.word	0x40020030
 8000f80:	40020044 	.word	0x40020044
 8000f84:	40020058 	.word	0x40020058
 8000f88:	4002006c 	.word	0x4002006c
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	@ 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e169      	b.n	8001278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8158 	bne.w	8001272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	@ (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d05e      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d875      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fd2:	4a98      	ldr	r2, [pc, #608]	@ (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d058      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fd8:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d86f      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fde:	4a96      	ldr	r2, [pc, #600]	@ (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d052      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fe4:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d869      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fea:	4a94      	ldr	r2, [pc, #592]	@ (800123c <HAL_GPIO_Init+0x2ac>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ff0:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d863      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000ff6:	4a92      	ldr	r2, [pc, #584]	@ (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d046      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ffc:	4a90      	ldr	r2, [pc, #576]	@ (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d85d      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d82a      	bhi.n	800105c <HAL_GPIO_Init+0xcc>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d859      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <HAL_GPIO_Init+0x80>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001065 	.word	0x08001065
 8001018:	08001077 	.word	0x08001077
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010bf 	.word	0x080010bf
 8001024:	080010bf 	.word	0x080010bf
 8001028:	080010bf 	.word	0x080010bf
 800102c:	080010bf 	.word	0x080010bf
 8001030:	080010bf 	.word	0x080010bf
 8001034:	080010bf 	.word	0x080010bf
 8001038:	080010bf 	.word	0x080010bf
 800103c:	080010bf 	.word	0x080010bf
 8001040:	080010bf 	.word	0x080010bf
 8001044:	080010bf 	.word	0x080010bf
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001081 	.word	0x08001081
 800105c:	4a79      	ldr	r2, [pc, #484]	@ (8001244 <HAL_GPIO_Init+0x2b4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e029      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e024      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01f      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e01a      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e013      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e009      	b.n	80010c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          break;
 80010be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d801      	bhi.n	80010ca <HAL_GPIO_Init+0x13a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_Init+0x13e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	@ 0xff
 80010d4:	d802      	bhi.n	80010dc <HAL_GPIO_Init+0x14c>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x152>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	3b08      	subs	r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	210f      	movs	r1, #15
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	6a39      	ldr	r1, [r7, #32]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b1 	beq.w	8001272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	4b4d      	ldr	r3, [pc, #308]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b4a      	ldr	r3, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001128:	4a48      	ldr	r2, [pc, #288]	@ (800124c <HAL_GPIO_Init+0x2bc>)
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	@ (8001250 <HAL_GPIO_Init+0x2c0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x1ec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <HAL_GPIO_Init+0x2c4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3e      	ldr	r2, [pc, #248]	@ (8001258 <HAL_GPIO_Init+0x2c8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1e4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3d      	ldr	r2, [pc, #244]	@ (800125c <HAL_GPIO_Init+0x2cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1e0>
 800116c:	2303      	movs	r3, #3
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001170:	2304      	movs	r3, #4
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800117c:	2300      	movs	r3, #0
 800117e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118e:	492f      	ldr	r1, [pc, #188]	@ (800124c <HAL_GPIO_Init+0x2bc>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	492c      	ldr	r1, [pc, #176]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	4928      	ldr	r1, [pc, #160]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4922      	ldr	r1, [pc, #136]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	491e      	ldr	r1, [pc, #120]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4918      	ldr	r1, [pc, #96]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4914      	ldr	r1, [pc, #80]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	490e      	ldr	r1, [pc, #56]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e021      	b.n	8001272 <HAL_GPIO_Init+0x2e2>
 800122e:	bf00      	nop
 8001230:	10320000 	.word	0x10320000
 8001234:	10310000 	.word	0x10310000
 8001238:	10220000 	.word	0x10220000
 800123c:	10210000 	.word	0x10210000
 8001240:	10120000 	.word	0x10120000
 8001244:	10110000 	.word	0x10110000
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40011000 	.word	0x40011000
 800125c:	40011400 	.word	0x40011400
 8001260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4909      	ldr	r1, [pc, #36]	@ (8001294 <HAL_GPIO_Init+0x304>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f ae8e 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	372c      	adds	r7, #44	@ 0x2c
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e272      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8087 	beq.w	80013c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b8:	4b92      	ldr	r3, [pc, #584]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00c      	beq.n	80012de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d112      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
 80012d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012dc:	d10b      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d06c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x12c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d168      	bne.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e24c      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x76>
 8001300:	4b80      	ldr	r3, [pc, #512]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a7f      	ldr	r2, [pc, #508]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e02e      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b7b      	ldr	r3, [pc, #492]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7a      	ldr	r2, [pc, #488]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b78      	ldr	r3, [pc, #480]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a77      	ldr	r2, [pc, #476]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0xbc>
 800133a:	4b72      	ldr	r3, [pc, #456]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a71      	ldr	r2, [pc, #452]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6f      	ldr	r3, [pc, #444]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6e      	ldr	r2, [pc, #440]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001354:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6a      	ldr	r2, [pc, #424]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a67      	ldr	r2, [pc, #412]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc42 	bl	8000bfc <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc3e 	bl	8000bfc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e200      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xe4>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc2e 	bl	8000bfc <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc2a 	bl	8000bfc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1ec      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x10c>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013de:	4b49      	ldr	r3, [pc, #292]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
 80013ea:	4b46      	ldr	r3, [pc, #280]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c0      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4939      	ldr	r1, [pc, #228]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <HAL_RCC_OscConfig+0x270>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fbe3 	bl	8000bfc <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fbdf 	bl	8000bfc <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4927      	ldr	r1, [pc, #156]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_RCC_OscConfig+0x270>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fbc2 	bl	8000bfc <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fbbe 	bl	8000bfc <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e180      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03a      	beq.n	800151c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_RCC_OscConfig+0x274>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fba2 	bl	8000bfc <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb9e 	bl	8000bfc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e160      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f000 face 	bl	8001a7c <RCC_Delay>
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_RCC_OscConfig+0x274>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb88 	bl	8000bfc <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb84 	bl	8000bfc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d908      	bls.n	8001510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e146      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420000 	.word	0x42420000
 800150c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b92      	ldr	r3, [pc, #584]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e9      	bne.n	80014f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a6 	beq.w	8001676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b8b      	ldr	r3, [pc, #556]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a87      	ldr	r2, [pc, #540]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b85      	ldr	r3, [pc, #532]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b82      	ldr	r3, [pc, #520]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb45 	bl	8000bfc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fb41 	bl	8000bfc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	@ 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e103      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 800159c:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015b2:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a66      	ldr	r2, [pc, #408]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x356>
 80015d4:	4b61      	ldr	r3, [pc, #388]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a60      	ldr	r2, [pc, #384]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a5d      	ldr	r2, [pc, #372]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015ee:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a5a      	ldr	r2, [pc, #360]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a57      	ldr	r2, [pc, #348]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff faf5 	bl	8000bfc <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff faf1 	bl	8000bfc <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0b1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x37e>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fadf 	bl	8000bfc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fadb 	bl	8000bfc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e09b      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b40      	ldr	r3, [pc, #256]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b36      	ldr	r3, [pc, #216]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d061      	beq.n	8001750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d146      	bne.n	8001722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff faaf 	bl	8000bfc <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff faab 	bl	8000bfc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e06d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4921      	ldr	r1, [pc, #132]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a19      	ldr	r1, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	430b      	orrs	r3, r1
 80016ee:	491b      	ldr	r1, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa7f 	bl	8000bfc <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa7b 	bl	8000bfc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
 8001720:	e035      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa68 	bl	8000bfc <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa64 	bl	8000bfc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e026      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x498>
 800174e:	e01e      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e019      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x500>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0d0      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d910      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b67      	ldr	r3, [pc, #412]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4965      	ldr	r1, [pc, #404]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a58      	ldr	r2, [pc, #352]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800181a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d040      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e073      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06b      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4936      	ldr	r1, [pc, #216]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff f9b6 	bl	8000bfc <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff f9b2 	bl	8000bfc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e053      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d210      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 0207 	bic.w	r2, r3, #7
 80018d2:	4922      	ldr	r1, [pc, #136]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_RCC_ClockConfig+0x1cc>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f914 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	08002f8c 	.word	0x08002f8c
 8001968:	20000030 	.word	0x20000030
 800196c:	20000034 	.word	0x20000034

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x30>
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x36>
 800199e:	e027      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	e027      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c5b      	lsrs	r3, r3, #17
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e004      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	693b      	ldr	r3, [r7, #16]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	08002fa4 	.word	0x08002fa4
 8001a10:	08002fb4 	.word	0x08002fb4
 8001a14:	003d0900 	.word	0x003d0900

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	@ (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000030 	.word	0x20000030

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	@ (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08002f9c 	.word	0x08002f9c

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0adb      	lsrs	r3, r3, #11
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	@ (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08002f9c 	.word	0x08002f9c

08001a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <RCC_Delay+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <RCC_Delay+0x38>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a98:	bf00      	nop
  }
  while (Delay --);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	60fa      	str	r2, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f9      	bne.n	8001a98 <RCC_Delay+0x1c>
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000030 	.word	0x20000030
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e041      	b.n	8001b4e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fe88 	bl	80007f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 f99a 	bl	8001e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e041      	b.n	8001bec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7fe fe57 	bl	8000830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f000 f94b 	bl	8001e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e048      	b.n	8001ca4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d839      	bhi.n	8001c94 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001c20:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001c95 	.word	0x08001c95
 8001c30:	08001c95 	.word	0x08001c95
 8001c34:	08001c95 	.word	0x08001c95
 8001c38:	08001c6b 	.word	0x08001c6b
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001c95 	.word	0x08001c95
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001c79 	.word	0x08001c79
 8001c4c:	08001c95 	.word	0x08001c95
 8001c50:	08001c95 	.word	0x08001c95
 8001c54:	08001c95 	.word	0x08001c95
 8001c58:	08001c87 	.word	0x08001c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f952 	bl	8001f0c <TIM_OC1_SetConfig>
      break;
 8001c68:	e017      	b.n	8001c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f9b1 	bl	8001fd8 <TIM_OC2_SetConfig>
      break;
 8001c76:	e010      	b.n	8001c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa14 	bl	80020ac <TIM_OC3_SetConfig>
      break;
 8001c84:	e009      	b.n	8001c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fa77 	bl	8002180 <TIM_OC4_SetConfig>
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
      break;
 8001c98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0ae      	b.n	8001e28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	f200 809f 	bhi.w	8001e18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d15 	.word	0x08001d15
 8001ce4:	08001e19 	.word	0x08001e19
 8001ce8:	08001e19 	.word	0x08001e19
 8001cec:	08001e19 	.word	0x08001e19
 8001cf0:	08001d55 	.word	0x08001d55
 8001cf4:	08001e19 	.word	0x08001e19
 8001cf8:	08001e19 	.word	0x08001e19
 8001cfc:	08001e19 	.word	0x08001e19
 8001d00:	08001d97 	.word	0x08001d97
 8001d04:	08001e19 	.word	0x08001e19
 8001d08:	08001e19 	.word	0x08001e19
 8001d0c:	08001e19 	.word	0x08001e19
 8001d10:	08001dd7 	.word	0x08001dd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8f6 	bl	8001f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0208 	orr.w	r2, r2, #8
 8001d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6999      	ldr	r1, [r3, #24]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	619a      	str	r2, [r3, #24]
      break;
 8001d52:	e064      	b.n	8001e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f93c 	bl	8001fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6999      	ldr	r1, [r3, #24]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	021a      	lsls	r2, r3, #8
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	619a      	str	r2, [r3, #24]
      break;
 8001d94:	e043      	b.n	8001e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f985 	bl	80020ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0208 	orr.w	r2, r2, #8
 8001db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0204 	bic.w	r2, r2, #4
 8001dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69d9      	ldr	r1, [r3, #28]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	61da      	str	r2, [r3, #28]
      break;
 8001dd4:	e023      	b.n	8001e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f9cf 	bl	8002180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69da      	ldr	r2, [r3, #28]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69d9      	ldr	r1, [r3, #28]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	61da      	str	r2, [r3, #28]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a2f      	ldr	r2, [pc, #188]	@ (8001f00 <TIM_Base_SetConfig+0xd0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a2c      	ldr	r2, [pc, #176]	@ (8001f04 <TIM_Base_SetConfig+0xd4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x30>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <TIM_Base_SetConfig+0xd8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <TIM_Base_SetConfig+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0x62>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x62>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <TIM_Base_SetConfig+0xd4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <TIM_Base_SetConfig+0xd8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d108      	bne.n	8001ea4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <TIM_Base_SetConfig+0xd0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f023 0201 	bic.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40012c00 	.word	0x40012c00
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800

08001f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f023 0201 	bic.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 0302 	bic.w	r3, r3, #2
 8001f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <TIM_OC1_SetConfig+0xc8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10c      	bne.n	8001f82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0308 	bic.w	r3, r3, #8
 8001f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <TIM_OC1_SetConfig+0xc8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d111      	bne.n	8001fae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	621a      	str	r2, [r3, #32]
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00

08001fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f023 0210 	bic.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800200e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f023 0320 	bic.w	r3, r3, #32
 8002022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <TIM_OC2_SetConfig+0xd0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d10d      	bne.n	8002054 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800203e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <TIM_OC2_SetConfig+0xd0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d113      	bne.n	8002084 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800206a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	621a      	str	r2, [r3, #32]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40012c00 	.word	0x40012c00

080020ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <TIM_OC3_SetConfig+0xd0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10d      	bne.n	8002126 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <TIM_OC3_SetConfig+0xd0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d113      	bne.n	8002156 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800213c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	621a      	str	r2, [r3, #32]
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40012c00 	.word	0x40012c00

08002180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <TIM_OC4_SetConfig+0x98>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d109      	bne.n	80021f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40012c00 	.word	0x40012c00

0800221c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002230:	2302      	movs	r3, #2
 8002232:	e046      	b.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a16      	ldr	r2, [pc, #88]	@ (80022cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002280:	d009      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10c      	bne.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800229c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800

080022d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e03d      	b.n	8002370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e042      	b.n	8002412 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fb1d 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fcd4 	bl	8002d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	4613      	mov	r3, r2
 8002426:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	d112      	bne.n	800245a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_UART_Receive_IT+0x26>
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e00b      	b.n	800245c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	461a      	mov	r2, r3
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fab6 	bl	80029c2 <UART_Start_Receive_IT>
 8002456:	4603      	mov	r3, r0
 8002458:	e000      	b.n	800245c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0ba      	sub	sp, #232	@ 0xe8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_UART_IRQHandler+0x66>
 80024b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fb93 	bl	8002bee <UART_Receive_IT>
      return;
 80024c8:	e25b      	b.n	8002982 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80de 	beq.w	8002690 <HAL_UART_IRQHandler+0x22c>
 80024d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80d1 	beq.w	8002690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xae>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0xd2>
 800251e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_UART_IRQHandler+0xf6>
 8002542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d011      	beq.n	800258a <HAL_UART_IRQHandler+0x126>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0208 	orr.w	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 81f2 	beq.w	8002978 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_UART_IRQHandler+0x14e>
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb1e 	bl	8002bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_UART_IRQHandler+0x17a>
 80025d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04f      	beq.n	800267e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa28 	bl	8002a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d041      	beq.n	8002676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800260c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3314      	adds	r3, #20
 800261a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800261e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800262a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1d9      	bne.n	80025f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d013      	beq.n	800266e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	4a7e      	ldr	r2, [pc, #504]	@ (8002844 <HAL_UART_IRQHandler+0x3e0>)
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc24 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002668:	4610      	mov	r0, r2
 800266a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e00e      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f993 	bl	800299a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	e00a      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f98f 	bl	800299a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	e006      	b.n	800268c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f98b 	bl	800299a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800268a:	e175      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	bf00      	nop
    return;
 800268e:	e173      	b.n	8002978 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 814f 	bne.w	8002938 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8148 	beq.w	8002938 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8141 	beq.w	8002938 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80b6 	beq.w	8002848 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8145 	beq.w	800297c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026fa:	429a      	cmp	r2, r3
 80026fc:	f080 813e 	bcs.w	800297c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002706:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b20      	cmp	r3, #32
 8002710:	f000 8088 	beq.w	8002824 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800272a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800272e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002732:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002740:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800274c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1d9      	bne.n	8002714 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002784:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002788:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800278c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e1      	bne.n	8002760 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e3      	bne.n	800279c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f4:	f023 0310 	bic.w	r3, r3, #16
 80027f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002806:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002808:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800280c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e3      	bne.n	80027e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fb03 	bl	8000e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002832:	b29b      	uxth	r3, r3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	b29b      	uxth	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8b6 	bl	80029ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002840:	e09c      	b.n	800297c <HAL_UART_IRQHandler+0x518>
 8002842:	bf00      	nop
 8002844:	08002af9 	.word	0x08002af9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002850:	b29b      	uxth	r3, r3
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 808e 	beq.w	8002980 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8089 	beq.w	8002980 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800287e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002892:	647a      	str	r2, [r7, #68]	@ 0x44
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e3      	bne.n	800286e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	623b      	str	r3, [r7, #32]
   return(result);
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e3      	bne.n	80028a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0310 	bic.w	r3, r3, #16
 8002902:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002910:	61fa      	str	r2, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	617b      	str	r3, [r7, #20]
   return(result);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e3      	bne.n	80028ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800292a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f83b 	bl	80029ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002936:	e023      	b.n	8002980 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_UART_IRQHandler+0x4f4>
 8002944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8e5 	bl	8002b20 <UART_Transmit_IT>
    return;
 8002956:	e014      	b.n	8002982 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_UART_IRQHandler+0x51e>
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f924 	bl	8002bbe <UART_EndTransmit_IT>
    return;
 8002976:	e004      	b.n	8002982 <HAL_UART_IRQHandler+0x51e>
    return;
 8002978:	bf00      	nop
 800297a:	e002      	b.n	8002982 <HAL_UART_IRQHandler+0x51e>
      return;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <HAL_UART_IRQHandler+0x51e>
      return;
 8002980:	bf00      	nop
  }
}
 8002982:	37e8      	adds	r7, #232	@ 0xe8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	4613      	mov	r3, r2
 80029ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2222      	movs	r2, #34	@ 0x22
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b095      	sub	sp, #84	@ 0x54
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d119      	bne.n	8002ae0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f023 0310 	bic.w	r3, r3, #16
 8002ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002acc:	61ba      	str	r2, [r7, #24]
 8002ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e5      	bne.n	8002aac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aee:	bf00      	nop
 8002af0:	3754      	adds	r7, #84	@ 0x54
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff41 	bl	800299a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b21      	cmp	r3, #33	@ 0x21
 8002b32:	d13e      	bne.n	8002bb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3c:	d114      	bne.n	8002b68 <UART_Transmit_IT+0x48>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d110      	bne.n	8002b68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]
 8002b66:	e008      	b.n	8002b7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6211      	str	r1, [r2, #32]
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fed2 	bl	8002988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08c      	sub	sp, #48	@ 0x30
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b22      	cmp	r3, #34	@ 0x22
 8002c00:	f040 80ae 	bne.w	8002d60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0c:	d117      	bne.n	8002c3e <UART_Receive_IT+0x50>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c3c:	e026      	b.n	8002c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c50:	d007      	beq.n	8002c62 <UART_Receive_IT+0x74>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <UART_Receive_IT+0x82>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e008      	b.n	8002c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d15d      	bne.n	8002d5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0220 	bic.w	r2, r2, #32
 8002cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d135      	bne.n	8002d52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	623a      	str	r2, [r7, #32]
 8002d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	69f9      	ldr	r1, [r7, #28]
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d10a      	bne.n	8002d44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fe2e 	bl	80029ac <HAL_UARTEx_RxEventCallback>
 8002d50:	e002      	b.n	8002d58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fc3e 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e002      	b.n	8002d62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	@ 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002da6:	f023 030c 	bic.w	r3, r3, #12
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <UART_SetConfig+0x114>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7fe fe3e 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	e002      	b.n	8002de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7fe fe26 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <UART_SetConfig+0x118>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	0119      	lsls	r1, r3, #4
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e18:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2064      	movs	r0, #100	@ 0x64
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	@ 0x32
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e38:	4419      	add	r1, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e52:	fba3 0302 	umull	r0, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2064      	movs	r0, #100	@ 0x64
 8002e5a:	fb00 f303 	mul.w	r3, r0, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	3332      	adds	r3, #50	@ 0x32
 8002e64:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	440a      	add	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40013800 	.word	0x40013800
 8002e84:	51eb851f 	.word	0x51eb851f

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ed0 <__libc_init_array+0x38>)
 8002e9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed4 <__libc_init_array+0x3c>)
 8002ea0:	1b64      	subs	r4, r4, r5
 8002ea2:	10a4      	asrs	r4, r4, #2
 8002ea4:	42a6      	cmp	r6, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	f000 f822 	bl	8002ef0 <_init>
 8002eac:	2600      	movs	r6, #0
 8002eae:	4d0a      	ldr	r5, [pc, #40]	@ (8002ed8 <__libc_init_array+0x40>)
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002edc <__libc_init_array+0x44>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	42a6      	cmp	r6, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec0:	4798      	blx	r3
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eca:	4798      	blx	r3
 8002ecc:	3601      	adds	r6, #1
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	08002fc0 	.word	0x08002fc0
 8002ed4:	08002fc0 	.word	0x08002fc0
 8002ed8:	08002fc0 	.word	0x08002fc0
 8002edc:	08002fc4 	.word	0x08002fc4

08002ee0 <strcpy>:
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ee6:	f803 2b01 	strb.w	r2, [r3], #1
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d1f9      	bne.n	8002ee2 <strcpy+0x2>
 8002eee:	4770      	bx	lr

08002ef0 <_init>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr

08002efc <_fini>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr
