
UESTC_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006780  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e00  08006e00  00008188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e08  08006e08  00008188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e0c  08006e0c  00007e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08006e10  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000188  08006f98  00008188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08006f98  000085ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e7a  00000000  00000000  000081b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ece  00000000  00000000  0001902b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0001bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de2  00000000  00000000  0001d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5dc  00000000  00000000  0001deda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001453d  00000000  00000000  000384b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090635  00000000  00000000  0004c9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  000dd06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e27b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08006874 	.word	0x08006874

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08006874 	.word	0x08006874

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <emergency_stop>:
    uint8_t active;
} Ramp_t;

static Ramp_t ramps[4] = {0};

void emergency_stop(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e016      	b.n	8000792 <emergency_stop+0x3a>
	    Ramp_t *r = &ramps[i];
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4a0e      	ldr	r2, [pc, #56]	@ (80007a8 <emergency_stop+0x50>)
 8000770:	4413      	add	r3, r2
 8000772:	603b      	str	r3, [r7, #0]
        r->active = 0; // fin rampe
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2200      	movs	r2, #0
 8000778:	751a      	strb	r2, [r3, #20]
		DC_Motor_SetDuty(i + 1, 0);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	3301      	adds	r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f04f 0100 	mov.w	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f848 	bl	800081c <DC_Motor_SetDuty>
	for(int i = 0; i < 4; i++){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3301      	adds	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b03      	cmp	r3, #3
 8000796:	dde5      	ble.n	8000764 <emergency_stop+0xc>
	}
	flags.RAMPE_EN_COURS = false;
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <emergency_stop+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	72da      	strb	r2, [r3, #11]
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001a4 	.word	0x200001a4
 80007ac:	20000424 	.word	0x20000424

080007b0 <DC_Motor_Init>:

void DC_Motor_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4813      	ldr	r0, [pc, #76]	@ (8000808 <DC_Motor_Init+0x58>)
 80007ba:	f003 faf3 	bl	8003da4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007be:	2108      	movs	r1, #8
 80007c0:	4812      	ldr	r0, [pc, #72]	@ (800080c <DC_Motor_Init+0x5c>)
 80007c2:	f003 faef 	bl	8003da4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <DC_Motor_Init+0x60>)
 80007ca:	f003 faeb 	bl	8003da4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007ce:	2108      	movs	r1, #8
 80007d0:	4810      	ldr	r0, [pc, #64]	@ (8000814 <DC_Motor_Init+0x64>)
 80007d2:	f003 fae7 	bl	8003da4 <HAL_TIM_PWM_Start>

    for (int i = 0; i < 4; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e00c      	b.n	80007f6 <DC_Motor_Init+0x46>
        ramps[i].active = 0;
 80007dc:	490e      	ldr	r1, [pc, #56]	@ (8000818 <DC_Motor_Init+0x68>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3314      	adds	r3, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	ddef      	ble.n	80007dc <DC_Motor_Init+0x2c>
    }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000218 	.word	0x20000218
 800080c:	20000260 	.word	0x20000260
 8000810:	200002a8 	.word	0x200002a8
 8000814:	200002f0 	.word	0x200002f0
 8000818:	200001a4 	.word	0x200001a4

0800081c <DC_Motor_SetDuty>:

void DC_Motor_SetDuty(uint8_t motor_id, float duty)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
    if (motor_id < 1 || motor_id > 4) return;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d045      	beq.n	80008ba <DC_Motor_SetDuty+0x9e>
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b04      	cmp	r3, #4
 8000832:	d842      	bhi.n	80008ba <DC_Motor_SetDuty+0x9e>

    if (duty < 0) duty = 0;
 8000834:	f04f 0100 	mov.w	r1, #0
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f7ff ff45 	bl	80006c8 <__aeabi_fcmplt>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <DC_Motor_SetDuty+0x2e>
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
    if (duty > 100) duty = 100;
 800084a:	491e      	ldr	r1, [pc, #120]	@ (80008c4 <DC_Motor_SetDuty+0xa8>)
 800084c:	6838      	ldr	r0, [r7, #0]
 800084e:	f7ff ff59 	bl	8000704 <__aeabi_fcmpgt>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <DC_Motor_SetDuty+0x40>
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <DC_Motor_SetDuty+0xa8>)
 800085a:	603b      	str	r3, [r7, #0]

    // ARR = 9 → période PWM = 10 ticks (0..9)
    uint32_t pulse = (uint32_t)((duty * 10) / 100);
 800085c:	491a      	ldr	r1, [pc, #104]	@ (80008c8 <DC_Motor_SetDuty+0xac>)
 800085e:	6838      	ldr	r0, [r7, #0]
 8000860:	f7ff fd94 	bl	800038c <__aeabi_fmul>
 8000864:	4603      	mov	r3, r0
 8000866:	4917      	ldr	r1, [pc, #92]	@ (80008c4 <DC_Motor_SetDuty+0xa8>)
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe43 	bl	80004f4 <__aeabi_fdiv>
 800086e:	4603      	mov	r3, r0
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff51 	bl	8000718 <__aeabi_f2uiz>
 8000876:	4603      	mov	r3, r0
 8000878:	60fb      	str	r3, [r7, #12]

    switch (motor_id) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3b01      	subs	r3, #1
 800087e:	2b03      	cmp	r3, #3
 8000880:	d81c      	bhi.n	80008bc <DC_Motor_SetDuty+0xa0>
 8000882:	a201      	add	r2, pc, #4	@ (adr r2, 8000888 <DC_Motor_SetDuty+0x6c>)
 8000884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000888:	08000899 	.word	0x08000899
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008ab 	.word	0x080008ab
 8000894:	080008b3 	.word	0x080008b3
        case 1: TIM1->CCR1 = pulse; break;
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <DC_Motor_SetDuty+0xb0>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6353      	str	r3, [r2, #52]	@ 0x34
 800089e:	e00d      	b.n	80008bc <DC_Motor_SetDuty+0xa0>
        case 2: TIM2->CCR3 = pulse; break;
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008a8:	e008      	b.n	80008bc <DC_Motor_SetDuty+0xa0>
        case 3: TIM3->CCR1 = pulse; break;
 80008aa:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <DC_Motor_SetDuty+0xb4>)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80008b0:	e004      	b.n	80008bc <DC_Motor_SetDuty+0xa0>
        case 4: TIM4->CCR3 = pulse; break;
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <DC_Motor_SetDuty+0xb8>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008b8:	e000      	b.n	80008bc <DC_Motor_SetDuty+0xa0>
    if (motor_id < 1 || motor_id > 4) return;
 80008ba:	bf00      	nop
    }
}
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	42c80000 	.word	0x42c80000
 80008c8:	41200000 	.word	0x41200000
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40000800 	.word	0x40000800

080008d8 <DC_Motor_StartRamp>:

void DC_Motor_StartRamp(uint8_t motor_id, float start, float target, float step, uint32_t interval_ms)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
    if (motor_id < 1 || motor_id > 4) return;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d02e      	beq.n	800094c <DC_Motor_StartRamp+0x74>
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d82b      	bhi.n	800094c <DC_Motor_StartRamp+0x74>
    if (step <= 0) return;
 80008f4:	f04f 0100 	mov.w	r1, #0
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff feef 	bl	80006dc <__aeabi_fcmple>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d125      	bne.n	8000950 <DC_Motor_StartRamp+0x78>

    Ramp_t *r = &ramps[motor_id - 1];
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <DC_Motor_StartRamp+0x80>)
 8000912:	4413      	add	r3, r2
 8000914:	617b      	str	r3, [r7, #20]
    r->current_duty = start;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	601a      	str	r2, [r3, #0]
    r->target_duty = target;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]
    r->step = step;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	609a      	str	r2, [r3, #8]
    r->interval_ms = interval_ms;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	6a3a      	ldr	r2, [r7, #32]
 800092c:	60da      	str	r2, [r3, #12]
    r->counter_ms = 0;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
    r->active = 1;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	2201      	movs	r2, #1
 8000938:	751a      	strb	r2, [r3, #20]
    flags.RAMPE_EN_COURS = true;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <DC_Motor_StartRamp+0x84>)
 800093c:	2201      	movs	r2, #1
 800093e:	72da      	strb	r2, [r3, #11]

    DC_Motor_SetDuty(motor_id, start);
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff69 	bl	800081c <DC_Motor_SetDuty>
 800094a:	e002      	b.n	8000952 <DC_Motor_StartRamp+0x7a>
    if (motor_id < 1 || motor_id > 4) return;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <DC_Motor_StartRamp+0x7a>
    if (step <= 0) return;
 8000950:	bf00      	nop
}
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001a4 	.word	0x200001a4
 800095c:	20000424 	.word	0x20000424

08000960 <DC_Motor_RampTick>:

void DC_Motor_RampTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	e07c      	b.n	8000a66 <DC_Motor_RampTick+0x106>
        Ramp_t *r = &ramps[i];
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4a40      	ldr	r2, [pc, #256]	@ (8000a78 <DC_Motor_RampTick+0x118>)
 8000978:	4413      	add	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
        if (!r->active) continue;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	7d1b      	ldrb	r3, [r3, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d06c      	beq.n	8000a5e <DC_Motor_RampTick+0xfe>

        r->counter_ms++;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	611a      	str	r2, [r3, #16]
        if (r->counter_ms >= r->interval_ms) {
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	691a      	ldr	r2, [r3, #16]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	429a      	cmp	r2, r3
 8000998:	d362      	bcc.n	8000a60 <DC_Motor_RampTick+0x100>
            r->counter_ms = 0;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]

            if (r->current_duty < r->target_duty) {
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4610      	mov	r0, r2
 80009ac:	f7ff fe8c 	bl	80006c8 <__aeabi_fcmplt>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d01b      	beq.n	80009ee <DC_Motor_RampTick+0x8e>
                r->current_duty += r->step;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	4619      	mov	r1, r3
 80009c0:	4610      	mov	r0, r2
 80009c2:	f7ff fbdb 	bl	800017c <__addsf3>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	601a      	str	r2, [r3, #0]
                if (r->current_duty > r->target_duty)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f7ff fe93 	bl	8000704 <__aeabi_fcmpgt>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d031      	beq.n	8000a48 <DC_Motor_RampTick+0xe8>
                    r->current_duty = r->target_duty;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e02c      	b.n	8000a48 <DC_Motor_RampTick+0xe8>
            }
            else if (r->current_duty > r->target_duty) {
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4610      	mov	r0, r2
 80009fa:	f7ff fe83 	bl	8000704 <__aeabi_fcmpgt>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d01b      	beq.n	8000a3c <DC_Motor_RampTick+0xdc>
                r->current_duty -= r->step;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4610      	mov	r0, r2
 8000a10:	f7ff fbb2 	bl	8000178 <__aeabi_fsub>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	601a      	str	r2, [r3, #0]
                if (r->current_duty < r->target_duty)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4610      	mov	r0, r2
 8000a28:	f7ff fe4e 	bl	80006c8 <__aeabi_fcmplt>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00a      	beq.n	8000a48 <DC_Motor_RampTick+0xe8>
                    r->current_duty = r->target_duty;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e005      	b.n	8000a48 <DC_Motor_RampTick+0xe8>
            }
            else {
                r->active = 0; // fin rampe
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	751a      	strb	r2, [r3, #20]
                flags.RAMPE_EN_COURS = false;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <DC_Motor_RampTick+0x11c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	72da      	strb	r2, [r3, #11]
            }

            DC_Motor_SetDuty(i + 1, r->current_duty);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4610      	mov	r0, r2
 8000a58:	f7ff fee0 	bl	800081c <DC_Motor_SetDuty>
 8000a5c:	e000      	b.n	8000a60 <DC_Motor_RampTick+0x100>
        if (!r->active) continue;
 8000a5e:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	f77f af7f 	ble.w	800096c <DC_Motor_RampTick+0xc>
        }
    }
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001a4 	.word	0x200001a4
 8000a7c:	20000424 	.word	0x20000424

08000a80 <BLE_SendCommand>:

#define huart_BLE huart1
extern UART_HandleTypeDef huart_BLE;

// Fonction d'envoi générique
void BLE_SendCommand(const char* cmd) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fb69 	bl	8000160 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <BLE_SendCommand+0x28>)
 8000a9a:	f003 fe00 	bl	800469e <HAL_UART_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000338 	.word	0x20000338

08000aac <BLE_SendTrame>:

void BLE_SendTrame(const uint8_t* cmd) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, cmd, strlen((const char*)cmd), HAL_MAX_DELAY);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fb53 	bl	8000160 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <BLE_SendTrame+0x28>)
 8000ac6:	f003 fdea 	bl	800469e <HAL_UART_Transmit>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000338 	.word	0x20000338

08000ad8 <BLE_AT>:

// Test AT
void BLE_AT(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT\r\n");
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <BLE_AT+0x10>)
 8000ade:	f7ff ffcf 	bl	8000a80 <BLE_SendCommand>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0800688c 	.word	0x0800688c

08000aec <BLE_Reset>:

// Redémarrage du module
void BLE_Reset(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESET\r\n");
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <BLE_Reset+0x10>)
 8000af2:	f7ff ffc5 	bl	8000a80 <BLE_SendCommand>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08006894 	.word	0x08006894

08000b00 <BLE_RestoreDefaults>:

// Restauration usine
void BLE_RestoreDefaults(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESTORE\r\n");
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <BLE_RestoreDefaults+0x10>)
 8000b06:	f7ff ffbb 	bl	8000a80 <BLE_SendCommand>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080068a0 	.word	0x080068a0

08000b14 <BLE_ReadVersion>:

// Lire version du firmware
void BLE_ReadVersion(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+VER\r\n");
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <BLE_ReadVersion+0x10>)
 8000b1a:	f7ff ffb1 	bl	8000a80 <BLE_SendCommand>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	080068b0 	.word	0x080068b0

08000b28 <BLE_ReadName>:

// Lire nom BLE
void BLE_ReadName(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLENAME\r\n");
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <BLE_ReadName+0x10>)
 8000b2e:	f7ff ffa7 	bl	8000a80 <BLE_SendCommand>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	080068bc 	.word	0x080068bc

08000b3c <BLE_SetName>:

// Définir nom BLE
void BLE_SetName(const char* name) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b092      	sub	sp, #72	@ 0x48
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLENAME=%s\r\n", name);
 8000b44:	f107 0008 	add.w	r0, r7, #8
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <BLE_SetName+0x28>)
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	f004 fd0b 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff92 	bl	8000a80 <BLE_SendCommand>
}
 8000b5c:	bf00      	nop
 8000b5e:	3748      	adds	r7, #72	@ 0x48
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	080068cc 	.word	0x080068cc

08000b68 <BLE_ReadMAC>:

// Lire l’adresse MAC BLE
void BLE_ReadMAC(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLEMAC\r\n");
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <BLE_ReadMAC+0x10>)
 8000b6e:	f7ff ff87 	bl	8000a80 <BLE_SendCommand>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	080068dc 	.word	0x080068dc

08000b7c <BLE_ReadRole>:

// Lire le rôle actuel
void BLE_ReadRole(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ROLE\r\n");
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <BLE_ReadRole+0x10>)
 8000b82:	f7ff ff7d 	bl	8000a80 <BLE_SendCommand>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	080068e8 	.word	0x080068e8

08000b90 <BLE_SetRole>:

// Définir rôle (0 = slave, 1 = master)
void BLE_SetRole(uint8_t role) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ROLE=%d\r\n", (char)role);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f107 0008 	add.w	r0, r7, #8
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <BLE_SetRole+0x2c>)
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	f004 fce0 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff67 	bl	8000a80 <BLE_SendCommand>
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	080068f4 	.word	0x080068f4

08000bc0 <BLE_SetPIN>:

// Définir mot de passe
void BLE_SetPIN(const char* pin6digits) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+PIN=%s\r\n", pin6digits);
 8000bc8:	f107 0008 	add.w	r0, r7, #8
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <BLE_SetPIN+0x28>)
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	f004 fcc9 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff50 	bl	8000a80 <BLE_SendCommand>
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	@ 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08006904 	.word	0x08006904

08000bec <BLE_SetSecurity>:

// Définir le niveau de sécurité
void BLE_SetSecurity(uint8_t level) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SECURITY=%d\r\n", (char)level);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f107 0008 	add.w	r0, r7, #8
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <BLE_SetSecurity+0x2c>)
 8000bfe:	2120      	movs	r1, #32
 8000c00:	f004 fcb2 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff39 	bl	8000a80 <BLE_SendCommand>
}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08006910 	.word	0x08006910

08000c1c <BLE_ReadSecurity>:

// Lire niveau de sécurité
void BLE_ReadSecurity(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SECURITY\r\n");
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <BLE_ReadSecurity+0x10>)
 8000c22:	f7ff ff2d 	bl	8000a80 <BLE_SendCommand>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08006924 	.word	0x08006924

08000c30 <BLE_ReadPIN>:

// Lire PIN actuel
void BLE_ReadPIN(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+PIN\r\n");
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <BLE_ReadPIN+0x10>)
 8000c36:	f7ff ff23 	bl	8000a80 <BLE_SendCommand>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08006934 	.word	0x08006934

08000c44 <BLE_EnterATMode>:

// Passer en mode AT
void BLE_EnterATMode(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>9\r\n");
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <BLE_EnterATMode+0x10>)
 8000c4a:	f7ff ff19 	bl	8000a80 <BLE_SendCommand>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08006940 	.word	0x08006940

08000c58 <BLE_EnterBLEMode>:

// Revenir au mode BLE
void BLE_EnterBLEMode(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>8\r\n");
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <BLE_EnterBLEMode+0x10>)
 8000c5e:	f7ff ff0f 	bl	8000a80 <BLE_SendCommand>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	08006948 	.word	0x08006948

08000c6c <BLE_SetLog>:

// Activer/désactiver le log
void BLE_SetLog(uint8_t enable) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LOG=%d\r\n", (char)enable);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f107 0008 	add.w	r0, r7, #8
 8000c7c:	4a06      	ldr	r2, [pc, #24]	@ (8000c98 <BLE_SetLog+0x2c>)
 8000c7e:	2120      	movs	r1, #32
 8000c80:	f004 fc72 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fef9 	bl	8000a80 <BLE_SendCommand>
}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08006950 	.word	0x08006950

08000c9c <BLE_ReadLog>:

// Lire état du log
void BLE_ReadLog(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LOG\r\n");
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <BLE_ReadLog+0x10>)
 8000ca2:	f7ff feed 	bl	8000a80 <BLE_SendCommand>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	0800695c 	.word	0x0800695c

08000cb0 <BLE_SetLED>:

// Réglage LED d’état
void BLE_SetLED(uint8_t mode) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LED=%d\r\n", (char)mode);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f107 0008 	add.w	r0, r7, #8
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <BLE_SetLED+0x2c>)
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	f004 fc50 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fed7 	bl	8000a80 <BLE_SendCommand>
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08006968 	.word	0x08006968

08000ce0 <BLE_ReadLED>:

// Lire mode LED
void BLE_ReadLED(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LED\r\n");
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <BLE_ReadLED+0x10>)
 8000ce6:	f7ff fecb 	bl	8000a80 <BLE_SendCommand>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08006974 	.word	0x08006974

08000cf4 <BLE_SetRFPower>:

// Définir puissance d’émission (0 à 9)
void BLE_SetRFPower(uint8_t level) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+RFPWR=%d\r\n", (char)level);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f107 0008 	add.w	r0, r7, #8
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <BLE_SetRFPower+0x2c>)
 8000d06:	2120      	movs	r1, #32
 8000d08:	f004 fc2e 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff feb5 	bl	8000a80 <BLE_SendCommand>
}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08006980 	.word	0x08006980

08000d24 <BLE_ReadUUID>:

// Lire UUID
void BLE_ReadUUID(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+UUID\r\n");
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <BLE_ReadUUID+0x10>)
 8000d2a:	f7ff fea9 	bl	8000a80 <BLE_SendCommand>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	08006990 	.word	0x08006990

08000d38 <BLE_SetUUID>:

// Modifier UUID d’un service ou caractéristique
void BLE_SetUUID(uint8_t index, const char* uuid) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a4      	sub	sp, #144	@ 0x90
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+UUID=%d,%s\r\n", (char)index, (char)uuid);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	f107 0008 	add.w	r0, r7, #8
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <BLE_SetUUID+0x38>)
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	f004 fc08 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe8f 	bl	8000a80 <BLE_SendCommand>
    BLE_Reset();  // UUID settings require reboot
 8000d62:	f7ff fec3 	bl	8000aec <BLE_Reset>
}
 8000d66:	bf00      	nop
 8000d68:	3788      	adds	r7, #136	@ 0x88
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	0800699c 	.word	0x0800699c

08000d74 <BLE_ReadAdvData>:

// Lire données du paquet de broadcast
void BLE_ReadAdvData(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVDATA\r\n");
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <BLE_ReadAdvData+0x10>)
 8000d7a:	f7ff fe81 	bl	8000a80 <BLE_SendCommand>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	080069ac 	.word	0x080069ac

08000d88 <BLE_SetAdvData>:

// Définir données broadcast personnalisées
void BLE_SetAdvData(const char* adv_data_hex) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0a2      	sub	sp, #136	@ 0x88
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+ADVDATA=%s\r\n", adv_data_hex);
 8000d90:	f107 0008 	add.w	r0, r7, #8
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <BLE_SetAdvData+0x28>)
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	f004 fbe5 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fe6c 	bl	8000a80 <BLE_SendCommand>
}
 8000da8:	bf00      	nop
 8000daa:	3788      	adds	r7, #136	@ 0x88
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	080069bc 	.word	0x080069bc

08000db4 <BLE_ReadAdvInterval>:

// Lire intervalle broadcast
void BLE_ReadAdvInterval(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVPARAM\r\n");
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <BLE_ReadAdvInterval+0x10>)
 8000dba:	f7ff fe61 	bl	8000a80 <BLE_SendCommand>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	080069cc 	.word	0x080069cc

08000dc8 <BLE_SetAdvInterval>:

// Définir intervalle broadcast (10~4000 ms)
void BLE_SetAdvInterval(uint16_t interval_ms) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+ADVPARAM=%d\r\n", (char)interval_ms);
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f107 0008 	add.w	r0, r7, #8
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <BLE_SetAdvInterval+0x2c>)
 8000ddc:	2140      	movs	r1, #64	@ 0x40
 8000dde:	f004 fbc3 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe4a 	bl	8000a80 <BLE_SendCommand>
}
 8000dec:	bf00      	nop
 8000dee:	3748      	adds	r7, #72	@ 0x48
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	080069dc 	.word	0x080069dc

08000df8 <BLE_SetBroadcast>:

// Activer/désactiver le broadcast
void BLE_SetBroadcast(uint8_t enable) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ADV=%d\r\n", (char)enable);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f107 0008 	add.w	r0, r7, #8
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <BLE_SetBroadcast+0x2c>)
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	f004 fbac 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe33 	bl	8000a80 <BLE_SendCommand>
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080069f0 	.word	0x080069f0

08000e28 <BLE_SetLowPowerMode>:

// Activer ou désactiver le mode low power
void BLE_SetLowPowerMode(uint8_t enable) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LPM=%d\r\n", (char)enable);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f107 0008 	add.w	r0, r7, #8
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <BLE_SetLowPowerMode+0x2c>)
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	f004 fb94 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe1b 	bl	8000a80 <BLE_SendCommand>
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	080069fc 	.word	0x080069fc

08000e58 <BLE_ReadLowPowerMode>:

// Lire état low power
void BLE_ReadLowPowerMode(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LPM\r\n");
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <BLE_ReadLowPowerMode+0x10>)
 8000e5e:	f7ff fe0f 	bl	8000a80 <BLE_SendCommand>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08006a08 	.word	0x08006a08

08000e6c <BLE_ConnectTo>:
void BLE_Scan(void) {
    BLE_SendCommand("AT+SCAN=1\r\n");
}

// Connexion à un périphérique BLE (master mode)
void BLE_ConnectTo(const char* mac_addr) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b092      	sub	sp, #72	@ 0x48
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+CONN=%s\r\n", mac_addr);
 8000e74:	f107 0008 	add.w	r0, r7, #8
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <BLE_ConnectTo+0x28>)
 8000e7c:	2140      	movs	r1, #64	@ 0x40
 8000e7e:	f004 fb73 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdfa 	bl	8000a80 <BLE_SendCommand>
}
 8000e8c:	bf00      	nop
 8000e8e:	3748      	adds	r7, #72	@ 0x48
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08006a20 	.word	0x08006a20

08000e98 <BLE_Disconnect>:

// Déconnexion (nécessite d’abord AT>9)
void BLE_Disconnect(uint8_t mode) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+DISC=%d\r\n", (char)mode);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f107 0008 	add.w	r0, r7, #8
 8000ea8:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <BLE_Disconnect+0x2c>)
 8000eaa:	2120      	movs	r1, #32
 8000eac:	f004 fb5c 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fde3 	bl	8000a80 <BLE_SendCommand>
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08006a30 	.word	0x08006a30

08000ec8 <BLE_Sleep>:

// Mise en veille (soft shutdown)
void BLE_Sleep(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SLEEP\r\n");
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <BLE_Sleep+0x10>)
 8000ece:	f7ff fdd7 	bl	8000a80 <BLE_SendCommand>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08006a40 	.word	0x08006a40

08000edc <BLE_ReadBaudrate>:
// Lire le baudrate
void BLE_ReadBaudrate(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BAUD\r\n");
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <BLE_ReadBaudrate+0x10>)
 8000ee2:	f7ff fdcd 	bl	8000a80 <BLE_SendCommand>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08006a4c 	.word	0x08006a4c

08000ef0 <BLE_SetBaudrate>:

// Définir le baudrate (ex: 9600, 115200, etc.)
void BLE_SetBaudrate(uint32_t baudrate) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+BAUD=%lu\r\n", (char)baudrate);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f107 0008 	add.w	r0, r7, #8
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <BLE_SetBaudrate+0x2c>)
 8000f02:	2120      	movs	r1, #32
 8000f04:	f004 fb30 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fdb7 	bl	8000a80 <BLE_SendCommand>
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08006a58 	.word	0x08006a58

08000f20 <BLE_ReadMode>:

// Lire le mode (0 = BLE / 1 = BLE&SPP)
void BLE_ReadMode(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+MODE\r\n");
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <BLE_ReadMode+0x10>)
 8000f26:	f7ff fdab 	bl	8000a80 <BLE_SendCommand>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08006a68 	.word	0x08006a68

08000f34 <BLE_SetMode>:

// Définir le mode BLE ou BLE+SPP
void BLE_SetMode(uint8_t mode) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+MODE=%d\r\n", (char)mode);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f107 0008 	add.w	r0, r7, #8
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <BLE_SetMode+0x2c>)
 8000f46:	2120      	movs	r1, #32
 8000f48:	f004 fb0e 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fd95 	bl	8000a80 <BLE_SendCommand>
}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08006a74 	.word	0x08006a74

08000f64 <BLE_ReadSPPName>:

// Lire nom SPP
void BLE_ReadSPPName(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPNAME\r\n");
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <BLE_ReadSPPName+0x10>)
 8000f6a:	f7ff fd89 	bl	8000a80 <BLE_SendCommand>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08006a84 	.word	0x08006a84

08000f78 <BLE_SetSPPName>:

// Définir nom SPP
void BLE_SetSPPName(const char* name) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b092      	sub	sp, #72	@ 0x48
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPNAME=%s\r\n", name);
 8000f80:	f107 0008 	add.w	r0, r7, #8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <BLE_SetSPPName+0x28>)
 8000f88:	2140      	movs	r1, #64	@ 0x40
 8000f8a:	f004 faed 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fd74 	bl	8000a80 <BLE_SendCommand>
}
 8000f98:	bf00      	nop
 8000f9a:	3748      	adds	r7, #72	@ 0x48
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	08006a94 	.word	0x08006a94

08000fa4 <BLE_ReadSPPMAC>:

// Lire MAC SPP
void BLE_ReadSPPMAC(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPMAC\r\n");
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <BLE_ReadSPPMAC+0x10>)
 8000faa:	f7ff fd69 	bl	8000a80 <BLE_SendCommand>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08006aa4 	.word	0x08006aa4

08000fb8 <BLE_SetBLEMAC>:

// Définir MAC BLE
void BLE_SetBLEMAC(const char* mac12) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b092      	sub	sp, #72	@ 0x48
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLEMAC=%s\r\n", mac12);
 8000fc0:	f107 0008 	add.w	r0, r7, #8
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <BLE_SetBLEMAC+0x28>)
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	f004 facd 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd54 	bl	8000a80 <BLE_SendCommand>
}
 8000fd8:	bf00      	nop
 8000fda:	3748      	adds	r7, #72	@ 0x48
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08006ab0 	.word	0x08006ab0

08000fe4 <BLE_SetSPPMAC>:

// Définir MAC SPP
void BLE_SetSPPMAC(const char* mac12) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b092      	sub	sp, #72	@ 0x48
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPMAC=%s\r\n", mac12);
 8000fec:	f107 0008 	add.w	r0, r7, #8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a06      	ldr	r2, [pc, #24]	@ (800100c <BLE_SetSPPMAC+0x28>)
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	f004 fab7 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fd3e 	bl	8000a80 <BLE_SendCommand>
}
 8001004:	bf00      	nop
 8001006:	3748      	adds	r7, #72	@ 0x48
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08006ac0 	.word	0x08006ac0

08001010 <BLE_SetTargetUUID>:

// Définir UUID cible pour connexion (client mode)
void BLE_SetTargetUUID(const char* uuid) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b0a2      	sub	sp, #136	@ 0x88
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TARGETUUID=%s\r\n", uuid);
 8001018:	f107 0008 	add.w	r0, r7, #8
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <BLE_SetTargetUUID+0x28>)
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	f004 faa1 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd28 	bl	8000a80 <BLE_SendCommand>
}
 8001030:	bf00      	nop
 8001032:	3788      	adds	r7, #136	@ 0x88
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08006ad0 	.word	0x08006ad0

0800103c <BLE_ScanStart>:

// Scanner les périphériques BLE
void BLE_ScanStart(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SCAN=1\r\n");
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <BLE_ScanStart+0x10>)
 8001042:	f7ff fd1d 	bl	8000a80 <BLE_SendCommand>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08006a14 	.word	0x08006a14

08001050 <BLE_SetScanLimits>:

// Configurer paramètres de scan (nombre, timeout)
void BLE_SetScanLimits(uint8_t count, uint8_t timeout_sec) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af02      	add	r7, sp, #8
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SCANM=%d,%d\r\n", (char)count, (char)timeout_sec);
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	f107 0008 	add.w	r0, r7, #8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <BLE_SetScanLimits+0x38>)
 800106e:	2120      	movs	r1, #32
 8001070:	f004 fa7a 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fd01 	bl	8000a80 <BLE_SendCommand>
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	08006ae4 	.word	0x08006ae4

0800108c <BLE_SetScanParams>:

// Configurer scan params (mode, interval, window)
void BLE_SetScanParams(uint8_t active, uint8_t interval, uint8_t window) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SCANPARAM=%d,%d,%d\r\n", (char)active, (char)interval, (char)window);
 800109e:	79f9      	ldrb	r1, [r7, #7]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	797a      	ldrb	r2, [r7, #5]
 80010a4:	f107 0008 	add.w	r0, r7, #8
 80010a8:	9201      	str	r2, [sp, #4]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	460b      	mov	r3, r1
 80010ae:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <BLE_SetScanParams+0x3c>)
 80010b0:	2140      	movs	r1, #64	@ 0x40
 80010b2:	f004 fa59 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fce0 	bl	8000a80 <BLE_SendCommand>
}
 80010c0:	bf00      	nop
 80010c2:	3748      	adds	r7, #72	@ 0x48
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	08006af8 	.word	0x08006af8

080010cc <BLE_ClearBindings>:

// Effacer les liaisons enregistrées
void BLE_ClearBindings(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+CLRBIND\r\n");
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <BLE_ClearBindings+0x10>)
 80010d2:	f7ff fcd5 	bl	8000a80 <BLE_SendCommand>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	08006b10 	.word	0x08006b10

080010e0 <BLE_SetAutoConnect>:

// Configurer auto-connexion (client mode uniquement)
void BLE_SetAutoConnect(const char* mac) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b092      	sub	sp, #72	@ 0x48
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SERVER=%s\r\n", mac);
 80010e8:	f107 0008 	add.w	r0, r7, #8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a07      	ldr	r2, [pc, #28]	@ (800110c <BLE_SetAutoConnect+0x2c>)
 80010f0:	2140      	movs	r1, #64	@ 0x40
 80010f2:	f004 fa39 	bl	8005568 <sniprintf>
    BLE_SendCommand(cmd);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcc0 	bl	8000a80 <BLE_SendCommand>
    BLE_Reset();  // Reboot pour appliquer
 8001100:	f7ff fcf4 	bl	8000aec <BLE_Reset>
}
 8001104:	bf00      	nop
 8001106:	3748      	adds	r7, #72	@ 0x48
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08006b20 	.word	0x08006b20

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f001 fb52 	bl	80027bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f81e 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fa3e 	bl	800159c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001120:	f000 f888 	bl	8001234 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001124:	f000 f908 	bl	8001338 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001128:	f000 f95e 	bl	80013e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800112c:	f000 f9b4 	bl	8001498 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001130:	f000 fa0a 	bl	8001548 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001134:	f000 f862 	bl	80011fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	4905      	ldr	r1, [pc, #20]	@ (8001150 <main+0x40>)
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <main+0x44>)
 800113e:	f003 fb39 	bl	80047b4 <HAL_UART_Receive_IT>
  // chaque caractère va être écrit dans le buff et une interruption sera envoyée à HAL_UART_RxCpltCallback

  //Config du module BLE
  config_BLE_drone();
 8001142:	f000 ff19 	bl	8001f78 <config_BLE_drone>
  //Config moteurs
  DC_Motor_Init();
 8001146:	f7ff fb33 	bl	80007b0 <DC_Motor_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop_drone_control();
 800114a:	f000 fab7 	bl	80016bc <mainloop_drone_control>
 800114e:	e7fc      	b.n	800114a <main+0x3a>
 8001150:	20000380 	.word	0x20000380
 8001154:	20000338 	.word	0x20000338

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	@ 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2228      	movs	r2, #40	@ 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fa77 	bl	800565a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001188:	2309      	movs	r3, #9
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fee2 	bl	8002f68 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x56>
  {
    Error_Handler();
 80011aa:	f000 fa81 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f94f 	bl	800346c <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011d4:	f000 fa6c 	bl	80016b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 facf 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f0:	f000 fa5e 	bl	80016b0 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3750      	adds	r7, #80	@ 0x50
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <MX_RTC_Init+0x30>)
 8001202:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <MX_RTC_Init+0x34>)
 8001204:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_RTC_Init+0x30>)
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <MX_RTC_Init+0x30>)
 8001210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001214:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_RTC_Init+0x30>)
 8001218:	f002 fc22 	bl	8003a60 <HAL_RTC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001222:	f000 fa45 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204
 8001230:	40002800 	.word	0x40002800

08001234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b092      	sub	sp, #72	@ 0x48
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2220      	movs	r2, #32
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f004 f9fb 	bl	800565a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001264:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001266:	4a33      	ldr	r2, [pc, #204]	@ (8001334 <MX_TIM1_Init+0x100>)
 8001268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <MX_TIM1_Init+0xfc>)
 800126c:	2213      	movs	r2, #19
 800126e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001278:	2209      	movs	r2, #9
 800127a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <MX_TIM1_Init+0xfc>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <MX_TIM1_Init+0xfc>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800128e:	4828      	ldr	r0, [pc, #160]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001290:	f002 fd38 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800129a:	f000 fa09 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012aa:	4619      	mov	r1, r3
 80012ac:	4820      	ldr	r0, [pc, #128]	@ (8001330 <MX_TIM1_Init+0xfc>)
 80012ae:	f003 f8f7 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80012b8:	f000 f9fa 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	@ 0x60
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <MX_TIM1_Init+0xfc>)
 80012e2:	f002 fe01 	bl	8003ee8 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80012ec:	f000 f9e0 	bl	80016b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001314:	f003 f922 	bl	800455c <HAL_TIMEx_ConfigBreakDeadTime>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800131e:	f000 f9c7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM1_Init+0xfc>)
 8001324:	f001 f832 	bl	800238c <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3748      	adds	r7, #72	@ 0x48
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000218 	.word	0x20000218
 8001334:	40012c00 	.word	0x40012c00

08001338 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_TIM2_Init+0xac>)
 800135c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001360:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_TIM2_Init+0xac>)
 8001364:	2213      	movs	r2, #19
 8001366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_TIM2_Init+0xac>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_TIM2_Init+0xac>)
 8001370:	2209      	movs	r2, #9
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_TIM2_Init+0xac>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_TIM2_Init+0xac>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001380:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <MX_TIM2_Init+0xac>)
 8001382:	f002 fcbf 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 f990 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <MX_TIM2_Init+0xac>)
 80013a0:	f003 f87e 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80013aa:	f000 f981 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	@ 0x60
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2208      	movs	r2, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM2_Init+0xac>)
 80013c6:	f002 fd8f 	bl	8003ee8 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013d0:	f000 f96e 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM2_Init+0xac>)
 80013d6:	f000 ffd9 	bl	800238c <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000260 	.word	0x20000260

080013e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <MX_TIM3_Init+0xa8>)
 800140c:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <MX_TIM3_Init+0xac>)
 800140e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001412:	2213      	movs	r2, #19
 8001414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 800141c:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <MX_TIM3_Init+0xa8>)
 800141e:	2209      	movs	r2, #9
 8001420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <MX_TIM3_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800142e:	4818      	ldr	r0, [pc, #96]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001430:	f002 fc68 	bl	8003d04 <HAL_TIM_PWM_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800143a:	f000 f939 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	4619      	mov	r1, r3
 800144c:	4810      	ldr	r0, [pc, #64]	@ (8001490 <MX_TIM3_Init+0xa8>)
 800144e:	f003 f827 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001458:	f000 f92a 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	@ 0x60
 800145e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001474:	f002 fd38 	bl	8003ee8 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800147e:	f000 f917 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MX_TIM3_Init+0xa8>)
 8001484:	f000 ff82 	bl	800238c <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	@ 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200002a8 	.word	0x200002a8
 8001494:	40000400 	.word	0x40000400

08001498 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014bc:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <MX_TIM4_Init+0xac>)
 80014be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014c2:	2213      	movs	r2, #19
 80014c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014ce:	2209      	movs	r2, #9
 80014d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014de:	4818      	ldr	r0, [pc, #96]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014e0:	f002 fc10 	bl	8003d04 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80014ea:	f000 f8e1 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4619      	mov	r1, r3
 80014fc:	4810      	ldr	r0, [pc, #64]	@ (8001540 <MX_TIM4_Init+0xa8>)
 80014fe:	f002 ffcf 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001508:	f000 f8d2 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	@ 0x60
 800150e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2208      	movs	r2, #8
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <MX_TIM4_Init+0xa8>)
 8001524:	f002 fce0 	bl	8003ee8 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800152e:	f000 f8bf 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001532:	4803      	ldr	r0, [pc, #12]	@ (8001540 <MX_TIM4_Init+0xa8>)
 8001534:	f000 ff2a 	bl	800238c <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	@ 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002f0 	.word	0x200002f0
 8001544:	40000800 	.word	0x40000800

08001548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <MX_USART1_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_USART1_UART_Init+0x4c>)
 8001580:	f003 f83d 	bl	80045fe <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 f891 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000338 	.word	0x20000338
 8001598:	40013800 	.word	0x40013800

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <MX_GPIO_Init+0x58>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

////////////////////////////////////////////////////////////////// CODE RX

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <HAL_UART_RxCpltCallback+0x9c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d13f      	bne.n	800168a <HAL_UART_RxCpltCallback+0x92>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001610:	d81e      	bhi.n	8001650 <HAL_UART_RxCpltCallback+0x58>
        	if(debut_de_trame){						//debug
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_UART_RxCpltCallback+0xa4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_UART_RxCpltCallback+0x34>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	491d      	ldr	r1, [pc, #116]	@ (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 8001622:	600a      	str	r2, [r1, #0]
 8001624:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001626:	7811      	ldrb	r1, [r2, #0]
 8001628:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <HAL_UART_RxCpltCallback+0xac>)
 800162a:	54d1      	strb	r1, [r2, r3]
        	}
            if((char)rx_it_buffer == '\n'){
 800162c:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <HAL_UART_RxCpltCallback+0xa8>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d10d      	bne.n	8001650 <HAL_UART_RxCpltCallback+0x58>
            	if (!debut_de_trame){
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_UART_RxCpltCallback+0xa4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_UART_RxCpltCallback+0x52>
            		debut_de_trame = true;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_UART_RxCpltCallback+0xa4>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e002      	b.n	8001650 <HAL_UART_RxCpltCallback+0x58>
            	}
            	else{
            		fin_de_trame = true;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_UART_RxCpltCallback+0xb0>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_UART_RxCpltCallback+0xb0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_UART_RxCpltCallback+0x88>
        	process_trame_rx(receive_buffer);  // traite la trame
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <HAL_UART_RxCpltCallback+0xac>)
 800165a:	f000 fc4d 	bl	8001ef8 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 800165e:	2240      	movs	r2, #64	@ 0x40
 8001660:	2100      	movs	r1, #0
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <HAL_UART_RxCpltCallback+0xac>)
 8001664:	f003 fff9 	bl	800565a <memset>
            receive_index = 0;              // réinitialise l'index
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_UART_RxCpltCallback+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_UART_RxCpltCallback+0xa4>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_UART_RxCpltCallback+0xb0>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_UART_RxCpltCallback+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
        }
        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	4907      	ldr	r1, [pc, #28]	@ (80016a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <HAL_UART_RxCpltCallback+0xb4>)
 8001686:	f003 f895 	bl	80047b4 <HAL_UART_Receive_IT>
    }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800
 8001698:	20000384 	.word	0x20000384
 800169c:	20000388 	.word	0x20000388
 80016a0:	20000380 	.word	0x20000380
 80016a4:	200003a4 	.word	0x200003a4
 80016a8:	20000389 	.word	0x20000389
 80016ac:	20000338 	.word	0x20000338

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <Error_Handler+0x8>

080016bc <mainloop_drone_control>:

#include "mainloop.h"

float motor_power_values[4];

void mainloop_drone_control(void) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b099      	sub	sp, #100	@ 0x64
 80016c0:	af00      	add	r7, sp, #0
    static float FR_power = MOTORS_TAKEOFF_POWER;
    static float FL_power = MOTORS_TAKEOFF_POWER;
    static float BR_power = MOTORS_TAKEOFF_POWER;
    static float BL_power = MOTORS_TAKEOFF_POWER;

    if (buttons.EMERGENCY_STOP_BUTTON && flags.MOTORS_ON) {
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <mainloop_drone_control+0x68>)
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <mainloop_drone_control+0x28>
 80016ca:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <mainloop_drone_control+0x6c>)
 80016cc:	7a9b      	ldrb	r3, [r3, #10]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <mainloop_drone_control+0x28>
        emergency_stop();
 80016d2:	f7ff f841 	bl	8000758 <emergency_stop>
        flags.EMERGENCY_STOP = true;
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <mainloop_drone_control+0x6c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	725a      	strb	r2, [r3, #9]
        flags.MOTORS_ON = false;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <mainloop_drone_control+0x6c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	729a      	strb	r2, [r3, #10]
        return;
 80016e2:	e331      	b.n	8001d48 <mainloop_drone_control+0x68c>
    }

    if (!(flags.MOTORS_ON) && buttons.FRONT_OFFSET_BUTTON) {
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <mainloop_drone_control+0x6c>)
 80016e6:	7a9b      	ldrb	r3, [r3, #10]
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01c      	beq.n	800172c <mainloop_drone_control+0x70>
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <mainloop_drone_control+0x68>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d018      	beq.n	800172c <mainloop_drone_control+0x70>
        decollage();
 80016fa:	f000 fb35 	bl	8001d68 <decollage>
        flags.MOTORS_ON = true;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <mainloop_drone_control+0x6c>)
 8001700:	2201      	movs	r2, #1
 8001702:	729a      	strb	r2, [r3, #10]
        buttons.FRONT_OFFSET_BUTTON = false;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <mainloop_drone_control+0x68>)
 8001706:	2200      	movs	r2, #0
 8001708:	709a      	strb	r2, [r3, #2]
        buttons.BACK_OFFSET_BUTTON = false;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <mainloop_drone_control+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	70da      	strb	r2, [r3, #3]
        buttons.LEFT_OFFSET_BUTTON = false;
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <mainloop_drone_control+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
        buttons.EMERGENCY_STOP_BUTTON = false;
 8001716:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <mainloop_drone_control+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	711a      	strb	r2, [r3, #4]
        buttons.RIGHT_OFFSET_BUTTON = false;
 800171c:	4b01      	ldr	r3, [pc, #4]	@ (8001724 <mainloop_drone_control+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	705a      	strb	r2, [r3, #1]
        return;
 8001722:	e311      	b.n	8001d48 <mainloop_drone_control+0x68c>
 8001724:	20000450 	.word	0x20000450
 8001728:	20000424 	.word	0x20000424
    }

    if (flags.RAMPE_EN_COURS) {
 800172c:	4b9c      	ldr	r3, [pc, #624]	@ (80019a0 <mainloop_drone_control+0x2e4>)
 800172e:	7adb      	ldrb	r3, [r3, #11]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 8308 	bne.w	8001d46 <mainloop_drone_control+0x68a>
        return;
    }

    if (flags.MOTORS_ON) {
 8001736:	4b9a      	ldr	r3, [pc, #616]	@ (80019a0 <mainloop_drone_control+0x2e4>)
 8001738:	7a9b      	ldrb	r3, [r3, #10]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8304 	beq.w	8001d48 <mainloop_drone_control+0x68c>
        // --- Gestion des offsets fixes ---
        if (buttons.FRONT_OFFSET_BUTTON) {
 8001740:	4b98      	ldr	r3, [pc, #608]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00d      	beq.n	8001764 <mainloop_drone_control+0xa8>
            pitch_offset += 1;
 8001748:	4b97      	ldr	r3, [pc, #604]	@ (80019a8 <mainloop_drone_control+0x2ec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd13 	bl	800017c <__addsf3>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b93      	ldr	r3, [pc, #588]	@ (80019a8 <mainloop_drone_control+0x2ec>)
 800175c:	601a      	str	r2, [r3, #0]
            buttons.FRONT_OFFSET_BUTTON = false;
 800175e:	4b91      	ldr	r3, [pc, #580]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 8001760:	2200      	movs	r2, #0
 8001762:	709a      	strb	r2, [r3, #2]
        }
        if (buttons.BACK_OFFSET_BUTTON) {
 8001764:	4b8f      	ldr	r3, [pc, #572]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 8001766:	78db      	ldrb	r3, [r3, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <mainloop_drone_control+0xcc>
            pitch_offset -= 1;
 800176c:	4b8e      	ldr	r3, [pc, #568]	@ (80019a8 <mainloop_drone_control+0x2ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fcff 	bl	8000178 <__aeabi_fsub>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b8a      	ldr	r3, [pc, #552]	@ (80019a8 <mainloop_drone_control+0x2ec>)
 8001780:	601a      	str	r2, [r3, #0]
            buttons.BACK_OFFSET_BUTTON = false;
 8001782:	4b88      	ldr	r3, [pc, #544]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 8001784:	2200      	movs	r2, #0
 8001786:	70da      	strb	r2, [r3, #3]
        }
        if (buttons.RIGHT_OFFSET_BUTTON) {
 8001788:	4b86      	ldr	r3, [pc, #536]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <mainloop_drone_control+0xf0>
            roll_offset += 1;
 8001790:	4b86      	ldr	r3, [pc, #536]	@ (80019ac <mainloop_drone_control+0x2f0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fcef 	bl	800017c <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b82      	ldr	r3, [pc, #520]	@ (80019ac <mainloop_drone_control+0x2f0>)
 80017a4:	601a      	str	r2, [r3, #0]
            buttons.RIGHT_OFFSET_BUTTON = false;
 80017a6:	4b7f      	ldr	r3, [pc, #508]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	705a      	strb	r2, [r3, #1]
        }
        if (buttons.LEFT_OFFSET_BUTTON) {
 80017ac:	4b7d      	ldr	r3, [pc, #500]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <mainloop_drone_control+0x114>
            roll_offset -= 1;
 80017b4:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <mainloop_drone_control+0x2f0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fcdb 	bl	8000178 <__aeabi_fsub>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <mainloop_drone_control+0x2f0>)
 80017c8:	601a      	str	r2, [r3, #0]
            buttons.LEFT_OFFSET_BUTTON = false;
 80017ca:	4b76      	ldr	r3, [pc, #472]	@ (80019a4 <mainloop_drone_control+0x2e8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
        }

        // Coefficients
        const float k_z = HEIGHT_SENSIBILITY;
 80017d0:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <mainloop_drone_control+0x2f4>)
 80017d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        const float k_translation = TRANSLATION_SENSITIVITY; // par exemple 200.0f
 80017d4:	4b76      	ldr	r3, [pc, #472]	@ (80019b0 <mainloop_drone_control+0x2f4>)
 80017d6:	65bb      	str	r3, [r7, #88]	@ 0x58
        const float k_yaw = YAW_SENSITIVITY;                 // par exemple 150.0f
 80017d8:	4b75      	ldr	r3, [pc, #468]	@ (80019b0 <mainloop_drone_control+0x2f4>)
 80017da:	657b      	str	r3, [r7, #84]	@ 0x54
        const float k_offset = OFFSET_SENSITIVITY;
 80017dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017e0:	653b      	str	r3, [r7, #80]	@ 0x50

        const int center_z = CENTER_Z;
 80017e2:	f640 0305 	movw	r3, #2053	@ 0x805
 80017e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        const int center_yaw = CENTER_YAW;
 80017e8:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 80017ec:	64bb      	str	r3, [r7, #72]	@ 0x48
        const int center_x = CENTER_X;
 80017ee:	f240 73dd 	movw	r3, #2013	@ 0x7dd
 80017f2:	647b      	str	r3, [r7, #68]	@ 0x44
        const int center_y = CENTER_Y;
 80017f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017f8:	643b      	str	r3, [r7, #64]	@ 0x40

        const int deadzone_z = DEADZONE_Z;
 80017fa:	2364      	movs	r3, #100	@ 0x64
 80017fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const int deadzone_yaw = DEADZONE_YAW;
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	63bb      	str	r3, [r7, #56]	@ 0x38
        const int deadzone_x = DEADZONE_X;
 8001802:	2364      	movs	r3, #100	@ 0x64
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
        const int deadzone_y = DEADZONE_Y;
 8001806:	2364      	movs	r3, #100	@ 0x64
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30

        // Lecture des joysticks avec zones mortes
        float z_input = normalize_with_deadzone(adcData_2[0], center_z, deadzone_z);
 800180a:	4b6a      	ldr	r3, [pc, #424]	@ (80019b4 <mainloop_drone_control+0x2f8>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001810:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001812:	4618      	mov	r0, r3
 8001814:	f000 faca 	bl	8001dac <normalize_with_deadzone>
 8001818:	62f8      	str	r0, [r7, #44]	@ 0x2c
        float yaw = normalize_with_deadzone(adcData_2[1], center_yaw, deadzone_yaw);
 800181a:	4b66      	ldr	r3, [pc, #408]	@ (80019b4 <mainloop_drone_control+0x2f8>)
 800181c:	885b      	ldrh	r3, [r3, #2]
 800181e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001820:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fac2 	bl	8001dac <normalize_with_deadzone>
 8001828:	62b8      	str	r0, [r7, #40]	@ 0x28
        float trans_x = normalize_with_deadzone(adcData_2[3], center_x, deadzone_x); // avant/arrière
 800182a:	4b62      	ldr	r3, [pc, #392]	@ (80019b4 <mainloop_drone_control+0x2f8>)
 800182c:	88db      	ldrh	r3, [r3, #6]
 800182e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001830:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001832:	4618      	mov	r0, r3
 8001834:	f000 faba 	bl	8001dac <normalize_with_deadzone>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24
        float trans_y = normalize_with_deadzone(adcData_2[2], center_y, deadzone_y); // droite/gauche
 800183a:	4b5e      	ldr	r3, [pc, #376]	@ (80019b4 <mainloop_drone_control+0x2f8>)
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fab2 	bl	8001dac <normalize_with_deadzone>
 8001848:	6238      	str	r0, [r7, #32]

        // Changements de sens (si nécessaires)
        z_input = -z_input;
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
        trans_x = -trans_x;
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
        // yaw et trans_y restent tels quels

        // Mise à jour de la base de puissance persistante
        if (fabsf(z_input) > 0.01f) {
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001860:	4953      	ldr	r1, [pc, #332]	@ (80019b0 <mainloop_drone_control+0x2f4>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe ff4e 	bl	8000704 <__aeabi_fcmpgt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d029      	beq.n	80018c2 <mainloop_drone_control+0x206>
            persistent_base_power += z_input * k_z;
 800186e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001872:	f7fe fd8b 	bl	800038c <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b4f      	ldr	r3, [pc, #316]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7fe fc7b 	bl	800017c <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 800188c:	601a      	str	r2, [r3, #0]

            // Clamp entre 0 et 100
            if (persistent_base_power > 100.0f) persistent_base_power = 100.0f;
 800188e:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	494a      	ldr	r1, [pc, #296]	@ (80019bc <mainloop_drone_control+0x300>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ff35 	bl	8000704 <__aeabi_fcmpgt>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <mainloop_drone_control+0x1ea>
 80018a0:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 80018a2:	4a46      	ldr	r2, [pc, #280]	@ (80019bc <mainloop_drone_control+0x300>)
 80018a4:	601a      	str	r2, [r3, #0]
            if (persistent_base_power < 0.0f) persistent_base_power = 0.0f;
 80018a6:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe ff0a 	bl	80006c8 <__aeabi_fcmplt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <mainloop_drone_control+0x206>
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
        }

        float base_power = persistent_base_power;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <mainloop_drone_control+0x2fc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61fb      	str	r3, [r7, #28]

        // Calcul des contributions temporaires (déséquilibres joystick)
        float FR_temp = -trans_x * k_translation + trans_y * k_translation - yaw * k_yaw;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fd5b 	bl	800038c <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
 80018da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80018dc:	6a38      	ldr	r0, [r7, #32]
 80018de:	f7fe fd55 	bl	800038c <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7fe fc48 	bl	800017c <__addsf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461c      	mov	r4, r3
 80018f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018f4:	f7fe fd4a 	bl	800038c <__aeabi_fmul>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7fe fc3b 	bl	8000178 <__aeabi_fsub>
 8001902:	4603      	mov	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]
        float FL_temp = -trans_x * k_translation - trans_y * k_translation + yaw * k_yaw;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800190c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd3c 	bl	800038c <__aeabi_fmul>
 8001914:	4603      	mov	r3, r0
 8001916:	461c      	mov	r4, r3
 8001918:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800191a:	6a38      	ldr	r0, [r7, #32]
 800191c:	f7fe fd36 	bl	800038c <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	4620      	mov	r0, r4
 8001926:	f7fe fc27 	bl	8000178 <__aeabi_fsub>
 800192a:	4603      	mov	r3, r0
 800192c:	461c      	mov	r4, r3
 800192e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001932:	f7fe fd2b 	bl	800038c <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	4619      	mov	r1, r3
 800193a:	4620      	mov	r0, r4
 800193c:	f7fe fc1e 	bl	800017c <__addsf3>
 8001940:	4603      	mov	r3, r0
 8001942:	617b      	str	r3, [r7, #20]
        float BR_temp = +trans_x * k_translation + trans_y * k_translation + yaw * k_yaw;
 8001944:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001948:	f7fe fd20 	bl	800038c <__aeabi_fmul>
 800194c:	4603      	mov	r3, r0
 800194e:	461c      	mov	r4, r3
 8001950:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001952:	6a38      	ldr	r0, [r7, #32]
 8001954:	f7fe fd1a 	bl	800038c <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	4619      	mov	r1, r3
 800195c:	4620      	mov	r0, r4
 800195e:	f7fe fc0d 	bl	800017c <__addsf3>
 8001962:	4603      	mov	r3, r0
 8001964:	461c      	mov	r4, r3
 8001966:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800196a:	f7fe fd0f 	bl	800038c <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4620      	mov	r0, r4
 8001974:	f7fe fc02 	bl	800017c <__addsf3>
 8001978:	4603      	mov	r3, r0
 800197a:	613b      	str	r3, [r7, #16]
        float BL_temp = +trans_x * k_translation - trans_y * k_translation - yaw * k_yaw;
 800197c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800197e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001980:	f7fe fd04 	bl	800038c <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	461c      	mov	r4, r3
 8001988:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800198a:	6a38      	ldr	r0, [r7, #32]
 800198c:	f7fe fcfe 	bl	800038c <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	4619      	mov	r1, r3
 8001994:	4620      	mov	r0, r4
 8001996:	f7fe fbef 	bl	8000178 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	e010      	b.n	80019c0 <mainloop_drone_control+0x304>
 800199e:	bf00      	nop
 80019a0:	20000424 	.word	0x20000424
 80019a4:	20000450 	.word	0x20000450
 80019a8:	2000039c 	.word	0x2000039c
 80019ac:	200003a0 	.word	0x200003a0
 80019b0:	3c23d70a 	.word	0x3c23d70a
 80019b4:	20000434 	.word	0x20000434
 80019b8:	200000c4 	.word	0x200000c4
 80019bc:	42c80000 	.word	0x42c80000
 80019c0:	461c      	mov	r4, r3
 80019c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019c6:	f7fe fce1 	bl	800038c <__aeabi_fmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7fe fbd2 	bl	8000178 <__aeabi_fsub>
 80019d4:	4603      	mov	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]

        // Limiter les déséquilibres temporaires
        const float max_temp_imbalance = MAX_TEMPORARY_IMBALANCE;
 80019d8:	4b98      	ldr	r3, [pc, #608]	@ (8001c3c <mainloop_drone_control+0x580>)
 80019da:	60bb      	str	r3, [r7, #8]

        FR_temp = fminf(fmaxf(FR_temp, -max_temp_imbalance), max_temp_imbalance);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019e2:	4619      	mov	r1, r3
 80019e4:	69b8      	ldr	r0, [r7, #24]
 80019e6:	f004 ff01 	bl	80067ec <fmaxf>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f004 ff11 	bl	8006816 <fminf>
 80019f4:	61b8      	str	r0, [r7, #24]
        FL_temp = fminf(fmaxf(FL_temp, -max_temp_imbalance), max_temp_imbalance);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019fc:	4619      	mov	r1, r3
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f004 fef4 	bl	80067ec <fmaxf>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4619      	mov	r1, r3
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f004 ff04 	bl	8006816 <fminf>
 8001a0e:	6178      	str	r0, [r7, #20]
        BR_temp = fminf(fmaxf(BR_temp, -max_temp_imbalance), max_temp_imbalance);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a16:	4619      	mov	r1, r3
 8001a18:	6938      	ldr	r0, [r7, #16]
 8001a1a:	f004 fee7 	bl	80067ec <fmaxf>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f004 fef7 	bl	8006816 <fminf>
 8001a28:	6138      	str	r0, [r7, #16]
        BL_temp = fminf(fmaxf(BL_temp, -max_temp_imbalance), max_temp_imbalance);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a30:	4619      	mov	r1, r3
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f004 feda 	bl	80067ec <fmaxf>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	68b8      	ldr	r0, [r7, #8]
 8001a3e:	f004 feea 	bl	8006816 <fminf>
 8001a42:	60f8      	str	r0, [r7, #12]

        // --- Puissance des moteurs ---
        FR_power = base_power + FR_temp + pitch_offset * k_offset - roll_offset * k_offset;
 8001a44:	69b9      	ldr	r1, [r7, #24]
 8001a46:	69f8      	ldr	r0, [r7, #28]
 8001a48:	f7fe fb98 	bl	800017c <__addsf3>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461c      	mov	r4, r3
 8001a50:	4b7b      	ldr	r3, [pc, #492]	@ (8001c40 <mainloop_drone_control+0x584>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc98 	bl	800038c <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7fe fb8b 	bl	800017c <__addsf3>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461c      	mov	r4, r3
 8001a6a:	4b76      	ldr	r3, [pc, #472]	@ (8001c44 <mainloop_drone_control+0x588>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fc8b 	bl	800038c <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7fe fb7c 	bl	8000178 <__aeabi_fsub>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b70      	ldr	r3, [pc, #448]	@ (8001c48 <mainloop_drone_control+0x58c>)
 8001a86:	601a      	str	r2, [r3, #0]
        FL_power = base_power + FL_temp + pitch_offset * k_offset + roll_offset * k_offset;
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	69f8      	ldr	r0, [r7, #28]
 8001a8c:	f7fe fb76 	bl	800017c <__addsf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461c      	mov	r4, r3
 8001a94:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <mainloop_drone_control+0x584>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fc76 	bl	800038c <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7fe fb69 	bl	800017c <__addsf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461c      	mov	r4, r3
 8001aae:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <mainloop_drone_control+0x588>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fc69 	bl	800038c <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7fe fb5c 	bl	800017c <__addsf3>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b60      	ldr	r3, [pc, #384]	@ (8001c4c <mainloop_drone_control+0x590>)
 8001aca:	601a      	str	r2, [r3, #0]
        BR_power = base_power + BR_temp - pitch_offset * k_offset - roll_offset * k_offset;
 8001acc:	6939      	ldr	r1, [r7, #16]
 8001ace:	69f8      	ldr	r0, [r7, #28]
 8001ad0:	f7fe fb54 	bl	800017c <__addsf3>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461c      	mov	r4, r3
 8001ad8:	4b59      	ldr	r3, [pc, #356]	@ (8001c40 <mainloop_drone_control+0x584>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fc54 	bl	800038c <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7fe fb45 	bl	8000178 <__aeabi_fsub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461c      	mov	r4, r3
 8001af2:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <mainloop_drone_control+0x588>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc47 	bl	800038c <__aeabi_fmul>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7fe fb38 	bl	8000178 <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b50      	ldr	r3, [pc, #320]	@ (8001c50 <mainloop_drone_control+0x594>)
 8001b0e:	601a      	str	r2, [r3, #0]
        BL_power = base_power + BL_temp - pitch_offset * k_offset + roll_offset * k_offset;
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	69f8      	ldr	r0, [r7, #28]
 8001b14:	f7fe fb32 	bl	800017c <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	4b48      	ldr	r3, [pc, #288]	@ (8001c40 <mainloop_drone_control+0x584>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fc32 	bl	800038c <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7fe fb23 	bl	8000178 <__aeabi_fsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461c      	mov	r4, r3
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <mainloop_drone_control+0x588>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc25 	bl	800038c <__aeabi_fmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7fe fb18 	bl	800017c <__addsf3>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b40      	ldr	r3, [pc, #256]	@ (8001c54 <mainloop_drone_control+0x598>)
 8001b52:	601a      	str	r2, [r3, #0]

        // Moyenne des puissances
        float avg_power = (FR_power + FL_power + BR_power + BL_power) / 4.0f;
 8001b54:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <mainloop_drone_control+0x58c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3c      	ldr	r2, [pc, #240]	@ (8001c4c <mainloop_drone_control+0x590>)
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fb0c 	bl	800017c <__addsf3>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <mainloop_drone_control+0x594>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7fe fb04 	bl	800017c <__addsf3>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <mainloop_drone_control+0x598>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7fe fafc 	bl	800017c <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcb2 	bl	80004f4 <__aeabi_fdiv>
 8001b90:	4603      	mov	r3, r0
 8001b92:	607b      	str	r3, [r7, #4]

        // Équilibrage autour de la moyenne
        const float max_diff = MAX_DIFF;
 8001b94:	4b30      	ldr	r3, [pc, #192]	@ (8001c58 <mainloop_drone_control+0x59c>)
 8001b96:	603b      	str	r3, [r7, #0]

        FR_power = fminf(fmaxf(FR_power, avg_power - max_diff), avg_power + max_diff);
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <mainloop_drone_control+0x58c>)
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe faea 	bl	8000178 <__aeabi_fsub>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f004 fe1f 	bl	80067ec <fmaxf>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fae2 	bl	800017c <__addsf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f004 fe2a 	bl	8006816 <fminf>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <mainloop_drone_control+0x58c>)
 8001bc6:	6013      	str	r3, [r2, #0]
        FL_power = fminf(fmaxf(FL_power, avg_power - max_diff), avg_power + max_diff);
 8001bc8:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <mainloop_drone_control+0x590>)
 8001bca:	681c      	ldr	r4, [r3, #0]
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fad2 	bl	8000178 <__aeabi_fsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f004 fe07 	bl	80067ec <fmaxf>
 8001bde:	4604      	mov	r4, r0
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe faca 	bl	800017c <__addsf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4620      	mov	r0, r4
 8001bee:	f004 fe12 	bl	8006816 <fminf>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <mainloop_drone_control+0x590>)
 8001bf6:	6013      	str	r3, [r2, #0]
        BR_power = fminf(fmaxf(BR_power, avg_power - max_diff), avg_power + max_diff);
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <mainloop_drone_control+0x594>)
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe faba 	bl	8000178 <__aeabi_fsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f004 fdef 	bl	80067ec <fmaxf>
 8001c0e:	4604      	mov	r4, r0
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fab2 	bl	800017c <__addsf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f004 fdfa 	bl	8006816 <fminf>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <mainloop_drone_control+0x594>)
 8001c26:	6013      	str	r3, [r2, #0]
        BL_power = fminf(fmaxf(BL_power, avg_power - max_diff), avg_power + max_diff);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <mainloop_drone_control+0x598>)
 8001c2a:	681c      	ldr	r4, [r3, #0]
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe faa2 	bl	8000178 <__aeabi_fsub>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4619      	mov	r1, r3
 8001c38:	e010      	b.n	8001c5c <mainloop_drone_control+0x5a0>
 8001c3a:	bf00      	nop
 8001c3c:	41a00000 	.word	0x41a00000
 8001c40:	2000039c 	.word	0x2000039c
 8001c44:	200003a0 	.word	0x200003a0
 8001c48:	200000c8 	.word	0x200000c8
 8001c4c:	200000cc 	.word	0x200000cc
 8001c50:	200000d0 	.word	0x200000d0
 8001c54:	200000d4 	.word	0x200000d4
 8001c58:	41f00000 	.word	0x41f00000
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f004 fdc5 	bl	80067ec <fmaxf>
 8001c62:	4604      	mov	r4, r0
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fa88 	bl	800017c <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4620      	mov	r0, r4
 8001c72:	f004 fdd0 	bl	8006816 <fminf>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a35      	ldr	r2, [pc, #212]	@ (8001d50 <mainloop_drone_control+0x694>)
 8001c7a:	6013      	str	r3, [r2, #0]

        // Clamp final [0 ; 100]
        FR_power = fminf(fmaxf(FR_power, 0.0f), 100.0f);
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <mainloop_drone_control+0x698>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fdb1 	bl	80067ec <fmaxf>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4932      	ldr	r1, [pc, #200]	@ (8001d58 <mainloop_drone_control+0x69c>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fdc1 	bl	8006816 <fminf>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a2f      	ldr	r2, [pc, #188]	@ (8001d54 <mainloop_drone_control+0x698>)
 8001c98:	6013      	str	r3, [r2, #0]
        FL_power = fminf(fmaxf(FL_power, 0.0f), 100.0f);
 8001c9a:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <mainloop_drone_control+0x6a0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fda2 	bl	80067ec <fmaxf>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	492b      	ldr	r1, [pc, #172]	@ (8001d58 <mainloop_drone_control+0x69c>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fdb2 	bl	8006816 <fminf>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <mainloop_drone_control+0x6a0>)
 8001cb6:	6013      	str	r3, [r2, #0]
        BR_power = fminf(fmaxf(BR_power, 0.0f), 100.0f);
 8001cb8:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <mainloop_drone_control+0x6a4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 0100 	mov.w	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fd93 	bl	80067ec <fmaxf>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4923      	ldr	r1, [pc, #140]	@ (8001d58 <mainloop_drone_control+0x69c>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fda3 	bl	8006816 <fminf>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <mainloop_drone_control+0x6a4>)
 8001cd4:	6013      	str	r3, [r2, #0]
        BL_power = fminf(fmaxf(BL_power, 0.0f), 100.0f);
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <mainloop_drone_control+0x694>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fd84 	bl	80067ec <fmaxf>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	491c      	ldr	r1, [pc, #112]	@ (8001d58 <mainloop_drone_control+0x69c>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 fd94 	bl	8006816 <fminf>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <mainloop_drone_control+0x694>)
 8001cf2:	6013      	str	r3, [r2, #0]

        // Mémorisation pour affichage/debug
        motor_power_values[0] = FR_power;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <mainloop_drone_control+0x698>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <mainloop_drone_control+0x6a8>)
 8001cfa:	6013      	str	r3, [r2, #0]
        motor_power_values[1] = FL_power;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <mainloop_drone_control+0x6a0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <mainloop_drone_control+0x6a8>)
 8001d02:	6053      	str	r3, [r2, #4]
        motor_power_values[2] = BR_power;
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <mainloop_drone_control+0x6a4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <mainloop_drone_control+0x6a8>)
 8001d0a:	6093      	str	r3, [r2, #8]
        motor_power_values[3] = BL_power;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <mainloop_drone_control+0x694>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <mainloop_drone_control+0x6a8>)
 8001d12:	60d3      	str	r3, [r2, #12]

        // Envoi des commandes aux moteurs
        DC_Motor_SetDuty(MOTEUR_AVANT_DROIT, FR_power);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <mainloop_drone_control+0x698>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7fe fd7e 	bl	800081c <DC_Motor_SetDuty>
        DC_Motor_SetDuty(MOTEUR_AVANT_GAUCHE, FL_power);
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <mainloop_drone_control+0x6a0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	2003      	movs	r0, #3
 8001d28:	f7fe fd78 	bl	800081c <DC_Motor_SetDuty>
        DC_Motor_SetDuty(MOTEUR_ARRIERE_DROIT, BR_power);
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <mainloop_drone_control+0x6a4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	2004      	movs	r0, #4
 8001d34:	f7fe fd72 	bl	800081c <DC_Motor_SetDuty>
        DC_Motor_SetDuty(MOTEUR_ARRIERE_GAUCHE, BL_power);
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <mainloop_drone_control+0x694>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7fe fd6c 	bl	800081c <DC_Motor_SetDuty>
        return;
 8001d44:	e000      	b.n	8001d48 <mainloop_drone_control+0x68c>
        return;
 8001d46:	bf00      	nop
    }
}
 8001d48:	3764      	adds	r7, #100	@ 0x64
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000d4 	.word	0x200000d4
 8001d54:	200000c8 	.word	0x200000c8
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	200000cc 	.word	0x200000cc
 8001d60:	200000d0 	.word	0x200000d0
 8001d64:	2000038c 	.word	0x2000038c

08001d68 <decollage>:

	}
}


void decollage(void){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++){
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	e00e      	b.n	8001d92 <decollage+0x2a>
		DC_Motor_StartRamp(i+1,0,MOTORS_TAKEOFF_POWER, MOTORS_STEP_PERCENT, MOTORS_INTERVAL_MS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2d8      	uxtb	r0, r3
 8001d7c:	2314      	movs	r3, #20
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <decollage+0x3c>)
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <decollage+0x40>)
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	f7fe fda6 	bl	80008d8 <DC_Motor_StartRamp>
	for(int i = 0; i < 4; i++){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	dded      	ble.n	8001d74 <decollage+0xc>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	3dcccccd 	.word	0x3dcccccd
 8001da8:	41f00000 	.word	0x41f00000

08001dac <normalize_with_deadzone>:

float normalize_with_deadzone(int raw, int center, int deadzone) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
    int delta = raw - center;
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]

    if (abs(delta) <= deadzone)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bfb8      	it	lt
 8001dc6:	425b      	neglt	r3, r3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	db02      	blt.n	8001dd4 <normalize_with_deadzone+0x28>
        return 0.0f;
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e009      	b.n	8001de8 <normalize_with_deadzone+0x3c>

    return (float)delta / 2048.0f;  // garde la même échelle [-1, 1]
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f7fe fa85 	bl	80002e4 <__aeabi_i2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb87 	bl	80004f4 <__aeabi_fdiv>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <handle_BLE_DISC>:
    {"BLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <handle_BLE_DISC+0x18>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = true;
 8001dfa:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <handle_BLE_DISC+0x18>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	721a      	strb	r2, [r3, #8]

}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000424 	.word	0x20000424

08001e0c <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <handle_BLE_CONN+0x18>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
	flags.BLE_HAS_BEEN_DISCONNECTED = false;
 8001e16:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <handle_BLE_CONN+0x18>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	721a      	strb	r2, [r3, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000424 	.word	0x20000424

08001e28 <handle_OK>:

void handle_OK(void){
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
	flags.OK = true;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <handle_OK+0x14>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	70da      	strb	r2, [r3, #3]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000424 	.word	0x20000424

08001e40 <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <handle_ERR_CMD+0x14>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	711a      	strb	r2, [r3, #4]
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000424 	.word	0x20000424

08001e58 <handle_RSTING>:

void handle_RSTING(void){
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <handle_RSTING+0x14>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	715a      	strb	r2, [r3, #5]
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000424 	.word	0x20000424

08001e70 <handle_CONNECTING>:
void handle_CONNECTING(void){
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <handle_CONNECTING+0x14>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	719a      	strb	r2, [r3, #6]
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000424 	.word	0x20000424

08001e88 <handle_RESTORING>:
void handle_RESTORING(void){
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	flags.RESTORING = true;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <handle_RESTORING+0x14>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	71da      	strb	r2, [r3, #7]
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000424 	.word	0x20000424

08001ea0 <handle_IM_READY>:

void handle_IM_READY(void){
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
	flags.IM_READY = true;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <handle_IM_READY+0x14>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	731a      	strb	r2, [r3, #12]
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000424 	.word	0x20000424

08001eb8 <handle_UNKNOW_COMMAND>:

void handle_UNKNOW_COMMAND(char* receive_buffer){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	flags.UNKNOW_COMMAND = true;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <handle_UNKNOW_COMMAND+0x20>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	709a      	strb	r2, [r3, #2]
	strcpy(unknow_command,receive_buffer);
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <handle_UNKNOW_COMMAND+0x24>)
 8001eca:	f003 fcaa 	bl	8005822 <strcpy>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000424 	.word	0x20000424
 8001edc:	200003e4 	.word	0x200003e4

08001ee0 <handle_RUN_AS_SERVER>:

void handle_RUN_AS_SERVER(void){
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	flags.RUN_AS_SERVER = true;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <handle_RUN_AS_SERVER+0x14>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	735a      	strb	r2, [r3, #13]
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000424 	.word	0x20000424

08001ef8 <process_trame_rx>:



// fonctions
void process_trame_rx(char* receive_buffer) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02c      	beq.n	8001f62 <process_trame_rx+0x6a>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e017      	b.n	8001f3e <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 8001f0e:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <process_trame_rx+0x74>)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f917 	bl	800014c <strcmp>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <process_trame_rx+0x74>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <process_trame_rx+0x78>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 8001f36:	e015      	b.n	8001f64 <process_trame_rx+0x6c>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) { //Recherche si c'est une commande AT
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	dde4      	ble.n	8001f0e <process_trame_rx+0x16>
			}
		}

		if (receive_buffer[0] == '$') {  // comparaison d'un caractère
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b24      	cmp	r3, #36	@ 0x24
 8001f4a:	d106      	bne.n	8001f5a <process_trame_rx+0x62>
		    parse_drone_trame_char(receive_buffer);		//écrit dans les buffers adcData_2 et gpioData_2
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f89b 	bl	8002088 <parse_drone_trame_char>
		    process_gpios(gpioData_2);
 8001f52:	4808      	ldr	r0, [pc, #32]	@ (8001f74 <process_trame_rx+0x7c>)
 8001f54:	f000 f91e 	bl	8002194 <process_gpios>
 8001f58:	e004      	b.n	8001f64 <process_trame_rx+0x6c>

		}

		else {							//Erreur
			handle_UNKNOW_COMMAND(receive_buffer);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffac 	bl	8001eb8 <handle_UNKNOW_COMMAND>
			return;
 8001f60:	e000      	b.n	8001f64 <process_trame_rx+0x6c>
		return;
 8001f62:	bf00      	nop
		}
		}
}
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200000d8 	.word	0x200000d8
 8001f70:	20000424 	.word	0x20000424
 8001f74:	2000043c 	.word	0x2000043c

08001f78 <config_BLE_drone>:
//	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
//	BLE.Reset();                 // Redémarre pour appliquer
//	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
//
//}
void config_BLE_drone(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	BLE.RestoreDefaults();
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <config_BLE_drone+0x8c>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4798      	blx	r3
	wait_until_flag(&flags.RESTORING,BLE_TIMEOUT_MS);
 8001f82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f86:	4820      	ldr	r0, [pc, #128]	@ (8002008 <config_BLE_drone+0x90>)
 8001f88:	f000 f848 	bl	800201c <wait_until_flag>
	HAL_Delay(500);
 8001f8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f90:	f000 fc76 	bl	8002880 <HAL_Delay>
	BLE.EnterATMode();
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <config_BLE_drone+0x8c>)
 8001f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f9a:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001f9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fa0:	481a      	ldr	r0, [pc, #104]	@ (800200c <config_BLE_drone+0x94>)
 8001fa2:	f000 f83b 	bl	800201c <wait_until_flag>
	BLE.SetName(NAME);
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <config_BLE_drone+0x8c>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4819      	ldr	r0, [pc, #100]	@ (8002010 <config_BLE_drone+0x98>)
 8001fac:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001fae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <config_BLE_drone+0x94>)
 8001fb4:	f000 f832 	bl	800201c <wait_until_flag>
	BLE.SetRole(BLE_ROLE);
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <config_BLE_drone+0x8c>)
 8001fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001fc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fc4:	4811      	ldr	r0, [pc, #68]	@ (800200c <config_BLE_drone+0x94>)
 8001fc6:	f000 f829 	bl	800201c <wait_until_flag>
	BLE.SetBLEMAC(BLE_MAC_SERVEUR);
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <config_BLE_drone+0x8c>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <config_BLE_drone+0x9c>)
 8001fd0:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001fd2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <config_BLE_drone+0x94>)
 8001fd8:	f000 f820 	bl	800201c <wait_until_flag>
	BLE.SetSecurity(SECURITY);
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <config_BLE_drone+0x8c>)
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8001fe4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fe8:	4808      	ldr	r0, [pc, #32]	@ (800200c <config_BLE_drone+0x94>)
 8001fea:	f000 f817 	bl	800201c <wait_until_flag>
	BLE.Reset();                 // Redémarre pour appliquer
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <config_BLE_drone+0x8c>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4798      	blx	r3
	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
 8001ff4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ff8:	4807      	ldr	r0, [pc, #28]	@ (8002018 <config_BLE_drone+0xa0>)
 8001ffa:	f000 f80f 	bl	800201c <wait_until_flag>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	2000042b 	.word	0x2000042b
 800200c:	20000427 	.word	0x20000427
 8002010:	08006bb0 	.word	0x08006bb0
 8002014:	08006bbc 	.word	0x08006bbc
 8002018:	20000429 	.word	0x20000429

0800201c <wait_until_flag>:

void wait_until_flag(volatile bool* flag, uint32_t timeout_ms) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8002026:	f000 fc21 	bl	800286c <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]

    while (!(*flag)) {
 800202c:	e00d      	b.n	800204a <wait_until_flag+0x2e>
        if (HAL_GetTick() - start >= timeout_ms) {
 800202e:	f000 fc1d 	bl	800286c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d805      	bhi.n	800204a <wait_until_flag+0x2e>
            flag_timeout_err = true;      // Indique qu'un timeout s’est produit
 800203e:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <wait_until_flag+0x50>)
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
            TIMEOUT_ERR_HANDLER();        // Fonction de traitement personnalisée
 8002044:	f000 f814 	bl	8002070 <TIMEOUT_ERR_HANDLER>
            return;                       // Sort de la fonction
 8002048:	e00d      	b.n	8002066 <wait_until_flag+0x4a>
    while (!(*flag)) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e9      	bne.n	800202e <wait_until_flag+0x12>
        }
    }

    *flag = false;                        // Réinitialise le flag une fois traité
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    flag_timeout_err = false;             // Tout s’est bien passé
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <wait_until_flag+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000433 	.word	0x20000433

08002070 <TIMEOUT_ERR_HANDLER>:


void TIMEOUT_ERR_HANDLER(void){
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
	flags.TIMEOUT_ERR = true;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <TIMEOUT_ERR_HANDLER+0x14>)
 8002076:	2201      	movs	r2, #1
 8002078:	739a      	strb	r2, [r3, #14]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000424 	.word	0x20000424

08002088 <parse_drone_trame_char>:


uint16_t adcData_2[ADC_NUM_CONVERSIONS];
int gpioData_2[GPIO_NUM_CONVERSIONS];

void parse_drone_trame_char(const char* buffer) {
 8002088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800208c:	b08b      	sub	sp, #44	@ 0x2c
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	466b      	mov	r3, sp
 8002094:	461e      	mov	r6, r3
    // Copie de la trame pour traitement (strtok modifie la chaîne)
    char temp[strlen(buffer) + 1];
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe f862 	bl	8000160 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	1c59      	adds	r1, r3, #1
 80020a0:	460b      	mov	r3, r1
 80020a2:	3b01      	subs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	2300      	movs	r3, #0
 80020a8:	4688      	mov	r8, r1
 80020aa:	4699      	mov	r9, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c0:	2300      	movs	r3, #0
 80020c2:	460c      	mov	r4, r1
 80020c4:	461d      	mov	r5, r3
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	00eb      	lsls	r3, r5, #3
 80020d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d4:	00e2      	lsls	r2, r4, #3
 80020d6:	1dcb      	adds	r3, r1, #7
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	ebad 0d03 	sub.w	sp, sp, r3
 80020e0:	466b      	mov	r3, sp
 80020e2:	3300      	adds	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
    strcpy(temp, buffer);
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6938      	ldr	r0, [r7, #16]
 80020ea:	f003 fb9a 	bl	8005822 <strcpy>

    // Recherche du marqueur '$'
    char* start = strchr(temp, '$');
 80020ee:	2124      	movs	r1, #36	@ 0x24
 80020f0:	6938      	ldr	r0, [r7, #16]
 80020f2:	f003 faba 	bl	800566a <strchr>
 80020f6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (start == NULL) return;  // Trame invalide
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <parse_drone_trame_char+0xf0>

    start++; // Avance après le '$'
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	3301      	adds	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24

    // Séparer les ADC et GPIO : ADC sont suivis de '/' ; GPIO sans séparateur
    int adc_index = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
    while (adc_index < ADC_NUM_CONVERSIONS) {
 8002108:	e014      	b.n	8002134 <parse_drone_trame_char+0xac>
        char* token = strtok(start, "/");
 800210a:	491e      	ldr	r1, [pc, #120]	@ (8002184 <parse_drone_trame_char+0xfc>)
 800210c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800210e:	f003 fab9 	bl	8005684 <strtok>
 8002112:	60f8      	str	r0, [r7, #12]
        if (token == NULL) return;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02d      	beq.n	8002176 <parse_drone_trame_char+0xee>
        adcData_2[adc_index++] = (uint16_t)atoi(token);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f003 f8da 	bl	80052d4 <atoi>
 8002120:	4601      	mov	r1, r0
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	623a      	str	r2, [r7, #32]
 8002128:	b289      	uxth	r1, r1
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <parse_drone_trame_char+0x100>)
 800212c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        start = NULL;  // Après le premier appel, strtok utilise NULL
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    while (adc_index < ADC_NUM_CONVERSIONS) {
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	2b03      	cmp	r3, #3
 8002138:	dde7      	ble.n	800210a <parse_drone_trame_char+0x82>
    }

    // Ce qu'il reste : les GPIO, un par caractère numérique
    int gpio_index = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    char* token = strtok(NULL, "\r\n");
 800213e:	4913      	ldr	r1, [pc, #76]	@ (800218c <parse_drone_trame_char+0x104>)
 8002140:	2000      	movs	r0, #0
 8002142:	f003 fa9f 	bl	8005684 <strtok>
 8002146:	61b8      	str	r0, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 8002148:	e00d      	b.n	8002166 <parse_drone_trame_char+0xde>
        gpioData_2[gpio_index++] = token[0] - '0';  // Convertit '1' -> 1
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	61fa      	str	r2, [r7, #28]
 8002156:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <parse_drone_trame_char+0x108>)
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        token++;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3301      	adds	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
    while (token != NULL && gpio_index < GPIO_NUM_CONVERSIONS) {
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <parse_drone_trame_char+0xea>
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b04      	cmp	r3, #4
 8002170:	ddeb      	ble.n	800214a <parse_drone_trame_char+0xc2>
 8002172:	46b5      	mov	sp, r6
 8002174:	e001      	b.n	800217a <parse_drone_trame_char+0xf2>
        if (token == NULL) return;
 8002176:	bf00      	nop
    if (start == NULL) return;  // Trame invalide
 8002178:	46b5      	mov	sp, r6
    }
}
 800217a:	372c      	adds	r7, #44	@ 0x2c
 800217c:	46bd      	mov	sp, r7
 800217e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002182:	bf00      	nop
 8002184:	08006bdc 	.word	0x08006bdc
 8002188:	20000434 	.word	0x20000434
 800218c:	08006bcc 	.word	0x08006bcc
 8002190:	2000043c 	.word	0x2000043c

08002194 <process_gpios>:


////////////////////////////////////////////////////////////////// CODE BUTTONS
SystemButtons buttons = {0};

void process_gpios(int* gpioData){
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if (gpioData[4]){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3310      	adds	r3, #16
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <process_gpios+0x20>
		buttons.EMERGENCY_STOP_BUTTON = true;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <process_gpios+0x88>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	711a      	strb	r2, [r3, #4]
		gpioData[4]=0; //sécurité
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3310      	adds	r3, #16
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[0]){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <process_gpios+0x34>
		buttons.BACK_OFFSET_BUTTON = true;
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <process_gpios+0x88>)
 80021be:	2201      	movs	r2, #1
 80021c0:	70da      	strb	r2, [r3, #3]
		gpioData[0]=0; //sécurité
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[1]){
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <process_gpios+0x4c>
		buttons.LEFT_OFFSET_BUTTON = true;
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <process_gpios+0x88>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
		gpioData[1]=0; //sécurité
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[2]){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3308      	adds	r3, #8
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <process_gpios+0x64>
		buttons.FRONT_OFFSET_BUTTON = true;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <process_gpios+0x88>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	709a      	strb	r2, [r3, #2]
		gpioData[2]=0; //sécurité
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3308      	adds	r3, #8
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
	}
	if (gpioData[3]){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	330c      	adds	r3, #12
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <process_gpios+0x7c>
		buttons.RIGHT_OFFSET_BUTTON = true;
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <process_gpios+0x88>)
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
		gpioData[3]=0; //sécurité
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	330c      	adds	r3, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
	}


}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000450 	.word	0x20000450

08002220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_MspInit+0x5c>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	4a14      	ldr	r2, [pc, #80]	@ (800227c <HAL_MspInit+0x5c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6193      	str	r3, [r2, #24]
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_MspInit+0x5c>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_MspInit+0x5c>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a0e      	ldr	r2, [pc, #56]	@ (800227c <HAL_MspInit+0x5c>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <HAL_MspInit+0x5c>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_MspInit+0x60>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_MspInit+0x60>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000

08002284 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0f      	ldr	r2, [pc, #60]	@ (80022d0 <HAL_RTC_MspInit+0x4c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d118      	bne.n	80022c8 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002296:	f000 fe5b 	bl	8002f50 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_RTC_MspInit+0x50>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_RTC_MspInit+0x50>)
 80022a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RTC_MspInit+0x50>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_RTC_MspInit+0x54>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2101      	movs	r1, #1
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 fbda 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 fbf3 	bl	8002aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40002800 	.word	0x40002800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	4242043c 	.word	0x4242043c

080022dc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_TIM_PWM_MspInit+0xa0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 80022f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022f8:	6193      	str	r3, [r2, #24]
 80022fa:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002306:	e034      	b.n	8002372 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002310:	d10c      	bne.n	800232c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a1a      	ldr	r2, [pc, #104]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
}
 800232a:	e022      	b.n	8002372 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_TIM_PWM_MspInit+0xa8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10c      	bne.n	8002350 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002336:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	e010      	b.n	8002372 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <HAL_TIM_PWM_MspInit+0xac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10b      	bne.n	8002372 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_TIM_PWM_MspInit+0xa4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800

0800238c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3d      	ldr	r2, [pc, #244]	@ (800249c <HAL_TIM_MspPostInit+0x110>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d119      	bne.n	80023e0 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b3c      	ldr	r3, [pc, #240]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a3b      	ldr	r2, [pc, #236]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2302      	movs	r3, #2
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0318 	add.w	r3, r7, #24
 80023d6:	4619      	mov	r1, r3
 80023d8:	4832      	ldr	r0, [pc, #200]	@ (80024a4 <HAL_TIM_MspPostInit+0x118>)
 80023da:	f000 fc35 	bl	8002c48 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023de:	e059      	b.n	8002494 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d118      	bne.n	800241c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002402:	2304      	movs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2302      	movs	r3, #2
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0318 	add.w	r3, r7, #24
 8002412:	4619      	mov	r1, r3
 8002414:	4823      	ldr	r0, [pc, #140]	@ (80024a4 <HAL_TIM_MspPostInit+0x118>)
 8002416:	f000 fc17 	bl	8002c48 <HAL_GPIO_Init>
}
 800241a:	e03b      	b.n	8002494 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a21      	ldr	r2, [pc, #132]	@ (80024a8 <HAL_TIM_MspPostInit+0x11c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d118      	bne.n	8002458 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a1d      	ldr	r2, [pc, #116]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800243e:	2340      	movs	r3, #64	@ 0x40
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2302      	movs	r3, #2
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0318 	add.w	r3, r7, #24
 800244e:	4619      	mov	r1, r3
 8002450:	4814      	ldr	r0, [pc, #80]	@ (80024a4 <HAL_TIM_MspPostInit+0x118>)
 8002452:	f000 fbf9 	bl	8002c48 <HAL_GPIO_Init>
}
 8002456:	e01d      	b.n	8002494 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a13      	ldr	r2, [pc, #76]	@ (80024ac <HAL_TIM_MspPostInit+0x120>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d118      	bne.n	8002494 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a0e      	ldr	r2, [pc, #56]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_TIM_MspPostInit+0x114>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2302      	movs	r3, #2
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	4619      	mov	r1, r3
 800248e:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <HAL_TIM_MspPostInit+0x124>)
 8002490:	f000 fbda 	bl	8002c48 <HAL_GPIO_Init>
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40010c00 	.word	0x40010c00

080024b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <HAL_UART_MspInit+0x9c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d139      	bne.n	8002548 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4619      	mov	r1, r3
 8002518:	480f      	ldr	r0, [pc, #60]	@ (8002558 <HAL_UART_MspInit+0xa4>)
 800251a:	f000 fb95 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800251e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4809      	ldr	r0, [pc, #36]	@ (8002558 <HAL_UART_MspInit+0xa4>)
 8002534:	f000 fb88 	bl	8002c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2025      	movs	r0, #37	@ 0x25
 800253e:	f000 fa9a 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002542:	2025      	movs	r0, #37	@ 0x25
 8002544:	f000 fab3 	bl	8002aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <NMI_Handler+0x4>

08002564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <MemManage_Handler+0x4>

08002574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <UsageFault_Handler+0x4>

08002584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f94c 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  DC_Motor_RampTick();
 80025b0:	f7fe f9d6 	bl	8000960 <DC_Motor_RampTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <RTC_IRQHandler+0x10>)
 80025be:	f001 fb58 	bl	8003c72 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000204 	.word	0x20000204

080025cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <USART1_IRQHandler+0x10>)
 80025d2:	f002 f915 	bl	8004800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000338 	.word	0x20000338

080025e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return 1;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <_kill>:

int _kill(int pid, int sig)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025f8:	f003 f8e6 	bl	80057c8 <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2216      	movs	r2, #22
 8002600:	601a      	str	r2, [r3, #0]
  return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_exit>:

void _exit (int status)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002616:	f04f 31ff 	mov.w	r1, #4294967295
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffe7 	bl	80025ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <_exit+0x12>

08002624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e00a      	b.n	800264c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002636:	f3af 8000 	nop.w
 800263a:	4601      	mov	r1, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	b2ca      	uxtb	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf0      	blt.n	8002636 <_read+0x12>
  }

  return len;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e009      	b.n	8002684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	60ba      	str	r2, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	dbf1      	blt.n	8002670 <_write+0x12>
  }
  return len;
 800268c:	687b      	ldr	r3, [r7, #4]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_close>:

int _close(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026bc:	605a      	str	r2, [r3, #4]
  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <_isatty>:

int _isatty(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002728:	f003 f84e 	bl	80057c8 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20005000 	.word	0x20005000
 8002758:	00000400 	.word	0x00000400
 800275c:	20000458 	.word	0x20000458
 8002760:	200005b0 	.word	0x200005b0

08002764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002770:	f7ff fff8 	bl	8002764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480b      	ldr	r0, [pc, #44]	@ (80027a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002776:	490c      	ldr	r1, [pc, #48]	@ (80027a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002778:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800278c:	4c09      	ldr	r4, [pc, #36]	@ (80027b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279a:	f003 f81b 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279e:	f7fe fcb7 	bl	8001110 <main>
  bx lr
 80027a2:	4770      	bx	lr
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80027ac:	08006e10 	.word	0x08006e10
  ldr r2, =_sbss
 80027b0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80027b4:	200005ac 	.word	0x200005ac

080027b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC1_2_IRQHandler>
	...

080027bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <HAL_Init+0x28>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <HAL_Init+0x28>)
 80027c6:	f043 0310 	orr.w	r3, r3, #16
 80027ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f947 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	200f      	movs	r0, #15
 80027d4:	f000 f808 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fd22 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40022000 	.word	0x40022000

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_InitTick+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_InitTick+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f95f 	bl	8002aca <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f000 f927 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <HAL_InitTick+0x5c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000120 	.word	0x20000120
 8002840:	20000128 	.word	0x20000128
 8002844:	20000124 	.word	0x20000124

08002848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_IncTick+0x1c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_IncTick+0x20>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a03      	ldr	r2, [pc, #12]	@ (8002868 <HAL_IncTick+0x20>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000128 	.word	0x20000128
 8002868:	2000045c 	.word	0x2000045c

0800286c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <HAL_GetTick+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	2000045c 	.word	0x2000045c

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fff0 	bl	800286c <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffe0 	bl	800286c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000128 	.word	0x20000128

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	@ (8002960 <__NVIC_EnableIRQ+0x34>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff2d 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff42 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff35 	bl	800292c <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e020      	b.n	8002b4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 020e 	bic.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2204      	movs	r2, #4
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e051      	b.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Abort_IT+0xd4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d029      	beq.n	8002bfa <HAL_DMA_Abort_IT+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <HAL_DMA_Abort_IT+0xd8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0x9e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_DMA_Abort_IT+0xdc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x98>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_DMA_Abort_IT+0xe0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_Abort_IT+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_DMA_Abort_IT+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_DMA_Abort_IT+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_DMA_Abort_IT+0x86>
 8002bd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be2:	e00b      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be8:	e008      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bee:	e005      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf4:	e002      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <HAL_DMA_Abort_IT+0xec>)
 8002bfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    } 
  }
  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b08b      	sub	sp, #44	@ 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e169      	b.n	8002f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8158 	bne.w	8002f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d05e      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c84:	4a98      	ldr	r2, [pc, #608]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d875      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c8a:	4a98      	ldr	r2, [pc, #608]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d058      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c90:	4a96      	ldr	r2, [pc, #600]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d86f      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c96:	4a96      	ldr	r2, [pc, #600]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d052      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c9c:	4a94      	ldr	r2, [pc, #592]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d869      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002ca2:	4a94      	ldr	r2, [pc, #592]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04c      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a92      	ldr	r2, [pc, #584]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d863      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cae:	4a92      	ldr	r2, [pc, #584]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d046      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a90      	ldr	r2, [pc, #576]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d85d      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cba:	2b12      	cmp	r3, #18
 8002cbc:	d82a      	bhi.n	8002d14 <HAL_GPIO_Init+0xcc>
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d859      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_GPIO_Init+0x80>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d43 	.word	0x08002d43
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002d2f 	.word	0x08002d2f
 8002cd4:	08002d71 	.word	0x08002d71
 8002cd8:	08002d77 	.word	0x08002d77
 8002cdc:	08002d77 	.word	0x08002d77
 8002ce0:	08002d77 	.word	0x08002d77
 8002ce4:	08002d77 	.word	0x08002d77
 8002ce8:	08002d77 	.word	0x08002d77
 8002cec:	08002d77 	.word	0x08002d77
 8002cf0:	08002d77 	.word	0x08002d77
 8002cf4:	08002d77 	.word	0x08002d77
 8002cf8:	08002d77 	.word	0x08002d77
 8002cfc:	08002d77 	.word	0x08002d77
 8002d00:	08002d77 	.word	0x08002d77
 8002d04:	08002d77 	.word	0x08002d77
 8002d08:	08002d77 	.word	0x08002d77
 8002d0c:	08002d25 	.word	0x08002d25
 8002d10:	08002d39 	.word	0x08002d39
 8002d14:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_GPIO_Init+0x2b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d1a:	e02c      	b.n	8002d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	623b      	str	r3, [r7, #32]
          break;
 8002d22:	e029      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	623b      	str	r3, [r7, #32]
          break;
 8002d2c:	e024      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	3308      	adds	r3, #8
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e01f      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	623b      	str	r3, [r7, #32]
          break;
 8002d40:	e01a      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e013      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	611a      	str	r2, [r3, #16]
          break;
 8002d62:	e009      	b.n	8002d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d64:	2308      	movs	r3, #8
 8002d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	615a      	str	r2, [r3, #20]
          break;
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          break;
 8002d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2bff      	cmp	r3, #255	@ 0xff
 8002d7c:	d801      	bhi.n	8002d82 <HAL_GPIO_Init+0x13a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_Init+0x13e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d802      	bhi.n	8002d94 <HAL_GPIO_Init+0x14c>
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x152>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	3b08      	subs	r3, #8
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	210f      	movs	r1, #15
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	431a      	orrs	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b1 	beq.w	8002f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a40      	ldr	r2, [pc, #256]	@ (8002f08 <HAL_GPIO_Init+0x2c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1ec>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <HAL_GPIO_Init+0x2c4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1e8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <HAL_GPIO_Init+0x2c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f14 <HAL_GPIO_Init+0x2cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1e0>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e34:	2300      	movs	r3, #0
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e46:	492f      	ldr	r1, [pc, #188]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	492c      	ldr	r1, [pc, #176]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4928      	ldr	r1, [pc, #160]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4922      	ldr	r1, [pc, #136]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	491e      	ldr	r1, [pc, #120]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4918      	ldr	r1, [pc, #96]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4914      	ldr	r1, [pc, #80]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e021      	b.n	8002f2a <HAL_GPIO_Init+0x2e2>
 8002ee6:	bf00      	nop
 8002ee8:	10320000 	.word	0x10320000
 8002eec:	10310000 	.word	0x10310000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	10120000 	.word	0x10120000
 8002efc:	10110000 	.word	0x10110000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4909      	ldr	r1, [pc, #36]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae8e 	bne.w	8002c5c <HAL_GPIO_Init+0x14>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	372c      	adds	r7, #44	@ 0x2c
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	420e0020 	.word	0x420e0020

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e272      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8087 	beq.w	8003096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f88:	4b92      	ldr	r3, [pc, #584]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d00c      	beq.n	8002fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f94:	4b8f      	ldr	r3, [pc, #572]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d112      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4b89      	ldr	r3, [pc, #548]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d06c      	beq.n	8003094 <HAL_RCC_OscConfig+0x12c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d168      	bne.n	8003094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e24c      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x76>
 8002fd0:	4b80      	ldr	r3, [pc, #512]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e02e      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7a      	ldr	r2, [pc, #488]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b78      	ldr	r3, [pc, #480]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a77      	ldr	r2, [pc, #476]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0xbc>
 800300a:	4b72      	ldr	r3, [pc, #456]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a71      	ldr	r2, [pc, #452]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b68      	ldr	r3, [pc, #416]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a67      	ldr	r2, [pc, #412]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff fc12 	bl	800286c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7ff fc0e 	bl	800286c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	@ 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e200      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xe4>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7ff fbfe 	bl	800286c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff fbfa 	bl	800286c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1ec      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x10c>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a2:	4b4c      	ldr	r3, [pc, #304]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ae:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
 80030ba:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b43      	ldr	r3, [pc, #268]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c0      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3d      	ldr	r3, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4939      	ldr	r1, [pc, #228]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff fbb3 	bl	800286c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7ff fbaf 	bl	800286c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4927      	ldr	r1, [pc, #156]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff fb92 	bl	800286c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7ff fb8e 	bl	800286c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e180      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03a      	beq.n	80031ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7ff fb72 	bl	800286c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7ff fb6e 	bl	800286c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e160      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f000 face 	bl	800374c <RCC_Delay>
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7ff fb58 	bl	800286c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7ff fb54 	bl	800286c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d908      	bls.n	80031e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e146      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	42420000 	.word	0x42420000
 80031dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e9      	bne.n	80031c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a6 	beq.w	8003346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b8b      	ldr	r3, [pc, #556]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a87      	ldr	r2, [pc, #540]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]
 8003216:	4b85      	ldr	r3, [pc, #532]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7ff fb15 	bl	800286c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7ff fb11 	bl	800286c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	@ 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e103      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x4c8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x312>
 800326c:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e02d      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x334>
 8003282:	4b6a      	ldr	r3, [pc, #424]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a69      	ldr	r2, [pc, #420]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	4b67      	ldr	r3, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a66      	ldr	r2, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6213      	str	r3, [r2, #32]
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x356>
 80032a4:	4b61      	ldr	r3, [pc, #388]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a60      	ldr	r2, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	4b58      	ldr	r3, [pc, #352]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a57      	ldr	r2, [pc, #348]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7ff fac5 	bl	800286c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7ff fac1 	bl	800286c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0b1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x37e>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7ff faaf 	bl	800286c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7ff faab 	bl	800286c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e09b      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b3c      	ldr	r3, [pc, #240]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4a3b      	ldr	r2, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d061      	beq.n	8003420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d146      	bne.n	80033f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7ff fa7f 	bl	800286c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7ff fa7b 	bl	800286c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e06d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d108      	bne.n	80033ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4921      	ldr	r1, [pc, #132]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a19      	ldr	r1, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	430b      	orrs	r3, r1
 80033be:	491b      	ldr	r1, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7ff fa4f 	bl	800286c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d2:	f7ff fa4b 	bl	800286c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e03d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46a>
 80033f0:	e035      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff fa38 	bl	800286c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7ff fa34 	bl	800286c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e026      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x498>
 800341e:	e01e      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e019      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
 8003434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_RCC_OscConfig+0x500>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4965      	ldr	r1, [pc, #404]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7ff f986 	bl	800286c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7ff f982 	bl	800286c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4922      	ldr	r1, [pc, #136]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f8e4 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	08006be0 	.word	0x08006be0
 8003638:	20000120 	.word	0x20000120
 800363c:	20000124 	.word	0x20000124

08003640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x30>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x36>
 800366e:	e027      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003672:	613b      	str	r3, [r7, #16]
      break;
 8003674:	e027      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0c5b      	lsrs	r3, r3, #17
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	4a11      	ldr	r2, [pc, #68]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a2:	fb03 f202 	mul.w	r2, r3, r2
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e004      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	613b      	str	r3, [r7, #16]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	693b      	ldr	r3, [r7, #16]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	08006bf8 	.word	0x08006bf8
 80036e0:	08006c08 	.word	0x08006c08
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	@ (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000120 	.word	0x20000120

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	08006bf0 	.word	0x08006bf0

08003724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003728:	f7ff ffde 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0adb      	lsrs	r3, r3, #11
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	08006bf0 	.word	0x08006bf0

0800374c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003754:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <RCC_Delay+0x34>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <RCC_Delay+0x38>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a5b      	lsrs	r3, r3, #9
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003768:	bf00      	nop
  }
  while (Delay --);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f9      	bne.n	8003768 <RCC_Delay+0x1c>
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000120 	.word	0x20000120
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d07d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a8:	4b4f      	ldr	r3, [pc, #316]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b4c      	ldr	r3, [pc, #304]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
 80037c0:	4b49      	ldr	r3, [pc, #292]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b46      	ldr	r3, [pc, #280]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037dc:	4b43      	ldr	r3, [pc, #268]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a42      	ldr	r2, [pc, #264]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7ff f840 	bl	800286c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7ff f83c 	bl	800286c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	@ 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e06d      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d027      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382c:	4b2e      	ldr	r3, [pc, #184]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003836:	4b2e      	ldr	r3, [pc, #184]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383c:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003842:	4a29      	ldr	r2, [pc, #164]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7ff f80b 	bl	800286c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7ff f807 	bl	800286c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e036      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ee      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	4b1a      	ldr	r3, [pc, #104]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4917      	ldr	r1, [pc, #92]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	4313      	orrs	r3, r2
 800388c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ac:	4b0e      	ldr	r3, [pc, #56]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	490b      	ldr	r1, [pc, #44]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4904      	ldr	r1, [pc, #16]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42420440 	.word	0x42420440

080038f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b10      	cmp	r3, #16
 800391a:	f200 808a 	bhi.w	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d045      	beq.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d075      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800392a:	e082      	b.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800392c:	4b46      	ldr	r3, [pc, #280]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003932:	4b45      	ldr	r3, [pc, #276]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07b      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0c9b      	lsrs	r3, r3, #18
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003956:	4b3c      	ldr	r3, [pc, #240]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0c5b      	lsrs	r3, r3, #17
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	4a3b      	ldr	r2, [pc, #236]	@ (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003970:	4a38      	ldr	r2, [pc, #224]	@ (8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e004      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a34      	ldr	r2, [pc, #208]	@ (8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800398c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003998:	d102      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	61bb      	str	r3, [r7, #24]
      break;
 800399e:	e04a      	b.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
      break;
 80039ae:	e042      	b.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80039b0:	4b25      	ldr	r3, [pc, #148]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c0:	d108      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80039cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e01f      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039de:	d109      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039ec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fe:	d11c      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a0c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003a10:	61bb      	str	r3, [r7, #24]
      break;
 8003a12:	e012      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a14:	e011      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a16:	f7ff fe85 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0b9b      	lsrs	r3, r3, #14
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
      break;
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a3a:	bf00      	nop
    }
  }
  return (frequency);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08006c0c 	.word	0x08006c0c
 8003a50:	08006c1c 	.word	0x08006c1c
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	003d0900 	.word	0x003d0900
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab

08003a60 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07a      	b.n	8003b6c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7c5b      	ldrb	r3, [r3, #17]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe fbfc 	bl	8002284 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f870 	bl	8003b78 <HAL_RTC_WaitForSynchro>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e061      	b.n	8003b6c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f892 	bl	8003bd2 <RTC_EnterInitMode>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e056      	b.n	8003b6c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0207 	bic.w	r2, r2, #7
 8003acc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003ad6:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RTC_Init+0x114>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	4a26      	ldr	r2, [pc, #152]	@ (8003b74 <HAL_RTC_Init+0x114>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_RTC_Init+0x114>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4921      	ldr	r1, [pc, #132]	@ (8003b74 <HAL_RTC_Init+0x114>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d003      	beq.n	8003b06 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e00e      	b.n	8003b24 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f7ff fef4 	bl	80038f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b0c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e026      	b.n	8003b6c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	0c1a      	lsrs	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f002 020f 	and.w	r2, r2, #15
 8003b30:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	b292      	uxth	r2, r2
 8003b3a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f870 	bl	8003c22 <RTC_ExitInitMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00c      	b.n	8003b6c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40006c00 	.word	0x40006c00

08003b78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01d      	b.n	8003bca <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0208 	bic.w	r2, r2, #8
 8003b9c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b9e:	f7fe fe65 	bl	800286c <HAL_GetTick>
 8003ba2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ba4:	e009      	b.n	8003bba <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ba6:	f7fe fe61 	bl	800286c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bb4:	d901      	bls.n	8003bba <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e007      	b.n	8003bca <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ee      	beq.n	8003ba6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003bde:	f7fe fe45 	bl	800286c <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003be4:	e009      	b.n	8003bfa <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003be6:	f7fe fe41 	bl	800286c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bf4:	d901      	bls.n	8003bfa <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e00f      	b.n	8003c1a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0210 	orr.w	r2, r2, #16
 8003c16:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0210 	bic.w	r2, r2, #16
 8003c3c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003c3e:	f7fe fe15 	bl	800286c <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c44:	e009      	b.n	8003c5a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c46:	f7fe fe11 	bl	800286c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c54:	d901      	bls.n	8003c5a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e007      	b.n	8003c6a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d027      	beq.n	8003cd8 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d020      	beq.n	8003cd8 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f824 	bl	8003cf2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0204 	mvn.w	r2, #4
 8003cb2:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	745a      	strb	r2, [r3, #17]
 8003cba:	e005      	b.n	8003cc8 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f80f 	bl	8003ce0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e041      	b.n	8003d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe fad6 	bl	80022dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 f992 	bl	800406c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_TIM_PWM_Start+0x24>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e022      	b.n	8003e0e <HAL_TIM_PWM_Start+0x6a>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d109      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x3e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	e015      	b.n	8003e0e <HAL_TIM_PWM_Start+0x6a>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d109      	bne.n	8003dfc <HAL_TIM_PWM_Start+0x58>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e008      	b.n	8003e0e <HAL_TIM_PWM_Start+0x6a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e05e      	b.n	8003ed4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x82>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e24:	e013      	b.n	8003e4e <HAL_TIM_PWM_Start+0xaa>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x92>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e34:	e00b      	b.n	8003e4e <HAL_TIM_PWM_Start+0xaa>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xa2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e44:	e003      	b.n	8003e4e <HAL_TIM_PWM_Start+0xaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fafe 	bl	8004458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1e      	ldr	r2, [pc, #120]	@ (8003edc <HAL_TIM_PWM_Start+0x138>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_TIM_PWM_Start+0x138>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIM_PWM_Start+0xfa>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e88:	d009      	beq.n	8003e9e <HAL_TIM_PWM_Start+0xfa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <HAL_TIM_PWM_Start+0x13c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIM_PWM_Start+0xfa>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <HAL_TIM_PWM_Start+0x140>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d010      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	e007      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800

08003ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0ae      	b.n	8004064 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	f200 809f 	bhi.w	8004054 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f16:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f51 	.word	0x08003f51
 8003f20:	08004055 	.word	0x08004055
 8003f24:	08004055 	.word	0x08004055
 8003f28:	08004055 	.word	0x08004055
 8003f2c:	08003f91 	.word	0x08003f91
 8003f30:	08004055 	.word	0x08004055
 8003f34:	08004055 	.word	0x08004055
 8003f38:	08004055 	.word	0x08004055
 8003f3c:	08003fd3 	.word	0x08003fd3
 8003f40:	08004055 	.word	0x08004055
 8003f44:	08004055 	.word	0x08004055
 8003f48:	08004055 	.word	0x08004055
 8003f4c:	08004013 	.word	0x08004013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8f6 	bl	8004148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0208 	orr.w	r2, r2, #8
 8003f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0204 	bic.w	r2, r2, #4
 8003f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6999      	ldr	r1, [r3, #24]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	619a      	str	r2, [r3, #24]
      break;
 8003f8e:	e064      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f93c 	bl	8004214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6999      	ldr	r1, [r3, #24]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	619a      	str	r2, [r3, #24]
      break;
 8003fd0:	e043      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f985 	bl	80042e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0208 	orr.w	r2, r2, #8
 8003fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0204 	bic.w	r2, r2, #4
 8003ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69d9      	ldr	r1, [r3, #28]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	61da      	str	r2, [r3, #28]
      break;
 8004010:	e023      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f9cf 	bl	80043bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69d9      	ldr	r1, [r3, #28]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	021a      	lsls	r2, r3, #8
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	61da      	str	r2, [r3, #28]
      break;
 8004052:	e002      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
      break;
 8004058:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a2f      	ldr	r2, [pc, #188]	@ (800413c <TIM_Base_SetConfig+0xd0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a2c      	ldr	r2, [pc, #176]	@ (8004140 <TIM_Base_SetConfig+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x30>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a2b      	ldr	r2, [pc, #172]	@ (8004144 <TIM_Base_SetConfig+0xd8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d108      	bne.n	80040ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	@ (800413c <TIM_Base_SetConfig+0xd0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004140 <TIM_Base_SetConfig+0xd4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004144 <TIM_Base_SetConfig+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0d      	ldr	r2, [pc, #52]	@ (800413c <TIM_Base_SetConfig+0xd0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d103      	bne.n	8004114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]
  }
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800

08004148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0201 	bic.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 0302 	bic.w	r3, r3, #2
 8004190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <TIM_OC1_SetConfig+0xc8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0308 	bic.w	r3, r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <TIM_OC1_SetConfig+0xc8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d111      	bne.n	80041ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00

08004214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <TIM_OC2_SetConfig+0xd0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10d      	bne.n	8004290 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a14      	ldr	r2, [pc, #80]	@ (80042e4 <TIM_OC2_SetConfig+0xd0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d113      	bne.n	80042c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800429e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00

080042e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_OC3_SetConfig+0xd0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10d      	bne.n	8004362 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800434c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <TIM_OC3_SetConfig+0xd0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d113      	bne.n	8004392 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00

080043bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	031b      	lsls	r3, r3, #12
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <TIM_OC4_SetConfig+0x98>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d109      	bne.n	8004430 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00

08004458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2201      	movs	r2, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e046      	b.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d009      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a10      	ldr	r2, [pc, #64]	@ (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10c      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800

0800455c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004574:	2302      	movs	r3, #2
 8004576:	e03d      	b.n	80045f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e042      	b.n	8004696 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fd ff45 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2224      	movs	r2, #36	@ 0x24
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004640:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fdb8 	bl	80051b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004656:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004666:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004676:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	@ 0x28
 80046a2:	af02      	add	r7, sp, #8
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d175      	bne.n	80047aa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_UART_Transmit+0x2c>
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e06e      	b.n	80047ac <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2221      	movs	r2, #33	@ 0x21
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046dc:	f7fe f8c6 	bl	800286c <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f6:	d108      	bne.n	800470a <HAL_UART_Transmit+0x6c>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e003      	b.n	8004712 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004712:	e02e      	b.n	8004772 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fb1d 	bl	8004d5e <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e03a      	b.n	80047ac <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	3302      	adds	r3, #2
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e007      	b.n	8004764 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1cb      	bne.n	8004714 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	@ 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fae9 	bl	8004d5e <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e006      	b.n	80047ac <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d112      	bne.n	80047f4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Receive_IT+0x26>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e00b      	b.n	80047f6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fb10 	bl	8004e10 <UART_Start_Receive_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	e000      	b.n	80047f6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b0ba      	sub	sp, #232	@ 0xe8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800483e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_UART_IRQHandler+0x66>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fbec 	bl	800503c <UART_Receive_IT>
      return;
 8004864:	e25b      	b.n	8004d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80de 	beq.w	8004a2c <HAL_UART_IRQHandler+0x22c>
 8004870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80d1 	beq.w	8004a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_UART_IRQHandler+0xae>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_UART_IRQHandler+0xd2>
 80048ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	f043 0202 	orr.w	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xf6>
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d011      	beq.n	8004926 <HAL_UART_IRQHandler+0x126>
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 81f2 	beq.w	8004d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_UART_IRQHandler+0x14e>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb77 	bl	800503c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_UART_IRQHandler+0x17a>
 8004972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04f      	beq.n	8004a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa81 	bl	8004e82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d041      	beq.n	8004a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1d9      	bne.n	800498e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	4a7e      	ldr	r2, [pc, #504]	@ (8004be0 <HAL_UART_IRQHandler+0x3e0>)
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f8b2 	bl	8002b58 <HAL_DMA_Abort_IT>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	e00e      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f993 	bl	8004d36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e00a      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f98f 	bl	8004d36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e006      	b.n	8004a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f98b 	bl	8004d36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a26:	e175      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	bf00      	nop
    return;
 8004a2a:	e173      	b.n	8004d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 814f 	bne.w	8004cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8148 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8141 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80b6 	beq.w	8004be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8145 	beq.w	8004d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a96:	429a      	cmp	r2, r3
 8004a98:	f080 813e 	bcs.w	8004d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	f000 8088 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ace:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004adc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ae8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1d9      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e1      	bne.n	8004afc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e3      	bne.n	8004b38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b90:	f023 0310 	bic.w	r3, r3, #16
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ba2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ba4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd ff91 	bl	8002ae2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8b6 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bdc:	e09c      	b.n	8004d18 <HAL_UART_IRQHandler+0x518>
 8004bde:	bf00      	nop
 8004be0:	08004f47 	.word	0x08004f47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 808e 	beq.w	8004d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8089 	beq.w	8004d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e3      	bne.n	8004c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	623b      	str	r3, [r7, #32]
   return(result);
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e3      	bne.n	8004c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cac:	61fa      	str	r2, [r7, #28]
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e3      	bne.n	8004c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f83b 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cd2:	e023      	b.n	8004d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x4f4>
 8004ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f93e 	bl	8004f6e <UART_Transmit_IT>
    return;
 8004cf2:	e014      	b.n	8004d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <HAL_UART_IRQHandler+0x51e>
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f97d 	bl	800500c <UART_EndTransmit_IT>
    return;
 8004d12:	e004      	b.n	8004d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d14:	bf00      	nop
 8004d16:	e002      	b.n	8004d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d1c:	bf00      	nop
  }
}
 8004d1e:	37e8      	adds	r7, #232	@ 0xe8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6e:	e03b      	b.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d037      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7fd fd78 	bl	800286c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e03a      	b.n	8004e08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d023      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d020      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	d01d      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d116      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f856 	bl	8004e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e00f      	b.n	8004e08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d0b4      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2222      	movs	r2, #34	@ 0x22
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0220 	orr.w	r2, r2, #32
 8004e74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b095      	sub	sp, #84	@ 0x54
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8004eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d119      	bne.n	8004f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f1a:	61ba      	str	r2, [r7, #24]
 8004f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f3c:	bf00      	nop
 8004f3e:	3754      	adds	r7, #84	@ 0x54
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff fee8 	bl	8004d36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b21      	cmp	r3, #33	@ 0x21
 8004f80:	d13e      	bne.n	8005000 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8a:	d114      	bne.n	8004fb6 <UART_Transmit_IT+0x48>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d110      	bne.n	8004fb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]
 8004fb4:	e008      	b.n	8004fc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6211      	str	r1, [r2, #32]
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ffa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005022:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff fe79 	bl	8004d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08c      	sub	sp, #48	@ 0x30
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b22      	cmp	r3, #34	@ 0x22
 800504e:	f040 80ae 	bne.w	80051ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	d117      	bne.n	800508c <UART_Receive_IT+0x50>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d113      	bne.n	800508c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	b29a      	uxth	r2, r3
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	629a      	str	r2, [r3, #40]	@ 0x28
 800508a:	e026      	b.n	80050da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509e:	d007      	beq.n	80050b0 <UART_Receive_IT+0x74>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <UART_Receive_IT+0x82>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e008      	b.n	80050d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	4619      	mov	r1, r3
 80050e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d15d      	bne.n	80051aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0220 	bic.w	r2, r2, #32
 80050fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800510c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005130:	2b01      	cmp	r3, #1
 8005132:	d135      	bne.n	80051a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	613b      	str	r3, [r7, #16]
   return(result);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515a:	623a      	str	r2, [r7, #32]
 800515c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	69f9      	ldr	r1, [r7, #28]
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	61bb      	str	r3, [r7, #24]
   return(result);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e5      	bne.n	800513a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d10a      	bne.n	8005192 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fdd5 	bl	8004d48 <HAL_UARTEx_RxEventCallback>
 800519e:	e002      	b.n	80051a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fc fa29 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e002      	b.n	80051b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3730      	adds	r7, #48	@ 0x30
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051f2:	f023 030c 	bic.w	r3, r3, #12
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <UART_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fe fa80 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	e002      	b.n	800522e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fe fa68 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 800522c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009a      	lsls	r2, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	4a22      	ldr	r2, [pc, #136]	@ (80052d0 <UART_SetConfig+0x118>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	0119      	lsls	r1, r3, #4
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	fbb2 f2f3 	udiv	r2, r2, r3
 8005264:	4b1a      	ldr	r3, [pc, #104]	@ (80052d0 <UART_SetConfig+0x118>)
 8005266:	fba3 0302 	umull	r0, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2064      	movs	r0, #100	@ 0x64
 800526e:	fb00 f303 	mul.w	r3, r0, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	3332      	adds	r3, #50	@ 0x32
 8005278:	4a15      	ldr	r2, [pc, #84]	@ (80052d0 <UART_SetConfig+0x118>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005284:	4419      	add	r1, r3
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009a      	lsls	r2, r3, #2
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	fbb2 f2f3 	udiv	r2, r2, r3
 800529c:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <UART_SetConfig+0x118>)
 800529e:	fba3 0302 	umull	r0, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2064      	movs	r0, #100	@ 0x64
 80052a6:	fb00 f303 	mul.w	r3, r0, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	3332      	adds	r3, #50	@ 0x32
 80052b0:	4a07      	ldr	r2, [pc, #28]	@ (80052d0 <UART_SetConfig+0x118>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	440a      	add	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40013800 	.word	0x40013800
 80052d0:	51eb851f 	.word	0x51eb851f

080052d4 <atoi>:
 80052d4:	220a      	movs	r2, #10
 80052d6:	2100      	movs	r1, #0
 80052d8:	f000 b87a 	b.w	80053d0 <strtol>

080052dc <_strtol_l.isra.0>:
 80052dc:	2b24      	cmp	r3, #36	@ 0x24
 80052de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e2:	4686      	mov	lr, r0
 80052e4:	4690      	mov	r8, r2
 80052e6:	d801      	bhi.n	80052ec <_strtol_l.isra.0+0x10>
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <_strtol_l.isra.0+0x1e>
 80052ec:	f000 fa6c 	bl	80057c8 <__errno>
 80052f0:	2316      	movs	r3, #22
 80052f2:	6003      	str	r3, [r0, #0]
 80052f4:	2000      	movs	r0, #0
 80052f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fa:	460d      	mov	r5, r1
 80052fc:	4833      	ldr	r0, [pc, #204]	@ (80053cc <_strtol_l.isra.0+0xf0>)
 80052fe:	462a      	mov	r2, r5
 8005300:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005304:	5d06      	ldrb	r6, [r0, r4]
 8005306:	f016 0608 	ands.w	r6, r6, #8
 800530a:	d1f8      	bne.n	80052fe <_strtol_l.isra.0+0x22>
 800530c:	2c2d      	cmp	r4, #45	@ 0x2d
 800530e:	d110      	bne.n	8005332 <_strtol_l.isra.0+0x56>
 8005310:	2601      	movs	r6, #1
 8005312:	782c      	ldrb	r4, [r5, #0]
 8005314:	1c95      	adds	r5, r2, #2
 8005316:	f033 0210 	bics.w	r2, r3, #16
 800531a:	d115      	bne.n	8005348 <_strtol_l.isra.0+0x6c>
 800531c:	2c30      	cmp	r4, #48	@ 0x30
 800531e:	d10d      	bne.n	800533c <_strtol_l.isra.0+0x60>
 8005320:	782a      	ldrb	r2, [r5, #0]
 8005322:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005326:	2a58      	cmp	r2, #88	@ 0x58
 8005328:	d108      	bne.n	800533c <_strtol_l.isra.0+0x60>
 800532a:	786c      	ldrb	r4, [r5, #1]
 800532c:	3502      	adds	r5, #2
 800532e:	2310      	movs	r3, #16
 8005330:	e00a      	b.n	8005348 <_strtol_l.isra.0+0x6c>
 8005332:	2c2b      	cmp	r4, #43	@ 0x2b
 8005334:	bf04      	itt	eq
 8005336:	782c      	ldrbeq	r4, [r5, #0]
 8005338:	1c95      	addeq	r5, r2, #2
 800533a:	e7ec      	b.n	8005316 <_strtol_l.isra.0+0x3a>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f6      	bne.n	800532e <_strtol_l.isra.0+0x52>
 8005340:	2c30      	cmp	r4, #48	@ 0x30
 8005342:	bf14      	ite	ne
 8005344:	230a      	movne	r3, #10
 8005346:	2308      	moveq	r3, #8
 8005348:	2200      	movs	r2, #0
 800534a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800534e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005352:	fbbc f9f3 	udiv	r9, ip, r3
 8005356:	4610      	mov	r0, r2
 8005358:	fb03 ca19 	mls	sl, r3, r9, ip
 800535c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005360:	2f09      	cmp	r7, #9
 8005362:	d80f      	bhi.n	8005384 <_strtol_l.isra.0+0xa8>
 8005364:	463c      	mov	r4, r7
 8005366:	42a3      	cmp	r3, r4
 8005368:	dd1b      	ble.n	80053a2 <_strtol_l.isra.0+0xc6>
 800536a:	1c57      	adds	r7, r2, #1
 800536c:	d007      	beq.n	800537e <_strtol_l.isra.0+0xa2>
 800536e:	4581      	cmp	r9, r0
 8005370:	d314      	bcc.n	800539c <_strtol_l.isra.0+0xc0>
 8005372:	d101      	bne.n	8005378 <_strtol_l.isra.0+0x9c>
 8005374:	45a2      	cmp	sl, r4
 8005376:	db11      	blt.n	800539c <_strtol_l.isra.0+0xc0>
 8005378:	2201      	movs	r2, #1
 800537a:	fb00 4003 	mla	r0, r0, r3, r4
 800537e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005382:	e7eb      	b.n	800535c <_strtol_l.isra.0+0x80>
 8005384:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005388:	2f19      	cmp	r7, #25
 800538a:	d801      	bhi.n	8005390 <_strtol_l.isra.0+0xb4>
 800538c:	3c37      	subs	r4, #55	@ 0x37
 800538e:	e7ea      	b.n	8005366 <_strtol_l.isra.0+0x8a>
 8005390:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005394:	2f19      	cmp	r7, #25
 8005396:	d804      	bhi.n	80053a2 <_strtol_l.isra.0+0xc6>
 8005398:	3c57      	subs	r4, #87	@ 0x57
 800539a:	e7e4      	b.n	8005366 <_strtol_l.isra.0+0x8a>
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	e7ed      	b.n	800537e <_strtol_l.isra.0+0xa2>
 80053a2:	1c53      	adds	r3, r2, #1
 80053a4:	d108      	bne.n	80053b8 <_strtol_l.isra.0+0xdc>
 80053a6:	2322      	movs	r3, #34	@ 0x22
 80053a8:	4660      	mov	r0, ip
 80053aa:	f8ce 3000 	str.w	r3, [lr]
 80053ae:	f1b8 0f00 	cmp.w	r8, #0
 80053b2:	d0a0      	beq.n	80052f6 <_strtol_l.isra.0+0x1a>
 80053b4:	1e69      	subs	r1, r5, #1
 80053b6:	e006      	b.n	80053c6 <_strtol_l.isra.0+0xea>
 80053b8:	b106      	cbz	r6, 80053bc <_strtol_l.isra.0+0xe0>
 80053ba:	4240      	negs	r0, r0
 80053bc:	f1b8 0f00 	cmp.w	r8, #0
 80053c0:	d099      	beq.n	80052f6 <_strtol_l.isra.0+0x1a>
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	d1f6      	bne.n	80053b4 <_strtol_l.isra.0+0xd8>
 80053c6:	f8c8 1000 	str.w	r1, [r8]
 80053ca:	e794      	b.n	80052f6 <_strtol_l.isra.0+0x1a>
 80053cc:	08006c1f 	.word	0x08006c1f

080053d0 <strtol>:
 80053d0:	4613      	mov	r3, r2
 80053d2:	460a      	mov	r2, r1
 80053d4:	4601      	mov	r1, r0
 80053d6:	4802      	ldr	r0, [pc, #8]	@ (80053e0 <strtol+0x10>)
 80053d8:	6800      	ldr	r0, [r0, #0]
 80053da:	f7ff bf7f 	b.w	80052dc <_strtol_l.isra.0>
 80053de:	bf00      	nop
 80053e0:	20000138 	.word	0x20000138

080053e4 <std>:
 80053e4:	2300      	movs	r3, #0
 80053e6:	b510      	push	{r4, lr}
 80053e8:	4604      	mov	r4, r0
 80053ea:	e9c0 3300 	strd	r3, r3, [r0]
 80053ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053f2:	6083      	str	r3, [r0, #8]
 80053f4:	8181      	strh	r1, [r0, #12]
 80053f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80053f8:	81c2      	strh	r2, [r0, #14]
 80053fa:	6183      	str	r3, [r0, #24]
 80053fc:	4619      	mov	r1, r3
 80053fe:	2208      	movs	r2, #8
 8005400:	305c      	adds	r0, #92	@ 0x5c
 8005402:	f000 f92a 	bl	800565a <memset>
 8005406:	4b0d      	ldr	r3, [pc, #52]	@ (800543c <std+0x58>)
 8005408:	6224      	str	r4, [r4, #32]
 800540a:	6263      	str	r3, [r4, #36]	@ 0x24
 800540c:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <std+0x5c>)
 800540e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005410:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <std+0x60>)
 8005412:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <std+0x64>)
 8005416:	6323      	str	r3, [r4, #48]	@ 0x30
 8005418:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <std+0x68>)
 800541a:	429c      	cmp	r4, r3
 800541c:	d006      	beq.n	800542c <std+0x48>
 800541e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005422:	4294      	cmp	r4, r2
 8005424:	d002      	beq.n	800542c <std+0x48>
 8005426:	33d0      	adds	r3, #208	@ 0xd0
 8005428:	429c      	cmp	r4, r3
 800542a:	d105      	bne.n	8005438 <std+0x54>
 800542c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005434:	f000 b9f2 	b.w	800581c <__retarget_lock_init_recursive>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	bf00      	nop
 800543c:	080055d5 	.word	0x080055d5
 8005440:	080055f7 	.word	0x080055f7
 8005444:	0800562f 	.word	0x0800562f
 8005448:	08005653 	.word	0x08005653
 800544c:	20000460 	.word	0x20000460

08005450 <stdio_exit_handler>:
 8005450:	4a02      	ldr	r2, [pc, #8]	@ (800545c <stdio_exit_handler+0xc>)
 8005452:	4903      	ldr	r1, [pc, #12]	@ (8005460 <stdio_exit_handler+0x10>)
 8005454:	4803      	ldr	r0, [pc, #12]	@ (8005464 <stdio_exit_handler+0x14>)
 8005456:	f000 b869 	b.w	800552c <_fwalk_sglue>
 800545a:	bf00      	nop
 800545c:	2000012c 	.word	0x2000012c
 8005460:	0800613d 	.word	0x0800613d
 8005464:	2000013c 	.word	0x2000013c

08005468 <cleanup_stdio>:
 8005468:	6841      	ldr	r1, [r0, #4]
 800546a:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <cleanup_stdio+0x34>)
 800546c:	b510      	push	{r4, lr}
 800546e:	4299      	cmp	r1, r3
 8005470:	4604      	mov	r4, r0
 8005472:	d001      	beq.n	8005478 <cleanup_stdio+0x10>
 8005474:	f000 fe62 	bl	800613c <_fflush_r>
 8005478:	68a1      	ldr	r1, [r4, #8]
 800547a:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <cleanup_stdio+0x38>)
 800547c:	4299      	cmp	r1, r3
 800547e:	d002      	beq.n	8005486 <cleanup_stdio+0x1e>
 8005480:	4620      	mov	r0, r4
 8005482:	f000 fe5b 	bl	800613c <_fflush_r>
 8005486:	68e1      	ldr	r1, [r4, #12]
 8005488:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <cleanup_stdio+0x3c>)
 800548a:	4299      	cmp	r1, r3
 800548c:	d004      	beq.n	8005498 <cleanup_stdio+0x30>
 800548e:	4620      	mov	r0, r4
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	f000 be52 	b.w	800613c <_fflush_r>
 8005498:	bd10      	pop	{r4, pc}
 800549a:	bf00      	nop
 800549c:	20000460 	.word	0x20000460
 80054a0:	200004c8 	.word	0x200004c8
 80054a4:	20000530 	.word	0x20000530

080054a8 <global_stdio_init.part.0>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <global_stdio_init.part.0+0x30>)
 80054ac:	4c0b      	ldr	r4, [pc, #44]	@ (80054dc <global_stdio_init.part.0+0x34>)
 80054ae:	4a0c      	ldr	r2, [pc, #48]	@ (80054e0 <global_stdio_init.part.0+0x38>)
 80054b0:	4620      	mov	r0, r4
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	2104      	movs	r1, #4
 80054b6:	2200      	movs	r2, #0
 80054b8:	f7ff ff94 	bl	80053e4 <std>
 80054bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054c0:	2201      	movs	r2, #1
 80054c2:	2109      	movs	r1, #9
 80054c4:	f7ff ff8e 	bl	80053e4 <std>
 80054c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054cc:	2202      	movs	r2, #2
 80054ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d2:	2112      	movs	r1, #18
 80054d4:	f7ff bf86 	b.w	80053e4 <std>
 80054d8:	20000598 	.word	0x20000598
 80054dc:	20000460 	.word	0x20000460
 80054e0:	08005451 	.word	0x08005451

080054e4 <__sfp_lock_acquire>:
 80054e4:	4801      	ldr	r0, [pc, #4]	@ (80054ec <__sfp_lock_acquire+0x8>)
 80054e6:	f000 b99a 	b.w	800581e <__retarget_lock_acquire_recursive>
 80054ea:	bf00      	nop
 80054ec:	200005a1 	.word	0x200005a1

080054f0 <__sfp_lock_release>:
 80054f0:	4801      	ldr	r0, [pc, #4]	@ (80054f8 <__sfp_lock_release+0x8>)
 80054f2:	f000 b995 	b.w	8005820 <__retarget_lock_release_recursive>
 80054f6:	bf00      	nop
 80054f8:	200005a1 	.word	0x200005a1

080054fc <__sinit>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	f7ff fff0 	bl	80054e4 <__sfp_lock_acquire>
 8005504:	6a23      	ldr	r3, [r4, #32]
 8005506:	b11b      	cbz	r3, 8005510 <__sinit+0x14>
 8005508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550c:	f7ff bff0 	b.w	80054f0 <__sfp_lock_release>
 8005510:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <__sinit+0x28>)
 8005512:	6223      	str	r3, [r4, #32]
 8005514:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <__sinit+0x2c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f5      	bne.n	8005508 <__sinit+0xc>
 800551c:	f7ff ffc4 	bl	80054a8 <global_stdio_init.part.0>
 8005520:	e7f2      	b.n	8005508 <__sinit+0xc>
 8005522:	bf00      	nop
 8005524:	08005469 	.word	0x08005469
 8005528:	20000598 	.word	0x20000598

0800552c <_fwalk_sglue>:
 800552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005530:	4607      	mov	r7, r0
 8005532:	4688      	mov	r8, r1
 8005534:	4614      	mov	r4, r2
 8005536:	2600      	movs	r6, #0
 8005538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800553c:	f1b9 0901 	subs.w	r9, r9, #1
 8005540:	d505      	bpl.n	800554e <_fwalk_sglue+0x22>
 8005542:	6824      	ldr	r4, [r4, #0]
 8005544:	2c00      	cmp	r4, #0
 8005546:	d1f7      	bne.n	8005538 <_fwalk_sglue+0xc>
 8005548:	4630      	mov	r0, r6
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d907      	bls.n	8005564 <_fwalk_sglue+0x38>
 8005554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005558:	3301      	adds	r3, #1
 800555a:	d003      	beq.n	8005564 <_fwalk_sglue+0x38>
 800555c:	4629      	mov	r1, r5
 800555e:	4638      	mov	r0, r7
 8005560:	47c0      	blx	r8
 8005562:	4306      	orrs	r6, r0
 8005564:	3568      	adds	r5, #104	@ 0x68
 8005566:	e7e9      	b.n	800553c <_fwalk_sglue+0x10>

08005568 <sniprintf>:
 8005568:	b40c      	push	{r2, r3}
 800556a:	b530      	push	{r4, r5, lr}
 800556c:	4b18      	ldr	r3, [pc, #96]	@ (80055d0 <sniprintf+0x68>)
 800556e:	1e0c      	subs	r4, r1, #0
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	b09d      	sub	sp, #116	@ 0x74
 8005574:	da08      	bge.n	8005588 <sniprintf+0x20>
 8005576:	238b      	movs	r3, #139	@ 0x8b
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	b01d      	add	sp, #116	@ 0x74
 8005580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005584:	b002      	add	sp, #8
 8005586:	4770      	bx	lr
 8005588:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800558c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005596:	bf0c      	ite	eq
 8005598:	4623      	moveq	r3, r4
 800559a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	9307      	str	r3, [sp, #28]
 80055a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055a6:	9002      	str	r0, [sp, #8]
 80055a8:	9006      	str	r0, [sp, #24]
 80055aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055ae:	4628      	mov	r0, r5
 80055b0:	ab21      	add	r3, sp, #132	@ 0x84
 80055b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80055b4:	a902      	add	r1, sp, #8
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	f000 fab4 	bl	8005b24 <_svfiprintf_r>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	bfbc      	itt	lt
 80055c0:	238b      	movlt	r3, #139	@ 0x8b
 80055c2:	602b      	strlt	r3, [r5, #0]
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	d0da      	beq.n	800557e <sniprintf+0x16>
 80055c8:	2200      	movs	r2, #0
 80055ca:	9b02      	ldr	r3, [sp, #8]
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	e7d6      	b.n	800557e <sniprintf+0x16>
 80055d0:	20000138 	.word	0x20000138

080055d4 <__sread>:
 80055d4:	b510      	push	{r4, lr}
 80055d6:	460c      	mov	r4, r1
 80055d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055dc:	f000 f8d0 	bl	8005780 <_read_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	bfab      	itete	ge
 80055e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055e6:	89a3      	ldrhlt	r3, [r4, #12]
 80055e8:	181b      	addge	r3, r3, r0
 80055ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055ee:	bfac      	ite	ge
 80055f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055f2:	81a3      	strhlt	r3, [r4, #12]
 80055f4:	bd10      	pop	{r4, pc}

080055f6 <__swrite>:
 80055f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fa:	461f      	mov	r7, r3
 80055fc:	898b      	ldrh	r3, [r1, #12]
 80055fe:	4605      	mov	r5, r0
 8005600:	05db      	lsls	r3, r3, #23
 8005602:	460c      	mov	r4, r1
 8005604:	4616      	mov	r6, r2
 8005606:	d505      	bpl.n	8005614 <__swrite+0x1e>
 8005608:	2302      	movs	r3, #2
 800560a:	2200      	movs	r2, #0
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	f000 f8a4 	bl	800575c <_lseek_r>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	4632      	mov	r2, r6
 8005618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	4628      	mov	r0, r5
 8005620:	463b      	mov	r3, r7
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	f000 b8bb 	b.w	80057a4 <_write_r>

0800562e <__sseek>:
 800562e:	b510      	push	{r4, lr}
 8005630:	460c      	mov	r4, r1
 8005632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005636:	f000 f891 	bl	800575c <_lseek_r>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	bf15      	itete	ne
 8005640:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800564a:	81a3      	strheq	r3, [r4, #12]
 800564c:	bf18      	it	ne
 800564e:	81a3      	strhne	r3, [r4, #12]
 8005650:	bd10      	pop	{r4, pc}

08005652 <__sclose>:
 8005652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005656:	f000 b871 	b.w	800573c <_close_r>

0800565a <memset>:
 800565a:	4603      	mov	r3, r0
 800565c:	4402      	add	r2, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	d100      	bne.n	8005664 <memset+0xa>
 8005662:	4770      	bx	lr
 8005664:	f803 1b01 	strb.w	r1, [r3], #1
 8005668:	e7f9      	b.n	800565e <memset+0x4>

0800566a <strchr>:
 800566a:	4603      	mov	r3, r0
 800566c:	b2c9      	uxtb	r1, r1
 800566e:	4618      	mov	r0, r3
 8005670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005674:	b112      	cbz	r2, 800567c <strchr+0x12>
 8005676:	428a      	cmp	r2, r1
 8005678:	d1f9      	bne.n	800566e <strchr+0x4>
 800567a:	4770      	bx	lr
 800567c:	2900      	cmp	r1, #0
 800567e:	bf18      	it	ne
 8005680:	2000      	movne	r0, #0
 8005682:	4770      	bx	lr

08005684 <strtok>:
 8005684:	4b16      	ldr	r3, [pc, #88]	@ (80056e0 <strtok+0x5c>)
 8005686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	681f      	ldr	r7, [r3, #0]
 800568c:	4605      	mov	r5, r0
 800568e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005690:	460e      	mov	r6, r1
 8005692:	b9ec      	cbnz	r4, 80056d0 <strtok+0x4c>
 8005694:	2050      	movs	r0, #80	@ 0x50
 8005696:	f000 f933 	bl	8005900 <malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	6478      	str	r0, [r7, #68]	@ 0x44
 800569e:	b920      	cbnz	r0, 80056aa <strtok+0x26>
 80056a0:	215b      	movs	r1, #91	@ 0x5b
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <strtok+0x60>)
 80056a4:	4810      	ldr	r0, [pc, #64]	@ (80056e8 <strtok+0x64>)
 80056a6:	f000 f8c5 	bl	8005834 <__assert_func>
 80056aa:	e9c0 4400 	strd	r4, r4, [r0]
 80056ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80056b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80056b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80056ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80056be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80056c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80056c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80056ca:	6184      	str	r4, [r0, #24]
 80056cc:	7704      	strb	r4, [r0, #28]
 80056ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d6:	2301      	movs	r3, #1
 80056d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	f000 b806 	b.w	80056ec <__strtok_r>
 80056e0:	20000138 	.word	0x20000138
 80056e4:	08006d1f 	.word	0x08006d1f
 80056e8:	08006d36 	.word	0x08006d36

080056ec <__strtok_r>:
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	4604      	mov	r4, r0
 80056f0:	b908      	cbnz	r0, 80056f6 <__strtok_r+0xa>
 80056f2:	6814      	ldr	r4, [r2, #0]
 80056f4:	b144      	cbz	r4, 8005708 <__strtok_r+0x1c>
 80056f6:	460f      	mov	r7, r1
 80056f8:	4620      	mov	r0, r4
 80056fa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80056fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005702:	b91e      	cbnz	r6, 800570c <__strtok_r+0x20>
 8005704:	b965      	cbnz	r5, 8005720 <__strtok_r+0x34>
 8005706:	6015      	str	r5, [r2, #0]
 8005708:	2000      	movs	r0, #0
 800570a:	e005      	b.n	8005718 <__strtok_r+0x2c>
 800570c:	42b5      	cmp	r5, r6
 800570e:	d1f6      	bne.n	80056fe <__strtok_r+0x12>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f0      	bne.n	80056f6 <__strtok_r+0xa>
 8005714:	6014      	str	r4, [r2, #0]
 8005716:	7003      	strb	r3, [r0, #0]
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	461c      	mov	r4, r3
 800571c:	e00c      	b.n	8005738 <__strtok_r+0x4c>
 800571e:	b91d      	cbnz	r5, 8005728 <__strtok_r+0x3c>
 8005720:	460e      	mov	r6, r1
 8005722:	4627      	mov	r7, r4
 8005724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005728:	f816 5b01 	ldrb.w	r5, [r6], #1
 800572c:	42ab      	cmp	r3, r5
 800572e:	d1f6      	bne.n	800571e <__strtok_r+0x32>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f2      	beq.n	800571a <__strtok_r+0x2e>
 8005734:	2300      	movs	r3, #0
 8005736:	703b      	strb	r3, [r7, #0]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	e7ed      	b.n	8005718 <__strtok_r+0x2c>

0800573c <_close_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	2300      	movs	r3, #0
 8005740:	4d05      	ldr	r5, [pc, #20]	@ (8005758 <_close_r+0x1c>)
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fc ffa5 	bl	8002696 <_close>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_close_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_close_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	2000059c 	.word	0x2000059c

0800575c <_lseek_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	2200      	movs	r2, #0
 8005766:	4d05      	ldr	r5, [pc, #20]	@ (800577c <_lseek_r+0x20>)
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fc ffb7 	bl	80026de <_lseek>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_lseek_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_lseek_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	2000059c 	.word	0x2000059c

08005780 <_read_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	2200      	movs	r2, #0
 800578a:	4d05      	ldr	r5, [pc, #20]	@ (80057a0 <_read_r+0x20>)
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fc ff48 	bl	8002624 <_read>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_read_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_read_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	2000059c 	.word	0x2000059c

080057a4 <_write_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	2200      	movs	r2, #0
 80057ae:	4d05      	ldr	r5, [pc, #20]	@ (80057c4 <_write_r+0x20>)
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fc ff53 	bl	800265e <_write>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_write_r+0x1e>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_write_r+0x1e>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	2000059c 	.word	0x2000059c

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	@ (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000138 	.word	0x20000138

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	2600      	movs	r6, #0
 80057d8:	4d0c      	ldr	r5, [pc, #48]	@ (800580c <__libc_init_array+0x38>)
 80057da:	4c0d      	ldr	r4, [pc, #52]	@ (8005810 <__libc_init_array+0x3c>)
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	f001 f846 	bl	8006874 <_init>
 80057e8:	2600      	movs	r6, #0
 80057ea:	4d0a      	ldr	r5, [pc, #40]	@ (8005814 <__libc_init_array+0x40>)
 80057ec:	4c0a      	ldr	r4, [pc, #40]	@ (8005818 <__libc_init_array+0x44>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08006e08 	.word	0x08006e08
 8005810:	08006e08 	.word	0x08006e08
 8005814:	08006e08 	.word	0x08006e08
 8005818:	08006e0c 	.word	0x08006e0c

0800581c <__retarget_lock_init_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_acquire_recursive>:
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_release_recursive>:
 8005820:	4770      	bx	lr

08005822 <strcpy>:
 8005822:	4603      	mov	r3, r0
 8005824:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005828:	f803 2b01 	strb.w	r2, [r3], #1
 800582c:	2a00      	cmp	r2, #0
 800582e:	d1f9      	bne.n	8005824 <strcpy+0x2>
 8005830:	4770      	bx	lr
	...

08005834 <__assert_func>:
 8005834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005836:	4614      	mov	r4, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <__assert_func+0x2c>)
 800583c:	4605      	mov	r5, r0
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68d8      	ldr	r0, [r3, #12]
 8005842:	b14c      	cbz	r4, 8005858 <__assert_func+0x24>
 8005844:	4b07      	ldr	r3, [pc, #28]	@ (8005864 <__assert_func+0x30>)
 8005846:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800584a:	9100      	str	r1, [sp, #0]
 800584c:	462b      	mov	r3, r5
 800584e:	4906      	ldr	r1, [pc, #24]	@ (8005868 <__assert_func+0x34>)
 8005850:	f000 fc9c 	bl	800618c <fiprintf>
 8005854:	f000 fcf2 	bl	800623c <abort>
 8005858:	4b04      	ldr	r3, [pc, #16]	@ (800586c <__assert_func+0x38>)
 800585a:	461c      	mov	r4, r3
 800585c:	e7f3      	b.n	8005846 <__assert_func+0x12>
 800585e:	bf00      	nop
 8005860:	20000138 	.word	0x20000138
 8005864:	08006d90 	.word	0x08006d90
 8005868:	08006d9d 	.word	0x08006d9d
 800586c:	08006dcb 	.word	0x08006dcb

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d040      	beq.n	80058fa <_free_r+0x8a>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 f8e6 	bl	8005a54 <__malloc_lock>
 8005888:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <_free_r+0x8c>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x2c>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005898:	f000 b8e2 	b.w	8005a60 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x42>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1809      	addeq	r1, r1, r0
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x1e>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x4c>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x42>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1850      	adds	r0, r2, r1
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x6c>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	4283      	cmp	r3, r0
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x22>
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4408      	add	r0, r1
 80058d6:	6010      	str	r0, [r2, #0]
 80058d8:	6053      	str	r3, [r2, #4]
 80058da:	e7da      	b.n	8005892 <_free_r+0x22>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x74>
 80058de:	230c      	movs	r3, #12
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x22>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	6054      	str	r4, [r2, #4]
 80058f8:	e7cb      	b.n	8005892 <_free_r+0x22>
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200005a8 	.word	0x200005a8

08005900 <malloc>:
 8005900:	4b02      	ldr	r3, [pc, #8]	@ (800590c <malloc+0xc>)
 8005902:	4601      	mov	r1, r0
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f000 b825 	b.w	8005954 <_malloc_r>
 800590a:	bf00      	nop
 800590c:	20000138 	.word	0x20000138

08005910 <sbrk_aligned>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4e0f      	ldr	r6, [pc, #60]	@ (8005950 <sbrk_aligned+0x40>)
 8005914:	460c      	mov	r4, r1
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	4605      	mov	r5, r0
 800591a:	b911      	cbnz	r1, 8005922 <sbrk_aligned+0x12>
 800591c:	f000 fc62 	bl	80061e4 <_sbrk_r>
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f000 fc5d 	bl	80061e4 <_sbrk_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d103      	bne.n	8005936 <sbrk_aligned+0x26>
 800592e:	f04f 34ff 	mov.w	r4, #4294967295
 8005932:	4620      	mov	r0, r4
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	1cc4      	adds	r4, r0, #3
 8005938:	f024 0403 	bic.w	r4, r4, #3
 800593c:	42a0      	cmp	r0, r4
 800593e:	d0f8      	beq.n	8005932 <sbrk_aligned+0x22>
 8005940:	1a21      	subs	r1, r4, r0
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fc4e 	bl	80061e4 <_sbrk_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d1f2      	bne.n	8005932 <sbrk_aligned+0x22>
 800594c:	e7ef      	b.n	800592e <sbrk_aligned+0x1e>
 800594e:	bf00      	nop
 8005950:	200005a4 	.word	0x200005a4

08005954 <_malloc_r>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	2d00      	cmp	r5, #0
 8005968:	4606      	mov	r6, r0
 800596a:	db01      	blt.n	8005970 <_malloc_r+0x1c>
 800596c:	42a9      	cmp	r1, r5
 800596e:	d904      	bls.n	800597a <_malloc_r+0x26>
 8005970:	230c      	movs	r3, #12
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	2000      	movs	r0, #0
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a50 <_malloc_r+0xfc>
 800597e:	f000 f869 	bl	8005a54 <__malloc_lock>
 8005982:	f8d8 3000 	ldr.w	r3, [r8]
 8005986:	461c      	mov	r4, r3
 8005988:	bb44      	cbnz	r4, 80059dc <_malloc_r+0x88>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbf 	bl	8005910 <sbrk_aligned>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	4604      	mov	r4, r0
 8005996:	d158      	bne.n	8005a4a <_malloc_r+0xf6>
 8005998:	f8d8 4000 	ldr.w	r4, [r8]
 800599c:	4627      	mov	r7, r4
 800599e:	2f00      	cmp	r7, #0
 80059a0:	d143      	bne.n	8005a2a <_malloc_r+0xd6>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d04b      	beq.n	8005a3e <_malloc_r+0xea>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4639      	mov	r1, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	eb04 0903 	add.w	r9, r4, r3
 80059b0:	f000 fc18 	bl	80061e4 <_sbrk_r>
 80059b4:	4581      	cmp	r9, r0
 80059b6:	d142      	bne.n	8005a3e <_malloc_r+0xea>
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	1a6d      	subs	r5, r5, r1
 80059be:	4629      	mov	r1, r5
 80059c0:	f7ff ffa6 	bl	8005910 <sbrk_aligned>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d03a      	beq.n	8005a3e <_malloc_r+0xea>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	442b      	add	r3, r5
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	f8d8 3000 	ldr.w	r3, [r8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	bb62      	cbnz	r2, 8005a30 <_malloc_r+0xdc>
 80059d6:	f8c8 7000 	str.w	r7, [r8]
 80059da:	e00f      	b.n	80059fc <_malloc_r+0xa8>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	1b52      	subs	r2, r2, r5
 80059e0:	d420      	bmi.n	8005a24 <_malloc_r+0xd0>
 80059e2:	2a0b      	cmp	r2, #11
 80059e4:	d917      	bls.n	8005a16 <_malloc_r+0xc2>
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	6025      	str	r5, [r4, #0]
 80059ec:	bf18      	it	ne
 80059ee:	6059      	strne	r1, [r3, #4]
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	bf08      	it	eq
 80059f4:	f8c8 1000 	streq.w	r1, [r8]
 80059f8:	5162      	str	r2, [r4, r5]
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f82f 	bl	8005a60 <__malloc_unlock>
 8005a02:	f104 000b 	add.w	r0, r4, #11
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	f020 0007 	bic.w	r0, r0, #7
 8005a0c:	1ac2      	subs	r2, r0, r3
 8005a0e:	bf1c      	itt	ne
 8005a10:	1a1b      	subne	r3, r3, r0
 8005a12:	50a3      	strne	r3, [r4, r2]
 8005a14:	e7af      	b.n	8005976 <_malloc_r+0x22>
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	bf0c      	ite	eq
 8005a1c:	f8c8 2000 	streq.w	r2, [r8]
 8005a20:	605a      	strne	r2, [r3, #4]
 8005a22:	e7eb      	b.n	80059fc <_malloc_r+0xa8>
 8005a24:	4623      	mov	r3, r4
 8005a26:	6864      	ldr	r4, [r4, #4]
 8005a28:	e7ae      	b.n	8005988 <_malloc_r+0x34>
 8005a2a:	463c      	mov	r4, r7
 8005a2c:	687f      	ldr	r7, [r7, #4]
 8005a2e:	e7b6      	b.n	800599e <_malloc_r+0x4a>
 8005a30:	461a      	mov	r2, r3
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	d1fb      	bne.n	8005a30 <_malloc_r+0xdc>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e7de      	b.n	80059fc <_malloc_r+0xa8>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	4630      	mov	r0, r6
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f000 f80c 	bl	8005a60 <__malloc_unlock>
 8005a48:	e794      	b.n	8005974 <_malloc_r+0x20>
 8005a4a:	6005      	str	r5, [r0, #0]
 8005a4c:	e7d6      	b.n	80059fc <_malloc_r+0xa8>
 8005a4e:	bf00      	nop
 8005a50:	200005a8 	.word	0x200005a8

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff bee2 	b.w	800581e <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	200005a0 	.word	0x200005a0

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff bedd 	b.w	8005820 <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	200005a0 	.word	0x200005a0

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	461f      	mov	r7, r3
 8005a72:	688e      	ldr	r6, [r1, #8]
 8005a74:	4682      	mov	sl, r0
 8005a76:	42be      	cmp	r6, r7
 8005a78:	460c      	mov	r4, r1
 8005a7a:	4690      	mov	r8, r2
 8005a7c:	680b      	ldr	r3, [r1, #0]
 8005a7e:	d82d      	bhi.n	8005adc <__ssputs_r+0x70>
 8005a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a88:	d026      	beq.n	8005ad8 <__ssputs_r+0x6c>
 8005a8a:	6965      	ldr	r5, [r4, #20]
 8005a8c:	6909      	ldr	r1, [r1, #16]
 8005a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a92:	eba3 0901 	sub.w	r9, r3, r1
 8005a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a9a:	1c7b      	adds	r3, r7, #1
 8005a9c:	444b      	add	r3, r9
 8005a9e:	106d      	asrs	r5, r5, #1
 8005aa0:	429d      	cmp	r5, r3
 8005aa2:	bf38      	it	cc
 8005aa4:	461d      	movcc	r5, r3
 8005aa6:	0553      	lsls	r3, r2, #21
 8005aa8:	d527      	bpl.n	8005afa <__ssputs_r+0x8e>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f7ff ff52 	bl	8005954 <_malloc_r>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b360      	cbz	r0, 8005b0e <__ssputs_r+0xa2>
 8005ab4:	464a      	mov	r2, r9
 8005ab6:	6921      	ldr	r1, [r4, #16]
 8005ab8:	f000 fbb2 	bl	8006220 <memcpy>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	6126      	str	r6, [r4, #16]
 8005aca:	444e      	add	r6, r9
 8005acc:	6026      	str	r6, [r4, #0]
 8005ace:	463e      	mov	r6, r7
 8005ad0:	6165      	str	r5, [r4, #20]
 8005ad2:	eba5 0509 	sub.w	r5, r5, r9
 8005ad6:	60a5      	str	r5, [r4, #8]
 8005ad8:	42be      	cmp	r6, r7
 8005ada:	d900      	bls.n	8005ade <__ssputs_r+0x72>
 8005adc:	463e      	mov	r6, r7
 8005ade:	4632      	mov	r2, r6
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	f000 fb64 	bl	80061b0 <memmove>
 8005ae8:	2000      	movs	r0, #0
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	1b9b      	subs	r3, r3, r6
 8005aee:	60a3      	str	r3, [r4, #8]
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	4433      	add	r3, r6
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	462a      	mov	r2, r5
 8005afc:	f000 fba5 	bl	800624a <_realloc_r>
 8005b00:	4606      	mov	r6, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d1e0      	bne.n	8005ac8 <__ssputs_r+0x5c>
 8005b06:	4650      	mov	r0, sl
 8005b08:	6921      	ldr	r1, [r4, #16]
 8005b0a:	f7ff feb1 	bl	8005870 <_free_r>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	e7e9      	b.n	8005af6 <__ssputs_r+0x8a>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	460d      	mov	r5, r1
 8005b32:	4614      	mov	r4, r2
 8005b34:	b09d      	sub	sp, #116	@ 0x74
 8005b36:	d510      	bpl.n	8005b5a <_svfiprintf_r+0x36>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b973      	cbnz	r3, 8005b5a <_svfiprintf_r+0x36>
 8005b3c:	2140      	movs	r1, #64	@ 0x40
 8005b3e:	f7ff ff09 	bl	8005954 <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b930      	cbnz	r0, 8005b56 <_svfiprintf_r+0x32>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b01d      	add	sp, #116	@ 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2340      	movs	r3, #64	@ 0x40
 8005b58:	616b      	str	r3, [r5, #20]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b64:	2330      	movs	r3, #48	@ 0x30
 8005b66:	f04f 0901 	mov.w	r9, #1
 8005b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b6e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005d08 <_svfiprintf_r+0x1e4>
 8005b72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b76:	4623      	mov	r3, r4
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7e:	b10a      	cbz	r2, 8005b84 <_svfiprintf_r+0x60>
 8005b80:	2a25      	cmp	r2, #37	@ 0x25
 8005b82:	d1f9      	bne.n	8005b78 <_svfiprintf_r+0x54>
 8005b84:	ebba 0b04 	subs.w	fp, sl, r4
 8005b88:	d00b      	beq.n	8005ba2 <_svfiprintf_r+0x7e>
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ff6b 	bl	8005a6c <__ssputs_r>
 8005b96:	3001      	adds	r0, #1
 8005b98:	f000 80a7 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9e:	445a      	add	r2, fp
 8005ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 809f 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb6:	f10a 0a01 	add.w	sl, sl, #1
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc4:	4654      	mov	r4, sl
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bcc:	484e      	ldr	r0, [pc, #312]	@ (8005d08 <_svfiprintf_r+0x1e4>)
 8005bce:	f000 fb19 	bl	8006204 <memchr>
 8005bd2:	9a04      	ldr	r2, [sp, #16]
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_svfiprintf_r+0xea>
 8005bd6:	06d0      	lsls	r0, r2, #27
 8005bd8:	bf44      	itt	mi
 8005bda:	2320      	movmi	r3, #32
 8005bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be0:	0711      	lsls	r1, r2, #28
 8005be2:	bf44      	itt	mi
 8005be4:	232b      	movmi	r3, #43	@ 0x2b
 8005be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf0:	d015      	beq.n	8005c1e <_svfiprintf_r+0xfa>
 8005bf2:	4654      	mov	r4, sl
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	9a07      	ldr	r2, [sp, #28]
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c02:	3b30      	subs	r3, #48	@ 0x30
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d94b      	bls.n	8005ca0 <_svfiprintf_r+0x17c>
 8005c08:	b1b0      	cbz	r0, 8005c38 <_svfiprintf_r+0x114>
 8005c0a:	9207      	str	r2, [sp, #28]
 8005c0c:	e014      	b.n	8005c38 <_svfiprintf_r+0x114>
 8005c0e:	eba0 0308 	sub.w	r3, r0, r8
 8005c12:	fa09 f303 	lsl.w	r3, r9, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	46a2      	mov	sl, r4
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	e7d2      	b.n	8005bc4 <_svfiprintf_r+0xa0>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9103      	str	r1, [sp, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfbb      	ittet	lt
 8005c2a:	425b      	neglt	r3, r3
 8005c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c30:	9307      	strge	r3, [sp, #28]
 8005c32:	9307      	strlt	r3, [sp, #28]
 8005c34:	bfb8      	it	lt
 8005c36:	9204      	strlt	r2, [sp, #16]
 8005c38:	7823      	ldrb	r3, [r4, #0]
 8005c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3c:	d10a      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3e:	7863      	ldrb	r3, [r4, #1]
 8005c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c42:	d132      	bne.n	8005caa <_svfiprintf_r+0x186>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	3402      	adds	r4, #2
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	9203      	str	r2, [sp, #12]
 8005c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005d0c <_svfiprintf_r+0x1e8>
 8005c58:	2203      	movs	r2, #3
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	7821      	ldrb	r1, [r4, #0]
 8005c5e:	f000 fad1 	bl	8006204 <memchr>
 8005c62:	b138      	cbz	r0, 8005c74 <_svfiprintf_r+0x150>
 8005c64:	2240      	movs	r2, #64	@ 0x40
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	eba0 000a 	sub.w	r0, r0, sl
 8005c6c:	4082      	lsls	r2, r0
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	3401      	adds	r4, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	2206      	movs	r2, #6
 8005c7a:	4825      	ldr	r0, [pc, #148]	@ (8005d10 <_svfiprintf_r+0x1ec>)
 8005c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c80:	f000 fac0 	bl	8006204 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d036      	beq.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005c88:	4b22      	ldr	r3, [pc, #136]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005c8a:	bb1b      	cbnz	r3, 8005cd4 <_svfiprintf_r+0x1b0>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	4433      	add	r3, r6
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	e76a      	b.n	8005b76 <_svfiprintf_r+0x52>
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca8:	e7a8      	b.n	8005bfc <_svfiprintf_r+0xd8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f04f 0c0a 	mov.w	ip, #10
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbc:	3a30      	subs	r2, #48	@ 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d903      	bls.n	8005cca <_svfiprintf_r+0x1a6>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c6      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc6:	9105      	str	r1, [sp, #20]
 8005cc8:	e7c4      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	2301      	movs	r3, #1
 8005cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd2:	e7f0      	b.n	8005cb6 <_svfiprintf_r+0x192>
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4638      	mov	r0, r7
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <_svfiprintf_r+0x1f4>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	1c42      	adds	r2, r0, #1
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d1d6      	bne.n	8005c98 <_svfiprintf_r+0x174>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	065b      	lsls	r3, r3, #25
 8005cee:	f53f af2d 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf4:	e72c      	b.n	8005b50 <_svfiprintf_r+0x2c>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	4b06      	ldr	r3, [pc, #24]	@ (8005d18 <_svfiprintf_r+0x1f4>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	f000 f87d 	bl	8005e00 <_printf_i>
 8005d06:	e7ed      	b.n	8005ce4 <_svfiprintf_r+0x1c0>
 8005d08:	08006dcc 	.word	0x08006dcc
 8005d0c:	08006dd2 	.word	0x08006dd2
 8005d10:	08006dd6 	.word	0x08006dd6
 8005d14:	00000000 	.word	0x00000000
 8005d18:	08005a6d 	.word	0x08005a6d

08005d1c <_printf_common>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	4616      	mov	r6, r2
 8005d22:	4698      	mov	r8, r3
 8005d24:	688a      	ldr	r2, [r1, #8]
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	4607      	mov	r7, r0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	bfb8      	it	lt
 8005d2e:	4613      	movlt	r3, r2
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d36:	460c      	mov	r4, r1
 8005d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d3c:	b10a      	cbz	r2, 8005d42 <_printf_common+0x26>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	6833      	ldrmi	r3, [r6, #0]
 8005d4a:	3302      	addmi	r3, #2
 8005d4c:	6033      	strmi	r3, [r6, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	f015 0506 	ands.w	r5, r5, #6
 8005d54:	d106      	bne.n	8005d64 <_printf_common+0x48>
 8005d56:	f104 0a19 	add.w	sl, r4, #25
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc2b      	bgt.n	8005dbc <_printf_common+0xa0>
 8005d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	3b00      	subs	r3, #0
 8005d6c:	bf18      	it	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	0692      	lsls	r2, r2, #26
 8005d72:	d430      	bmi.n	8005dd6 <_printf_common+0xba>
 8005d74:	4641      	mov	r1, r8
 8005d76:	4638      	mov	r0, r7
 8005d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d7c:	47c8      	blx	r9
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d023      	beq.n	8005dca <_printf_common+0xae>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	6922      	ldr	r2, [r4, #16]
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	bf14      	ite	ne
 8005d8e:	2500      	movne	r5, #0
 8005d90:	6833      	ldreq	r3, [r6, #0]
 8005d92:	f04f 0600 	mov.w	r6, #0
 8005d96:	bf08      	it	eq
 8005d98:	68e5      	ldreq	r5, [r4, #12]
 8005d9a:	f104 041a 	add.w	r4, r4, #26
 8005d9e:	bf08      	it	eq
 8005da0:	1aed      	subeq	r5, r5, r3
 8005da2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005da6:	bf08      	it	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bfc4      	itt	gt
 8005db0:	1a9b      	subgt	r3, r3, r2
 8005db2:	18ed      	addgt	r5, r5, r3
 8005db4:	42b5      	cmp	r5, r6
 8005db6:	d11a      	bne.n	8005dee <_printf_common+0xd2>
 8005db8:	2000      	movs	r0, #0
 8005dba:	e008      	b.n	8005dce <_printf_common+0xb2>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4652      	mov	r2, sl
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	47c8      	blx	r9
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d103      	bne.n	8005dd2 <_printf_common+0xb6>
 8005dca:	f04f 30ff 	mov.w	r0, #4294967295
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	e7c1      	b.n	8005d5a <_printf_common+0x3e>
 8005dd6:	2030      	movs	r0, #48	@ 0x30
 8005dd8:	18e1      	adds	r1, r4, r3
 8005dda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005de4:	4422      	add	r2, r4
 8005de6:	3302      	adds	r3, #2
 8005de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dec:	e7c2      	b.n	8005d74 <_printf_common+0x58>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4622      	mov	r2, r4
 8005df2:	4641      	mov	r1, r8
 8005df4:	4638      	mov	r0, r7
 8005df6:	47c8      	blx	r9
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d0e6      	beq.n	8005dca <_printf_common+0xae>
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7d9      	b.n	8005db4 <_printf_common+0x98>

08005e00 <_printf_i>:
 8005e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	7e0f      	ldrb	r7, [r1, #24]
 8005e06:	4691      	mov	r9, r2
 8005e08:	2f78      	cmp	r7, #120	@ 0x78
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	469a      	mov	sl, r3
 8005e10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e16:	d807      	bhi.n	8005e28 <_printf_i+0x28>
 8005e18:	2f62      	cmp	r7, #98	@ 0x62
 8005e1a:	d80a      	bhi.n	8005e32 <_printf_i+0x32>
 8005e1c:	2f00      	cmp	r7, #0
 8005e1e:	f000 80d1 	beq.w	8005fc4 <_printf_i+0x1c4>
 8005e22:	2f58      	cmp	r7, #88	@ 0x58
 8005e24:	f000 80b8 	beq.w	8005f98 <_printf_i+0x198>
 8005e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e30:	e03a      	b.n	8005ea8 <_printf_i+0xa8>
 8005e32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e36:	2b15      	cmp	r3, #21
 8005e38:	d8f6      	bhi.n	8005e28 <_printf_i+0x28>
 8005e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e40 <_printf_i+0x40>)
 8005e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005ead 	.word	0x08005ead
 8005e48:	08005e29 	.word	0x08005e29
 8005e4c:	08005e29 	.word	0x08005e29
 8005e50:	08005e29 	.word	0x08005e29
 8005e54:	08005e29 	.word	0x08005e29
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005e29 	.word	0x08005e29
 8005e60:	08005e29 	.word	0x08005e29
 8005e64:	08005e29 	.word	0x08005e29
 8005e68:	08005e29 	.word	0x08005e29
 8005e6c:	08005fab 	.word	0x08005fab
 8005e70:	08005ed7 	.word	0x08005ed7
 8005e74:	08005f65 	.word	0x08005f65
 8005e78:	08005e29 	.word	0x08005e29
 8005e7c:	08005e29 	.word	0x08005e29
 8005e80:	08005fcd 	.word	0x08005fcd
 8005e84:	08005e29 	.word	0x08005e29
 8005e88:	08005ed7 	.word	0x08005ed7
 8005e8c:	08005e29 	.word	0x08005e29
 8005e90:	08005e29 	.word	0x08005e29
 8005e94:	08005f6d 	.word	0x08005f6d
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6032      	str	r2, [r6, #0]
 8005ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e09c      	b.n	8005fe6 <_printf_i+0x1e6>
 8005eac:	6833      	ldr	r3, [r6, #0]
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	1d19      	adds	r1, r3, #4
 8005eb2:	6031      	str	r1, [r6, #0]
 8005eb4:	0606      	lsls	r6, r0, #24
 8005eb6:	d501      	bpl.n	8005ebc <_printf_i+0xbc>
 8005eb8:	681d      	ldr	r5, [r3, #0]
 8005eba:	e003      	b.n	8005ec4 <_printf_i+0xc4>
 8005ebc:	0645      	lsls	r5, r0, #25
 8005ebe:	d5fb      	bpl.n	8005eb8 <_printf_i+0xb8>
 8005ec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	da03      	bge.n	8005ed0 <_printf_i+0xd0>
 8005ec8:	232d      	movs	r3, #45	@ 0x2d
 8005eca:	426d      	negs	r5, r5
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ed0:	230a      	movs	r3, #10
 8005ed2:	4858      	ldr	r0, [pc, #352]	@ (8006034 <_printf_i+0x234>)
 8005ed4:	e011      	b.n	8005efa <_printf_i+0xfa>
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	6833      	ldr	r3, [r6, #0]
 8005eda:	0608      	lsls	r0, r1, #24
 8005edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ee0:	d402      	bmi.n	8005ee8 <_printf_i+0xe8>
 8005ee2:	0649      	lsls	r1, r1, #25
 8005ee4:	bf48      	it	mi
 8005ee6:	b2ad      	uxthmi	r5, r5
 8005ee8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	bf14      	ite	ne
 8005eee:	230a      	movne	r3, #10
 8005ef0:	2308      	moveq	r3, #8
 8005ef2:	4850      	ldr	r0, [pc, #320]	@ (8006034 <_printf_i+0x234>)
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005efa:	6866      	ldr	r6, [r4, #4]
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	60a6      	str	r6, [r4, #8]
 8005f00:	db05      	blt.n	8005f0e <_printf_i+0x10e>
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	432e      	orrs	r6, r5
 8005f06:	f021 0104 	bic.w	r1, r1, #4
 8005f0a:	6021      	str	r1, [r4, #0]
 8005f0c:	d04b      	beq.n	8005fa6 <_printf_i+0x1a6>
 8005f0e:	4616      	mov	r6, r2
 8005f10:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f14:	fb03 5711 	mls	r7, r3, r1, r5
 8005f18:	5dc7      	ldrb	r7, [r0, r7]
 8005f1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f1e:	462f      	mov	r7, r5
 8005f20:	42bb      	cmp	r3, r7
 8005f22:	460d      	mov	r5, r1
 8005f24:	d9f4      	bls.n	8005f10 <_printf_i+0x110>
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d10b      	bne.n	8005f42 <_printf_i+0x142>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	07df      	lsls	r7, r3, #31
 8005f2e:	d508      	bpl.n	8005f42 <_printf_i+0x142>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	6861      	ldr	r1, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	bfde      	ittt	le
 8005f38:	2330      	movle	r3, #48	@ 0x30
 8005f3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f42:	1b92      	subs	r2, r2, r6
 8005f44:	6122      	str	r2, [r4, #16]
 8005f46:	464b      	mov	r3, r9
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f8cd a000 	str.w	sl, [sp]
 8005f50:	aa03      	add	r2, sp, #12
 8005f52:	f7ff fee3 	bl	8005d1c <_printf_common>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d14a      	bne.n	8005ff0 <_printf_i+0x1f0>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	b004      	add	sp, #16
 8005f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f043 0320 	orr.w	r3, r3, #32
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	2778      	movs	r7, #120	@ 0x78
 8005f6e:	4832      	ldr	r0, [pc, #200]	@ (8006038 <_printf_i+0x238>)
 8005f70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	6831      	ldr	r1, [r6, #0]
 8005f78:	061f      	lsls	r7, r3, #24
 8005f7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f7e:	d402      	bmi.n	8005f86 <_printf_i+0x186>
 8005f80:	065f      	lsls	r7, r3, #25
 8005f82:	bf48      	it	mi
 8005f84:	b2ad      	uxthmi	r5, r5
 8005f86:	6031      	str	r1, [r6, #0]
 8005f88:	07d9      	lsls	r1, r3, #31
 8005f8a:	bf44      	itt	mi
 8005f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f90:	6023      	strmi	r3, [r4, #0]
 8005f92:	b11d      	cbz	r5, 8005f9c <_printf_i+0x19c>
 8005f94:	2310      	movs	r3, #16
 8005f96:	e7ad      	b.n	8005ef4 <_printf_i+0xf4>
 8005f98:	4826      	ldr	r0, [pc, #152]	@ (8006034 <_printf_i+0x234>)
 8005f9a:	e7e9      	b.n	8005f70 <_printf_i+0x170>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f023 0320 	bic.w	r3, r3, #32
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	e7f6      	b.n	8005f94 <_printf_i+0x194>
 8005fa6:	4616      	mov	r6, r2
 8005fa8:	e7bd      	b.n	8005f26 <_printf_i+0x126>
 8005faa:	6833      	ldr	r3, [r6, #0]
 8005fac:	6825      	ldr	r5, [r4, #0]
 8005fae:	1d18      	adds	r0, r3, #4
 8005fb0:	6961      	ldr	r1, [r4, #20]
 8005fb2:	6030      	str	r0, [r6, #0]
 8005fb4:	062e      	lsls	r6, r5, #24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	d501      	bpl.n	8005fbe <_printf_i+0x1be>
 8005fba:	6019      	str	r1, [r3, #0]
 8005fbc:	e002      	b.n	8005fc4 <_printf_i+0x1c4>
 8005fbe:	0668      	lsls	r0, r5, #25
 8005fc0:	d5fb      	bpl.n	8005fba <_printf_i+0x1ba>
 8005fc2:	8019      	strh	r1, [r3, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4616      	mov	r6, r2
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	e7bc      	b.n	8005f46 <_printf_i+0x146>
 8005fcc:	6833      	ldr	r3, [r6, #0]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	1d1a      	adds	r2, r3, #4
 8005fd2:	6032      	str	r2, [r6, #0]
 8005fd4:	681e      	ldr	r6, [r3, #0]
 8005fd6:	6862      	ldr	r2, [r4, #4]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f913 	bl	8006204 <memchr>
 8005fde:	b108      	cbz	r0, 8005fe4 <_printf_i+0x1e4>
 8005fe0:	1b80      	subs	r0, r0, r6
 8005fe2:	6060      	str	r0, [r4, #4]
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fee:	e7aa      	b.n	8005f46 <_printf_i+0x146>
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	47d0      	blx	sl
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d0ad      	beq.n	8005f5a <_printf_i+0x15a>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	079b      	lsls	r3, r3, #30
 8006002:	d413      	bmi.n	800602c <_printf_i+0x22c>
 8006004:	68e0      	ldr	r0, [r4, #12]
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	4298      	cmp	r0, r3
 800600a:	bfb8      	it	lt
 800600c:	4618      	movlt	r0, r3
 800600e:	e7a6      	b.n	8005f5e <_printf_i+0x15e>
 8006010:	2301      	movs	r3, #1
 8006012:	4632      	mov	r2, r6
 8006014:	4649      	mov	r1, r9
 8006016:	4640      	mov	r0, r8
 8006018:	47d0      	blx	sl
 800601a:	3001      	adds	r0, #1
 800601c:	d09d      	beq.n	8005f5a <_printf_i+0x15a>
 800601e:	3501      	adds	r5, #1
 8006020:	68e3      	ldr	r3, [r4, #12]
 8006022:	9903      	ldr	r1, [sp, #12]
 8006024:	1a5b      	subs	r3, r3, r1
 8006026:	42ab      	cmp	r3, r5
 8006028:	dcf2      	bgt.n	8006010 <_printf_i+0x210>
 800602a:	e7eb      	b.n	8006004 <_printf_i+0x204>
 800602c:	2500      	movs	r5, #0
 800602e:	f104 0619 	add.w	r6, r4, #25
 8006032:	e7f5      	b.n	8006020 <_printf_i+0x220>
 8006034:	08006ddd 	.word	0x08006ddd
 8006038:	08006dee 	.word	0x08006dee

0800603c <__sflush_r>:
 800603c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	0716      	lsls	r6, r2, #28
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	d454      	bmi.n	80060f4 <__sflush_r+0xb8>
 800604a:	684b      	ldr	r3, [r1, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	dc02      	bgt.n	8006056 <__sflush_r+0x1a>
 8006050:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	dd48      	ble.n	80060e8 <__sflush_r+0xac>
 8006056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006058:	2e00      	cmp	r6, #0
 800605a:	d045      	beq.n	80060e8 <__sflush_r+0xac>
 800605c:	2300      	movs	r3, #0
 800605e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006062:	682f      	ldr	r7, [r5, #0]
 8006064:	6a21      	ldr	r1, [r4, #32]
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	d030      	beq.n	80060cc <__sflush_r+0x90>
 800606a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	0759      	lsls	r1, r3, #29
 8006070:	d505      	bpl.n	800607e <__sflush_r+0x42>
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006078:	b10b      	cbz	r3, 800607e <__sflush_r+0x42>
 800607a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800607c:	1ad2      	subs	r2, r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	4628      	mov	r0, r5
 8006082:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	47b0      	blx	r6
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	d106      	bne.n	800609c <__sflush_r+0x60>
 800608e:	6829      	ldr	r1, [r5, #0]
 8006090:	291d      	cmp	r1, #29
 8006092:	d82b      	bhi.n	80060ec <__sflush_r+0xb0>
 8006094:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <__sflush_r+0xfc>)
 8006096:	40ca      	lsrs	r2, r1
 8006098:	07d6      	lsls	r6, r2, #31
 800609a:	d527      	bpl.n	80060ec <__sflush_r+0xb0>
 800609c:	2200      	movs	r2, #0
 800609e:	6062      	str	r2, [r4, #4]
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	04d9      	lsls	r1, r3, #19
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	d504      	bpl.n	80060b2 <__sflush_r+0x76>
 80060a8:	1c42      	adds	r2, r0, #1
 80060aa:	d101      	bne.n	80060b0 <__sflush_r+0x74>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b903      	cbnz	r3, 80060b2 <__sflush_r+0x76>
 80060b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80060b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060b4:	602f      	str	r7, [r5, #0]
 80060b6:	b1b9      	cbz	r1, 80060e8 <__sflush_r+0xac>
 80060b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060bc:	4299      	cmp	r1, r3
 80060be:	d002      	beq.n	80060c6 <__sflush_r+0x8a>
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7ff fbd5 	bl	8005870 <_free_r>
 80060c6:	2300      	movs	r3, #0
 80060c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80060ca:	e00d      	b.n	80060e8 <__sflush_r+0xac>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b0      	blx	r6
 80060d2:	4602      	mov	r2, r0
 80060d4:	1c50      	adds	r0, r2, #1
 80060d6:	d1c9      	bne.n	800606c <__sflush_r+0x30>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0c6      	beq.n	800606c <__sflush_r+0x30>
 80060de:	2b1d      	cmp	r3, #29
 80060e0:	d001      	beq.n	80060e6 <__sflush_r+0xaa>
 80060e2:	2b16      	cmp	r3, #22
 80060e4:	d11d      	bne.n	8006122 <__sflush_r+0xe6>
 80060e6:	602f      	str	r7, [r5, #0]
 80060e8:	2000      	movs	r0, #0
 80060ea:	e021      	b.n	8006130 <__sflush_r+0xf4>
 80060ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	e01a      	b.n	800612a <__sflush_r+0xee>
 80060f4:	690f      	ldr	r7, [r1, #16]
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	d0f6      	beq.n	80060e8 <__sflush_r+0xac>
 80060fa:	0793      	lsls	r3, r2, #30
 80060fc:	bf18      	it	ne
 80060fe:	2300      	movne	r3, #0
 8006100:	680e      	ldr	r6, [r1, #0]
 8006102:	bf08      	it	eq
 8006104:	694b      	ldreq	r3, [r1, #20]
 8006106:	1bf6      	subs	r6, r6, r7
 8006108:	600f      	str	r7, [r1, #0]
 800610a:	608b      	str	r3, [r1, #8]
 800610c:	2e00      	cmp	r6, #0
 800610e:	ddeb      	ble.n	80060e8 <__sflush_r+0xac>
 8006110:	4633      	mov	r3, r6
 8006112:	463a      	mov	r2, r7
 8006114:	4628      	mov	r0, r5
 8006116:	6a21      	ldr	r1, [r4, #32]
 8006118:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800611c:	47e0      	blx	ip
 800611e:	2800      	cmp	r0, #0
 8006120:	dc07      	bgt.n	8006132 <__sflush_r+0xf6>
 8006122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612a:	f04f 30ff 	mov.w	r0, #4294967295
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006132:	4407      	add	r7, r0
 8006134:	1a36      	subs	r6, r6, r0
 8006136:	e7e9      	b.n	800610c <__sflush_r+0xd0>
 8006138:	20400001 	.word	0x20400001

0800613c <_fflush_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b913      	cbnz	r3, 800614c <_fflush_r+0x10>
 8006146:	2500      	movs	r5, #0
 8006148:	4628      	mov	r0, r5
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	b118      	cbz	r0, 8006156 <_fflush_r+0x1a>
 800614e:	6a03      	ldr	r3, [r0, #32]
 8006150:	b90b      	cbnz	r3, 8006156 <_fflush_r+0x1a>
 8006152:	f7ff f9d3 	bl	80054fc <__sinit>
 8006156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f3      	beq.n	8006146 <_fflush_r+0xa>
 800615e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006160:	07d0      	lsls	r0, r2, #31
 8006162:	d404      	bmi.n	800616e <_fflush_r+0x32>
 8006164:	0599      	lsls	r1, r3, #22
 8006166:	d402      	bmi.n	800616e <_fflush_r+0x32>
 8006168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800616a:	f7ff fb58 	bl	800581e <__retarget_lock_acquire_recursive>
 800616e:	4628      	mov	r0, r5
 8006170:	4621      	mov	r1, r4
 8006172:	f7ff ff63 	bl	800603c <__sflush_r>
 8006176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006178:	4605      	mov	r5, r0
 800617a:	07da      	lsls	r2, r3, #31
 800617c:	d4e4      	bmi.n	8006148 <_fflush_r+0xc>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	059b      	lsls	r3, r3, #22
 8006182:	d4e1      	bmi.n	8006148 <_fflush_r+0xc>
 8006184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006186:	f7ff fb4b 	bl	8005820 <__retarget_lock_release_recursive>
 800618a:	e7dd      	b.n	8006148 <_fflush_r+0xc>

0800618c <fiprintf>:
 800618c:	b40e      	push	{r1, r2, r3}
 800618e:	b503      	push	{r0, r1, lr}
 8006190:	4601      	mov	r1, r0
 8006192:	ab03      	add	r3, sp, #12
 8006194:	4805      	ldr	r0, [pc, #20]	@ (80061ac <fiprintf+0x20>)
 8006196:	f853 2b04 	ldr.w	r2, [r3], #4
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	f000 f8a9 	bl	80062f4 <_vfiprintf_r>
 80061a2:	b002      	add	sp, #8
 80061a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a8:	b003      	add	sp, #12
 80061aa:	4770      	bx	lr
 80061ac:	20000138 	.word	0x20000138

080061b0 <memmove>:
 80061b0:	4288      	cmp	r0, r1
 80061b2:	b510      	push	{r4, lr}
 80061b4:	eb01 0402 	add.w	r4, r1, r2
 80061b8:	d902      	bls.n	80061c0 <memmove+0x10>
 80061ba:	4284      	cmp	r4, r0
 80061bc:	4623      	mov	r3, r4
 80061be:	d807      	bhi.n	80061d0 <memmove+0x20>
 80061c0:	1e43      	subs	r3, r0, #1
 80061c2:	42a1      	cmp	r1, r4
 80061c4:	d008      	beq.n	80061d8 <memmove+0x28>
 80061c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ce:	e7f8      	b.n	80061c2 <memmove+0x12>
 80061d0:	4601      	mov	r1, r0
 80061d2:	4402      	add	r2, r0
 80061d4:	428a      	cmp	r2, r1
 80061d6:	d100      	bne.n	80061da <memmove+0x2a>
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061e2:	e7f7      	b.n	80061d4 <memmove+0x24>

080061e4 <_sbrk_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	2300      	movs	r3, #0
 80061e8:	4d05      	ldr	r5, [pc, #20]	@ (8006200 <_sbrk_r+0x1c>)
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f7fc fa82 	bl	80026f8 <_sbrk>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_sbrk_r+0x1a>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_sbrk_r+0x1a>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	2000059c 	.word	0x2000059c

08006204 <memchr>:
 8006204:	4603      	mov	r3, r0
 8006206:	b510      	push	{r4, lr}
 8006208:	b2c9      	uxtb	r1, r1
 800620a:	4402      	add	r2, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	4618      	mov	r0, r3
 8006210:	d101      	bne.n	8006216 <memchr+0x12>
 8006212:	2000      	movs	r0, #0
 8006214:	e003      	b.n	800621e <memchr+0x1a>
 8006216:	7804      	ldrb	r4, [r0, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	428c      	cmp	r4, r1
 800621c:	d1f6      	bne.n	800620c <memchr+0x8>
 800621e:	bd10      	pop	{r4, pc}

08006220 <memcpy>:
 8006220:	440a      	add	r2, r1
 8006222:	4291      	cmp	r1, r2
 8006224:	f100 33ff 	add.w	r3, r0, #4294967295
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	4770      	bx	lr
 800622c:	b510      	push	{r4, lr}
 800622e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006232:	4291      	cmp	r1, r2
 8006234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006238:	d1f9      	bne.n	800622e <memcpy+0xe>
 800623a:	bd10      	pop	{r4, pc}

0800623c <abort>:
 800623c:	2006      	movs	r0, #6
 800623e:	b508      	push	{r3, lr}
 8006240:	f000 fa2c 	bl	800669c <raise>
 8006244:	2001      	movs	r0, #1
 8006246:	f7fc f9e2 	bl	800260e <_exit>

0800624a <_realloc_r>:
 800624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	4607      	mov	r7, r0
 8006250:	4614      	mov	r4, r2
 8006252:	460d      	mov	r5, r1
 8006254:	b921      	cbnz	r1, 8006260 <_realloc_r+0x16>
 8006256:	4611      	mov	r1, r2
 8006258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800625c:	f7ff bb7a 	b.w	8005954 <_malloc_r>
 8006260:	b92a      	cbnz	r2, 800626e <_realloc_r+0x24>
 8006262:	f7ff fb05 	bl	8005870 <_free_r>
 8006266:	4625      	mov	r5, r4
 8006268:	4628      	mov	r0, r5
 800626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800626e:	f000 fa31 	bl	80066d4 <_malloc_usable_size_r>
 8006272:	4284      	cmp	r4, r0
 8006274:	4606      	mov	r6, r0
 8006276:	d802      	bhi.n	800627e <_realloc_r+0x34>
 8006278:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800627c:	d8f4      	bhi.n	8006268 <_realloc_r+0x1e>
 800627e:	4621      	mov	r1, r4
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff fb67 	bl	8005954 <_malloc_r>
 8006286:	4680      	mov	r8, r0
 8006288:	b908      	cbnz	r0, 800628e <_realloc_r+0x44>
 800628a:	4645      	mov	r5, r8
 800628c:	e7ec      	b.n	8006268 <_realloc_r+0x1e>
 800628e:	42b4      	cmp	r4, r6
 8006290:	4622      	mov	r2, r4
 8006292:	4629      	mov	r1, r5
 8006294:	bf28      	it	cs
 8006296:	4632      	movcs	r2, r6
 8006298:	f7ff ffc2 	bl	8006220 <memcpy>
 800629c:	4629      	mov	r1, r5
 800629e:	4638      	mov	r0, r7
 80062a0:	f7ff fae6 	bl	8005870 <_free_r>
 80062a4:	e7f1      	b.n	800628a <_realloc_r+0x40>

080062a6 <__sfputc_r>:
 80062a6:	6893      	ldr	r3, [r2, #8]
 80062a8:	b410      	push	{r4}
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	6093      	str	r3, [r2, #8]
 80062b0:	da07      	bge.n	80062c2 <__sfputc_r+0x1c>
 80062b2:	6994      	ldr	r4, [r2, #24]
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	db01      	blt.n	80062bc <__sfputc_r+0x16>
 80062b8:	290a      	cmp	r1, #10
 80062ba:	d102      	bne.n	80062c2 <__sfputc_r+0x1c>
 80062bc:	bc10      	pop	{r4}
 80062be:	f000 b931 	b.w	8006524 <__swbuf_r>
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	1c58      	adds	r0, r3, #1
 80062c6:	6010      	str	r0, [r2, #0]
 80062c8:	7019      	strb	r1, [r3, #0]
 80062ca:	4608      	mov	r0, r1
 80062cc:	bc10      	pop	{r4}
 80062ce:	4770      	bx	lr

080062d0 <__sfputs_r>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	4614      	mov	r4, r2
 80062d8:	18d5      	adds	r5, r2, r3
 80062da:	42ac      	cmp	r4, r5
 80062dc:	d101      	bne.n	80062e2 <__sfputs_r+0x12>
 80062de:	2000      	movs	r0, #0
 80062e0:	e007      	b.n	80062f2 <__sfputs_r+0x22>
 80062e2:	463a      	mov	r2, r7
 80062e4:	4630      	mov	r0, r6
 80062e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ea:	f7ff ffdc 	bl	80062a6 <__sfputc_r>
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	d1f3      	bne.n	80062da <__sfputs_r+0xa>
 80062f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062f4 <_vfiprintf_r>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	460d      	mov	r5, r1
 80062fa:	4614      	mov	r4, r2
 80062fc:	4698      	mov	r8, r3
 80062fe:	4606      	mov	r6, r0
 8006300:	b09d      	sub	sp, #116	@ 0x74
 8006302:	b118      	cbz	r0, 800630c <_vfiprintf_r+0x18>
 8006304:	6a03      	ldr	r3, [r0, #32]
 8006306:	b90b      	cbnz	r3, 800630c <_vfiprintf_r+0x18>
 8006308:	f7ff f8f8 	bl	80054fc <__sinit>
 800630c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800630e:	07d9      	lsls	r1, r3, #31
 8006310:	d405      	bmi.n	800631e <_vfiprintf_r+0x2a>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	059a      	lsls	r2, r3, #22
 8006316:	d402      	bmi.n	800631e <_vfiprintf_r+0x2a>
 8006318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800631a:	f7ff fa80 	bl	800581e <__retarget_lock_acquire_recursive>
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	071b      	lsls	r3, r3, #28
 8006322:	d501      	bpl.n	8006328 <_vfiprintf_r+0x34>
 8006324:	692b      	ldr	r3, [r5, #16]
 8006326:	b99b      	cbnz	r3, 8006350 <_vfiprintf_r+0x5c>
 8006328:	4629      	mov	r1, r5
 800632a:	4630      	mov	r0, r6
 800632c:	f000 f938 	bl	80065a0 <__swsetup_r>
 8006330:	b170      	cbz	r0, 8006350 <_vfiprintf_r+0x5c>
 8006332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006334:	07dc      	lsls	r4, r3, #31
 8006336:	d504      	bpl.n	8006342 <_vfiprintf_r+0x4e>
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	b01d      	add	sp, #116	@ 0x74
 800633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	0598      	lsls	r0, r3, #22
 8006346:	d4f7      	bmi.n	8006338 <_vfiprintf_r+0x44>
 8006348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800634a:	f7ff fa69 	bl	8005820 <__retarget_lock_release_recursive>
 800634e:	e7f3      	b.n	8006338 <_vfiprintf_r+0x44>
 8006350:	2300      	movs	r3, #0
 8006352:	9309      	str	r3, [sp, #36]	@ 0x24
 8006354:	2320      	movs	r3, #32
 8006356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800635a:	2330      	movs	r3, #48	@ 0x30
 800635c:	f04f 0901 	mov.w	r9, #1
 8006360:	f8cd 800c 	str.w	r8, [sp, #12]
 8006364:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006510 <_vfiprintf_r+0x21c>
 8006368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800636c:	4623      	mov	r3, r4
 800636e:	469a      	mov	sl, r3
 8006370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006374:	b10a      	cbz	r2, 800637a <_vfiprintf_r+0x86>
 8006376:	2a25      	cmp	r2, #37	@ 0x25
 8006378:	d1f9      	bne.n	800636e <_vfiprintf_r+0x7a>
 800637a:	ebba 0b04 	subs.w	fp, sl, r4
 800637e:	d00b      	beq.n	8006398 <_vfiprintf_r+0xa4>
 8006380:	465b      	mov	r3, fp
 8006382:	4622      	mov	r2, r4
 8006384:	4629      	mov	r1, r5
 8006386:	4630      	mov	r0, r6
 8006388:	f7ff ffa2 	bl	80062d0 <__sfputs_r>
 800638c:	3001      	adds	r0, #1
 800638e:	f000 80a7 	beq.w	80064e0 <_vfiprintf_r+0x1ec>
 8006392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006394:	445a      	add	r2, fp
 8006396:	9209      	str	r2, [sp, #36]	@ 0x24
 8006398:	f89a 3000 	ldrb.w	r3, [sl]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 809f 	beq.w	80064e0 <_vfiprintf_r+0x1ec>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f04f 32ff 	mov.w	r2, #4294967295
 80063a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ac:	f10a 0a01 	add.w	sl, sl, #1
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ba:	4654      	mov	r4, sl
 80063bc:	2205      	movs	r2, #5
 80063be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c2:	4853      	ldr	r0, [pc, #332]	@ (8006510 <_vfiprintf_r+0x21c>)
 80063c4:	f7ff ff1e 	bl	8006204 <memchr>
 80063c8:	9a04      	ldr	r2, [sp, #16]
 80063ca:	b9d8      	cbnz	r0, 8006404 <_vfiprintf_r+0x110>
 80063cc:	06d1      	lsls	r1, r2, #27
 80063ce:	bf44      	itt	mi
 80063d0:	2320      	movmi	r3, #32
 80063d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063d6:	0713      	lsls	r3, r2, #28
 80063d8:	bf44      	itt	mi
 80063da:	232b      	movmi	r3, #43	@ 0x2b
 80063dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063e0:	f89a 3000 	ldrb.w	r3, [sl]
 80063e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e6:	d015      	beq.n	8006414 <_vfiprintf_r+0x120>
 80063e8:	4654      	mov	r4, sl
 80063ea:	2000      	movs	r0, #0
 80063ec:	f04f 0c0a 	mov.w	ip, #10
 80063f0:	9a07      	ldr	r2, [sp, #28]
 80063f2:	4621      	mov	r1, r4
 80063f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f8:	3b30      	subs	r3, #48	@ 0x30
 80063fa:	2b09      	cmp	r3, #9
 80063fc:	d94b      	bls.n	8006496 <_vfiprintf_r+0x1a2>
 80063fe:	b1b0      	cbz	r0, 800642e <_vfiprintf_r+0x13a>
 8006400:	9207      	str	r2, [sp, #28]
 8006402:	e014      	b.n	800642e <_vfiprintf_r+0x13a>
 8006404:	eba0 0308 	sub.w	r3, r0, r8
 8006408:	fa09 f303 	lsl.w	r3, r9, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	46a2      	mov	sl, r4
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	e7d2      	b.n	80063ba <_vfiprintf_r+0xc6>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	1d19      	adds	r1, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	9103      	str	r1, [sp, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfbb      	ittet	lt
 8006420:	425b      	neglt	r3, r3
 8006422:	f042 0202 	orrlt.w	r2, r2, #2
 8006426:	9307      	strge	r3, [sp, #28]
 8006428:	9307      	strlt	r3, [sp, #28]
 800642a:	bfb8      	it	lt
 800642c:	9204      	strlt	r2, [sp, #16]
 800642e:	7823      	ldrb	r3, [r4, #0]
 8006430:	2b2e      	cmp	r3, #46	@ 0x2e
 8006432:	d10a      	bne.n	800644a <_vfiprintf_r+0x156>
 8006434:	7863      	ldrb	r3, [r4, #1]
 8006436:	2b2a      	cmp	r3, #42	@ 0x2a
 8006438:	d132      	bne.n	80064a0 <_vfiprintf_r+0x1ac>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	3402      	adds	r4, #2
 800643e:	1d1a      	adds	r2, r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	9203      	str	r2, [sp, #12]
 8006444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006514 <_vfiprintf_r+0x220>
 800644e:	2203      	movs	r2, #3
 8006450:	4650      	mov	r0, sl
 8006452:	7821      	ldrb	r1, [r4, #0]
 8006454:	f7ff fed6 	bl	8006204 <memchr>
 8006458:	b138      	cbz	r0, 800646a <_vfiprintf_r+0x176>
 800645a:	2240      	movs	r2, #64	@ 0x40
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	eba0 000a 	sub.w	r0, r0, sl
 8006462:	4082      	lsls	r2, r0
 8006464:	4313      	orrs	r3, r2
 8006466:	3401      	adds	r4, #1
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646e:	2206      	movs	r2, #6
 8006470:	4829      	ldr	r0, [pc, #164]	@ (8006518 <_vfiprintf_r+0x224>)
 8006472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006476:	f7ff fec5 	bl	8006204 <memchr>
 800647a:	2800      	cmp	r0, #0
 800647c:	d03f      	beq.n	80064fe <_vfiprintf_r+0x20a>
 800647e:	4b27      	ldr	r3, [pc, #156]	@ (800651c <_vfiprintf_r+0x228>)
 8006480:	bb1b      	cbnz	r3, 80064ca <_vfiprintf_r+0x1d6>
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	3307      	adds	r3, #7
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	3308      	adds	r3, #8
 800648c:	9303      	str	r3, [sp, #12]
 800648e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006490:	443b      	add	r3, r7
 8006492:	9309      	str	r3, [sp, #36]	@ 0x24
 8006494:	e76a      	b.n	800636c <_vfiprintf_r+0x78>
 8006496:	460c      	mov	r4, r1
 8006498:	2001      	movs	r0, #1
 800649a:	fb0c 3202 	mla	r2, ip, r2, r3
 800649e:	e7a8      	b.n	80063f2 <_vfiprintf_r+0xfe>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f04f 0c0a 	mov.w	ip, #10
 80064a6:	4619      	mov	r1, r3
 80064a8:	3401      	adds	r4, #1
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	4620      	mov	r0, r4
 80064ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b2:	3a30      	subs	r2, #48	@ 0x30
 80064b4:	2a09      	cmp	r2, #9
 80064b6:	d903      	bls.n	80064c0 <_vfiprintf_r+0x1cc>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0c6      	beq.n	800644a <_vfiprintf_r+0x156>
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	e7c4      	b.n	800644a <_vfiprintf_r+0x156>
 80064c0:	4604      	mov	r4, r0
 80064c2:	2301      	movs	r3, #1
 80064c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c8:	e7f0      	b.n	80064ac <_vfiprintf_r+0x1b8>
 80064ca:	ab03      	add	r3, sp, #12
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	462a      	mov	r2, r5
 80064d0:	4630      	mov	r0, r6
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <_vfiprintf_r+0x22c>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	f3af 8000 	nop.w
 80064da:	4607      	mov	r7, r0
 80064dc:	1c78      	adds	r0, r7, #1
 80064de:	d1d6      	bne.n	800648e <_vfiprintf_r+0x19a>
 80064e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064e2:	07d9      	lsls	r1, r3, #31
 80064e4:	d405      	bmi.n	80064f2 <_vfiprintf_r+0x1fe>
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	059a      	lsls	r2, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_vfiprintf_r+0x1fe>
 80064ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ee:	f7ff f997 	bl	8005820 <__retarget_lock_release_recursive>
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	065b      	lsls	r3, r3, #25
 80064f6:	f53f af1f 	bmi.w	8006338 <_vfiprintf_r+0x44>
 80064fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064fc:	e71e      	b.n	800633c <_vfiprintf_r+0x48>
 80064fe:	ab03      	add	r3, sp, #12
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	462a      	mov	r2, r5
 8006504:	4630      	mov	r0, r6
 8006506:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <_vfiprintf_r+0x22c>)
 8006508:	a904      	add	r1, sp, #16
 800650a:	f7ff fc79 	bl	8005e00 <_printf_i>
 800650e:	e7e4      	b.n	80064da <_vfiprintf_r+0x1e6>
 8006510:	08006dcc 	.word	0x08006dcc
 8006514:	08006dd2 	.word	0x08006dd2
 8006518:	08006dd6 	.word	0x08006dd6
 800651c:	00000000 	.word	0x00000000
 8006520:	080062d1 	.word	0x080062d1

08006524 <__swbuf_r>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	460e      	mov	r6, r1
 8006528:	4614      	mov	r4, r2
 800652a:	4605      	mov	r5, r0
 800652c:	b118      	cbz	r0, 8006536 <__swbuf_r+0x12>
 800652e:	6a03      	ldr	r3, [r0, #32]
 8006530:	b90b      	cbnz	r3, 8006536 <__swbuf_r+0x12>
 8006532:	f7fe ffe3 	bl	80054fc <__sinit>
 8006536:	69a3      	ldr	r3, [r4, #24]
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	071a      	lsls	r2, r3, #28
 800653e:	d501      	bpl.n	8006544 <__swbuf_r+0x20>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	b943      	cbnz	r3, 8006556 <__swbuf_r+0x32>
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f82a 	bl	80065a0 <__swsetup_r>
 800654c:	b118      	cbz	r0, 8006556 <__swbuf_r+0x32>
 800654e:	f04f 37ff 	mov.w	r7, #4294967295
 8006552:	4638      	mov	r0, r7
 8006554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	6922      	ldr	r2, [r4, #16]
 800655a:	b2f6      	uxtb	r6, r6
 800655c:	1a98      	subs	r0, r3, r2
 800655e:	6963      	ldr	r3, [r4, #20]
 8006560:	4637      	mov	r7, r6
 8006562:	4283      	cmp	r3, r0
 8006564:	dc05      	bgt.n	8006572 <__swbuf_r+0x4e>
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f7ff fde7 	bl	800613c <_fflush_r>
 800656e:	2800      	cmp	r0, #0
 8006570:	d1ed      	bne.n	800654e <__swbuf_r+0x2a>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	3b01      	subs	r3, #1
 8006576:	60a3      	str	r3, [r4, #8]
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	701e      	strb	r6, [r3, #0]
 8006580:	6962      	ldr	r2, [r4, #20]
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	429a      	cmp	r2, r3
 8006586:	d004      	beq.n	8006592 <__swbuf_r+0x6e>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	07db      	lsls	r3, r3, #31
 800658c:	d5e1      	bpl.n	8006552 <__swbuf_r+0x2e>
 800658e:	2e0a      	cmp	r6, #10
 8006590:	d1df      	bne.n	8006552 <__swbuf_r+0x2e>
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fdd1 	bl	800613c <_fflush_r>
 800659a:	2800      	cmp	r0, #0
 800659c:	d0d9      	beq.n	8006552 <__swbuf_r+0x2e>
 800659e:	e7d6      	b.n	800654e <__swbuf_r+0x2a>

080065a0 <__swsetup_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4b29      	ldr	r3, [pc, #164]	@ (8006648 <__swsetup_r+0xa8>)
 80065a4:	4605      	mov	r5, r0
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	460c      	mov	r4, r1
 80065aa:	b118      	cbz	r0, 80065b4 <__swsetup_r+0x14>
 80065ac:	6a03      	ldr	r3, [r0, #32]
 80065ae:	b90b      	cbnz	r3, 80065b4 <__swsetup_r+0x14>
 80065b0:	f7fe ffa4 	bl	80054fc <__sinit>
 80065b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b8:	0719      	lsls	r1, r3, #28
 80065ba:	d422      	bmi.n	8006602 <__swsetup_r+0x62>
 80065bc:	06da      	lsls	r2, r3, #27
 80065be:	d407      	bmi.n	80065d0 <__swsetup_r+0x30>
 80065c0:	2209      	movs	r2, #9
 80065c2:	602a      	str	r2, [r5, #0]
 80065c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	e033      	b.n	8006638 <__swsetup_r+0x98>
 80065d0:	0758      	lsls	r0, r3, #29
 80065d2:	d512      	bpl.n	80065fa <__swsetup_r+0x5a>
 80065d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d6:	b141      	cbz	r1, 80065ea <__swsetup_r+0x4a>
 80065d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065dc:	4299      	cmp	r1, r3
 80065de:	d002      	beq.n	80065e6 <__swsetup_r+0x46>
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7ff f945 	bl	8005870 <_free_r>
 80065e6:	2300      	movs	r3, #0
 80065e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	2300      	movs	r3, #0
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f043 0308 	orr.w	r3, r3, #8
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	b94b      	cbnz	r3, 800661a <__swsetup_r+0x7a>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800660c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006610:	d003      	beq.n	800661a <__swsetup_r+0x7a>
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 f88a 	bl	800672e <__smakebuf_r>
 800661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661e:	f013 0201 	ands.w	r2, r3, #1
 8006622:	d00a      	beq.n	800663a <__swsetup_r+0x9a>
 8006624:	2200      	movs	r2, #0
 8006626:	60a2      	str	r2, [r4, #8]
 8006628:	6962      	ldr	r2, [r4, #20]
 800662a:	4252      	negs	r2, r2
 800662c:	61a2      	str	r2, [r4, #24]
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	b942      	cbnz	r2, 8006644 <__swsetup_r+0xa4>
 8006632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006636:	d1c5      	bne.n	80065c4 <__swsetup_r+0x24>
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	0799      	lsls	r1, r3, #30
 800663c:	bf58      	it	pl
 800663e:	6962      	ldrpl	r2, [r4, #20]
 8006640:	60a2      	str	r2, [r4, #8]
 8006642:	e7f4      	b.n	800662e <__swsetup_r+0x8e>
 8006644:	2000      	movs	r0, #0
 8006646:	e7f7      	b.n	8006638 <__swsetup_r+0x98>
 8006648:	20000138 	.word	0x20000138

0800664c <_raise_r>:
 800664c:	291f      	cmp	r1, #31
 800664e:	b538      	push	{r3, r4, r5, lr}
 8006650:	4605      	mov	r5, r0
 8006652:	460c      	mov	r4, r1
 8006654:	d904      	bls.n	8006660 <_raise_r+0x14>
 8006656:	2316      	movs	r3, #22
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006662:	b112      	cbz	r2, 800666a <_raise_r+0x1e>
 8006664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006668:	b94b      	cbnz	r3, 800667e <_raise_r+0x32>
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f830 	bl	80066d0 <_getpid_r>
 8006670:	4622      	mov	r2, r4
 8006672:	4601      	mov	r1, r0
 8006674:	4628      	mov	r0, r5
 8006676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800667a:	f000 b817 	b.w	80066ac <_kill_r>
 800667e:	2b01      	cmp	r3, #1
 8006680:	d00a      	beq.n	8006698 <_raise_r+0x4c>
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	d103      	bne.n	800668e <_raise_r+0x42>
 8006686:	2316      	movs	r3, #22
 8006688:	6003      	str	r3, [r0, #0]
 800668a:	2001      	movs	r0, #1
 800668c:	e7e7      	b.n	800665e <_raise_r+0x12>
 800668e:	2100      	movs	r1, #0
 8006690:	4620      	mov	r0, r4
 8006692:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006696:	4798      	blx	r3
 8006698:	2000      	movs	r0, #0
 800669a:	e7e0      	b.n	800665e <_raise_r+0x12>

0800669c <raise>:
 800669c:	4b02      	ldr	r3, [pc, #8]	@ (80066a8 <raise+0xc>)
 800669e:	4601      	mov	r1, r0
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f7ff bfd3 	b.w	800664c <_raise_r>
 80066a6:	bf00      	nop
 80066a8:	20000138 	.word	0x20000138

080066ac <_kill_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	2300      	movs	r3, #0
 80066b0:	4d06      	ldr	r5, [pc, #24]	@ (80066cc <_kill_r+0x20>)
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	f7fb ff98 	bl	80025ee <_kill>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d102      	bne.n	80066c8 <_kill_r+0x1c>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	b103      	cbz	r3, 80066c8 <_kill_r+0x1c>
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	2000059c 	.word	0x2000059c

080066d0 <_getpid_r>:
 80066d0:	f7fb bf86 	b.w	80025e0 <_getpid>

080066d4 <_malloc_usable_size_r>:
 80066d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d8:	1f18      	subs	r0, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfbc      	itt	lt
 80066de:	580b      	ldrlt	r3, [r1, r0]
 80066e0:	18c0      	addlt	r0, r0, r3
 80066e2:	4770      	bx	lr

080066e4 <__swhatbuf_r>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	460c      	mov	r4, r1
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	4615      	mov	r5, r2
 80066ee:	2900      	cmp	r1, #0
 80066f0:	461e      	mov	r6, r3
 80066f2:	b096      	sub	sp, #88	@ 0x58
 80066f4:	da0c      	bge.n	8006710 <__swhatbuf_r+0x2c>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	2100      	movs	r1, #0
 80066fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066fe:	bf14      	ite	ne
 8006700:	2340      	movne	r3, #64	@ 0x40
 8006702:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006706:	2000      	movs	r0, #0
 8006708:	6031      	str	r1, [r6, #0]
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	b016      	add	sp, #88	@ 0x58
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	466a      	mov	r2, sp
 8006712:	f000 f849 	bl	80067a8 <_fstat_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	dbed      	blt.n	80066f6 <__swhatbuf_r+0x12>
 800671a:	9901      	ldr	r1, [sp, #4]
 800671c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006724:	4259      	negs	r1, r3
 8006726:	4159      	adcs	r1, r3
 8006728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800672c:	e7eb      	b.n	8006706 <__swhatbuf_r+0x22>

0800672e <__smakebuf_r>:
 800672e:	898b      	ldrh	r3, [r1, #12]
 8006730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006732:	079d      	lsls	r5, r3, #30
 8006734:	4606      	mov	r6, r0
 8006736:	460c      	mov	r4, r1
 8006738:	d507      	bpl.n	800674a <__smakebuf_r+0x1c>
 800673a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	2301      	movs	r3, #1
 8006744:	6163      	str	r3, [r4, #20]
 8006746:	b003      	add	sp, #12
 8006748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674a:	466a      	mov	r2, sp
 800674c:	ab01      	add	r3, sp, #4
 800674e:	f7ff ffc9 	bl	80066e4 <__swhatbuf_r>
 8006752:	9f00      	ldr	r7, [sp, #0]
 8006754:	4605      	mov	r5, r0
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff f8fb 	bl	8005954 <_malloc_r>
 800675e:	b948      	cbnz	r0, 8006774 <__smakebuf_r+0x46>
 8006760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006764:	059a      	lsls	r2, r3, #22
 8006766:	d4ee      	bmi.n	8006746 <__smakebuf_r+0x18>
 8006768:	f023 0303 	bic.w	r3, r3, #3
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	e7e2      	b.n	800673a <__smakebuf_r+0xc>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800677a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	6020      	str	r0, [r4, #0]
 8006784:	b15b      	cbz	r3, 800679e <__smakebuf_r+0x70>
 8006786:	4630      	mov	r0, r6
 8006788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678c:	f000 f81e 	bl	80067cc <_isatty_r>
 8006790:	b128      	cbz	r0, 800679e <__smakebuf_r+0x70>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	431d      	orrs	r5, r3
 80067a2:	81a5      	strh	r5, [r4, #12]
 80067a4:	e7cf      	b.n	8006746 <__smakebuf_r+0x18>
	...

080067a8 <_fstat_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	2300      	movs	r3, #0
 80067ac:	4d06      	ldr	r5, [pc, #24]	@ (80067c8 <_fstat_r+0x20>)
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	f7fb ff79 	bl	80026ac <_fstat>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d102      	bne.n	80067c4 <_fstat_r+0x1c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b103      	cbz	r3, 80067c4 <_fstat_r+0x1c>
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	bf00      	nop
 80067c8:	2000059c 	.word	0x2000059c

080067cc <_isatty_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	2300      	movs	r3, #0
 80067d0:	4d05      	ldr	r5, [pc, #20]	@ (80067e8 <_isatty_r+0x1c>)
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fb ff77 	bl	80026ca <_isatty>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_isatty_r+0x1a>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_isatty_r+0x1a>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	2000059c 	.word	0x2000059c

080067ec <fmaxf>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	f000 f825 	bl	8006840 <__fpclassifyf>
 80067f6:	b910      	cbnz	r0, 80067fe <fmaxf+0x12>
 80067f8:	462c      	mov	r4, r5
 80067fa:	4620      	mov	r0, r4
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f81e 	bl	8006840 <__fpclassifyf>
 8006804:	2800      	cmp	r0, #0
 8006806:	d0f8      	beq.n	80067fa <fmaxf+0xe>
 8006808:	4629      	mov	r1, r5
 800680a:	4620      	mov	r0, r4
 800680c:	f7f9 ff7a 	bl	8000704 <__aeabi_fcmpgt>
 8006810:	2800      	cmp	r0, #0
 8006812:	d0f1      	beq.n	80067f8 <fmaxf+0xc>
 8006814:	e7f1      	b.n	80067fa <fmaxf+0xe>

08006816 <fminf>:
 8006816:	b538      	push	{r3, r4, r5, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	460d      	mov	r5, r1
 800681c:	f000 f810 	bl	8006840 <__fpclassifyf>
 8006820:	b910      	cbnz	r0, 8006828 <fminf+0x12>
 8006822:	462c      	mov	r4, r5
 8006824:	4620      	mov	r0, r4
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f809 	bl	8006840 <__fpclassifyf>
 800682e:	2800      	cmp	r0, #0
 8006830:	d0f8      	beq.n	8006824 <fminf+0xe>
 8006832:	4629      	mov	r1, r5
 8006834:	4620      	mov	r0, r4
 8006836:	f7f9 ff47 	bl	80006c8 <__aeabi_fcmplt>
 800683a:	2800      	cmp	r0, #0
 800683c:	d0f1      	beq.n	8006822 <fminf+0xc>
 800683e:	e7f1      	b.n	8006824 <fminf+0xe>

08006840 <__fpclassifyf>:
 8006840:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8006844:	d00d      	beq.n	8006862 <__fpclassifyf+0x22>
 8006846:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800684a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800684e:	d30a      	bcc.n	8006866 <__fpclassifyf+0x26>
 8006850:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <__fpclassifyf+0x30>)
 8006852:	1e42      	subs	r2, r0, #1
 8006854:	429a      	cmp	r2, r3
 8006856:	d908      	bls.n	800686a <__fpclassifyf+0x2a>
 8006858:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800685c:	4258      	negs	r0, r3
 800685e:	4158      	adcs	r0, r3
 8006860:	4770      	bx	lr
 8006862:	2002      	movs	r0, #2
 8006864:	4770      	bx	lr
 8006866:	2004      	movs	r0, #4
 8006868:	4770      	bx	lr
 800686a:	2003      	movs	r0, #3
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	007ffffe 	.word	0x007ffffe

08006874 <_init>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr

08006880 <_fini>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr
