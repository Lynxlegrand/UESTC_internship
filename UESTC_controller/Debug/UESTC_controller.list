
UESTC_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800584c  0800584c  00007158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005854  08005854  00007158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005858  08005858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800585c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000158  080059b4  00007158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080059b4  000074d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb16  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  00016c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000193d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  0001a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191bb  00000000  00000000  0001b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c76  00000000  00000000  00034257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908f1  00000000  00000000  00045ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d67be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d8  00000000  00000000  000d6804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dafdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	0800548c 	.word	0x0800548c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	0800548c 	.word	0x0800548c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <BLE_SendCommand>:

#define huart_BLE huart1
extern UART_HandleTypeDef huart_BLE;

// Fonction d'envoi générique
void BLE_SendCommand(const char* cmd) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f7ff fff1 	bl	8000160 <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29a      	uxth	r2, r3
 8000182:	f04f 33ff 	mov.w	r3, #4294967295
 8000186:	6879      	ldr	r1, [r7, #4]
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <BLE_SendCommand+0x28>)
 800018a:	f003 fe99 	bl	8003ec0 <HAL_UART_Transmit>
}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	20000278 	.word	0x20000278

0800019c <BLE_SendTrame>:

void BLE_SendTrame(const uint8_t* cmd) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart_BLE, cmd, strlen((const char*)cmd), HAL_MAX_DELAY);
 80001a4:	6878      	ldr	r0, [r7, #4]
 80001a6:	f7ff ffdb 	bl	8000160 <strlen>
 80001aa:	4603      	mov	r3, r0
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	f04f 33ff 	mov.w	r3, #4294967295
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <BLE_SendTrame+0x28>)
 80001b6:	f003 fe83 	bl	8003ec0 <HAL_UART_Transmit>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000278 	.word	0x20000278

080001c8 <BLE_AT>:

// Test AT
void BLE_AT(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT\r\n");
 80001cc:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <BLE_AT+0x10>)
 80001ce:	f7ff ffcf 	bl	8000170 <BLE_SendCommand>
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	080054a4 	.word	0x080054a4

080001dc <BLE_Reset>:

// Redémarrage du module
void BLE_Reset(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESET\r\n");
 80001e0:	4802      	ldr	r0, [pc, #8]	@ (80001ec <BLE_Reset+0x10>)
 80001e2:	f7ff ffc5 	bl	8000170 <BLE_SendCommand>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	080054ac 	.word	0x080054ac

080001f0 <BLE_RestoreDefaults>:

// Restauration usine
void BLE_RestoreDefaults(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+RESTORE\r\n");
 80001f4:	4802      	ldr	r0, [pc, #8]	@ (8000200 <BLE_RestoreDefaults+0x10>)
 80001f6:	f7ff ffbb 	bl	8000170 <BLE_SendCommand>
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	080054b8 	.word	0x080054b8

08000204 <BLE_ReadVersion>:

// Lire version du firmware
void BLE_ReadVersion(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+VER\r\n");
 8000208:	4802      	ldr	r0, [pc, #8]	@ (8000214 <BLE_ReadVersion+0x10>)
 800020a:	f7ff ffb1 	bl	8000170 <BLE_SendCommand>
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	080054c8 	.word	0x080054c8

08000218 <BLE_ReadName>:

// Lire nom BLE
void BLE_ReadName(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLENAME\r\n");
 800021c:	4802      	ldr	r0, [pc, #8]	@ (8000228 <BLE_ReadName+0x10>)
 800021e:	f7ff ffa7 	bl	8000170 <BLE_SendCommand>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	080054d4 	.word	0x080054d4

0800022c <BLE_SetName>:

// Définir nom BLE
void BLE_SetName(const char* name) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b092      	sub	sp, #72	@ 0x48
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLENAME=%s\r\n", name);
 8000234:	f107 0008 	add.w	r0, r7, #8
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a06      	ldr	r2, [pc, #24]	@ (8000254 <BLE_SetName+0x28>)
 800023c:	2140      	movs	r1, #64	@ 0x40
 800023e:	f004 fc59 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ff92 	bl	8000170 <BLE_SendCommand>
}
 800024c:	bf00      	nop
 800024e:	3748      	adds	r7, #72	@ 0x48
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	080054e4 	.word	0x080054e4

08000258 <BLE_ReadMAC>:

// Lire l’adresse MAC BLE
void BLE_ReadMAC(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BLEMAC\r\n");
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <BLE_ReadMAC+0x10>)
 800025e:	f7ff ff87 	bl	8000170 <BLE_SendCommand>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	080054f4 	.word	0x080054f4

0800026c <BLE_ReadRole>:

// Lire le rôle actuel
void BLE_ReadRole(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ROLE\r\n");
 8000270:	4802      	ldr	r0, [pc, #8]	@ (800027c <BLE_ReadRole+0x10>)
 8000272:	f7ff ff7d 	bl	8000170 <BLE_SendCommand>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	08005500 	.word	0x08005500

08000280 <BLE_SetRole>:

// Définir rôle (0 = slave, 1 = master)
void BLE_SetRole(uint8_t role) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ROLE=%d\r\n", (char)role);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f107 0008 	add.w	r0, r7, #8
 8000290:	4a06      	ldr	r2, [pc, #24]	@ (80002ac <BLE_SetRole+0x2c>)
 8000292:	2120      	movs	r1, #32
 8000294:	f004 fc2e 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff67 	bl	8000170 <BLE_SendCommand>
}
 80002a2:	bf00      	nop
 80002a4:	3728      	adds	r7, #40	@ 0x28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	0800550c 	.word	0x0800550c

080002b0 <BLE_SetPIN>:

// Définir mot de passe
void BLE_SetPIN(const char* pin6digits) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	@ 0x28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+PIN=%s\r\n", pin6digits);
 80002b8:	f107 0008 	add.w	r0, r7, #8
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a06      	ldr	r2, [pc, #24]	@ (80002d8 <BLE_SetPIN+0x28>)
 80002c0:	2120      	movs	r1, #32
 80002c2:	f004 fc17 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff50 	bl	8000170 <BLE_SendCommand>
}
 80002d0:	bf00      	nop
 80002d2:	3728      	adds	r7, #40	@ 0x28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	0800551c 	.word	0x0800551c

080002dc <BLE_SetSecurity>:

// Définir le niveau de sécurité
void BLE_SetSecurity(uint8_t level) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SECURITY=%d\r\n", (char)level);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f107 0008 	add.w	r0, r7, #8
 80002ec:	4a06      	ldr	r2, [pc, #24]	@ (8000308 <BLE_SetSecurity+0x2c>)
 80002ee:	2120      	movs	r1, #32
 80002f0:	f004 fc00 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff39 	bl	8000170 <BLE_SendCommand>
}
 80002fe:	bf00      	nop
 8000300:	3728      	adds	r7, #40	@ 0x28
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	08005528 	.word	0x08005528

0800030c <BLE_ReadSecurity>:

// Lire niveau de sécurité
void BLE_ReadSecurity(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SECURITY\r\n");
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <BLE_ReadSecurity+0x10>)
 8000312:	f7ff ff2d 	bl	8000170 <BLE_SendCommand>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	0800553c 	.word	0x0800553c

08000320 <BLE_ReadPIN>:

// Lire PIN actuel
void BLE_ReadPIN(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+PIN\r\n");
 8000324:	4802      	ldr	r0, [pc, #8]	@ (8000330 <BLE_ReadPIN+0x10>)
 8000326:	f7ff ff23 	bl	8000170 <BLE_SendCommand>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	0800554c 	.word	0x0800554c

08000334 <BLE_EnterATMode>:

// Passer en mode AT
void BLE_EnterATMode(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>9\r\n");
 8000338:	4802      	ldr	r0, [pc, #8]	@ (8000344 <BLE_EnterATMode+0x10>)
 800033a:	f7ff ff19 	bl	8000170 <BLE_SendCommand>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	08005558 	.word	0x08005558

08000348 <BLE_EnterBLEMode>:

// Revenir au mode BLE
void BLE_EnterBLEMode(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT>8\r\n");
 800034c:	4802      	ldr	r0, [pc, #8]	@ (8000358 <BLE_EnterBLEMode+0x10>)
 800034e:	f7ff ff0f 	bl	8000170 <BLE_SendCommand>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	08005560 	.word	0x08005560

0800035c <BLE_SetLog>:

// Activer/désactiver le log
void BLE_SetLog(uint8_t enable) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	@ 0x28
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LOG=%d\r\n", (char)enable);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	f107 0008 	add.w	r0, r7, #8
 800036c:	4a06      	ldr	r2, [pc, #24]	@ (8000388 <BLE_SetLog+0x2c>)
 800036e:	2120      	movs	r1, #32
 8000370:	f004 fbc0 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000374:	f107 0308 	add.w	r3, r7, #8
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff fef9 	bl	8000170 <BLE_SendCommand>
}
 800037e:	bf00      	nop
 8000380:	3728      	adds	r7, #40	@ 0x28
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	08005568 	.word	0x08005568

0800038c <BLE_ReadLog>:

// Lire état du log
void BLE_ReadLog(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LOG\r\n");
 8000390:	4802      	ldr	r0, [pc, #8]	@ (800039c <BLE_ReadLog+0x10>)
 8000392:	f7ff feed 	bl	8000170 <BLE_SendCommand>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	08005574 	.word	0x08005574

080003a0 <BLE_SetLED>:

// Réglage LED d’état
void BLE_SetLED(uint8_t mode) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	@ 0x28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LED=%d\r\n", (char)mode);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f107 0008 	add.w	r0, r7, #8
 80003b0:	4a06      	ldr	r2, [pc, #24]	@ (80003cc <BLE_SetLED+0x2c>)
 80003b2:	2120      	movs	r1, #32
 80003b4:	f004 fb9e 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80003b8:	f107 0308 	add.w	r3, r7, #8
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fed7 	bl	8000170 <BLE_SendCommand>
}
 80003c2:	bf00      	nop
 80003c4:	3728      	adds	r7, #40	@ 0x28
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	08005580 	.word	0x08005580

080003d0 <BLE_ReadLED>:

// Lire mode LED
void BLE_ReadLED(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LED\r\n");
 80003d4:	4802      	ldr	r0, [pc, #8]	@ (80003e0 <BLE_ReadLED+0x10>)
 80003d6:	f7ff fecb 	bl	8000170 <BLE_SendCommand>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	0800558c 	.word	0x0800558c

080003e4 <BLE_SetRFPower>:

// Définir puissance d’émission (0 à 9)
void BLE_SetRFPower(uint8_t level) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	@ 0x28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+RFPWR=%d\r\n", (char)level);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f107 0008 	add.w	r0, r7, #8
 80003f4:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <BLE_SetRFPower+0x2c>)
 80003f6:	2120      	movs	r1, #32
 80003f8:	f004 fb7c 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80003fc:	f107 0308 	add.w	r3, r7, #8
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff feb5 	bl	8000170 <BLE_SendCommand>
}
 8000406:	bf00      	nop
 8000408:	3728      	adds	r7, #40	@ 0x28
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08005598 	.word	0x08005598

08000414 <BLE_ReadUUID>:

// Lire UUID
void BLE_ReadUUID(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+UUID\r\n");
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <BLE_ReadUUID+0x10>)
 800041a:	f7ff fea9 	bl	8000170 <BLE_SendCommand>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	080055a8 	.word	0x080055a8

08000428 <BLE_SetUUID>:

// Modifier UUID d’un service ou caractéristique
void BLE_SetUUID(uint8_t index, const char* uuid) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b0a4      	sub	sp, #144	@ 0x90
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+UUID=%d,%s\r\n", (char)index, (char)uuid);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	f107 0008 	add.w	r0, r7, #8
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	4a07      	ldr	r2, [pc, #28]	@ (8000460 <BLE_SetUUID+0x38>)
 8000442:	2180      	movs	r1, #128	@ 0x80
 8000444:	f004 fb56 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe8f 	bl	8000170 <BLE_SendCommand>
    BLE_Reset();  // UUID settings require reboot
 8000452:	f7ff fec3 	bl	80001dc <BLE_Reset>
}
 8000456:	bf00      	nop
 8000458:	3788      	adds	r7, #136	@ 0x88
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	080055b4 	.word	0x080055b4

08000464 <BLE_ReadAdvData>:

// Lire données du paquet de broadcast
void BLE_ReadAdvData(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVDATA\r\n");
 8000468:	4802      	ldr	r0, [pc, #8]	@ (8000474 <BLE_ReadAdvData+0x10>)
 800046a:	f7ff fe81 	bl	8000170 <BLE_SendCommand>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	080055c4 	.word	0x080055c4

08000478 <BLE_SetAdvData>:

// Définir données broadcast personnalisées
void BLE_SetAdvData(const char* adv_data_hex) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b0a2      	sub	sp, #136	@ 0x88
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+ADVDATA=%s\r\n", adv_data_hex);
 8000480:	f107 0008 	add.w	r0, r7, #8
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a06      	ldr	r2, [pc, #24]	@ (80004a0 <BLE_SetAdvData+0x28>)
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	f004 fb33 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <BLE_SendCommand>
}
 8000498:	bf00      	nop
 800049a:	3788      	adds	r7, #136	@ 0x88
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	080055d4 	.word	0x080055d4

080004a4 <BLE_ReadAdvInterval>:

// Lire intervalle broadcast
void BLE_ReadAdvInterval(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+ADVPARAM\r\n");
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <BLE_ReadAdvInterval+0x10>)
 80004aa:	f7ff fe61 	bl	8000170 <BLE_SendCommand>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	080055e4 	.word	0x080055e4

080004b8 <BLE_SetAdvInterval>:

// Définir intervalle broadcast (10~4000 ms)
void BLE_SetAdvInterval(uint16_t interval_ms) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b092      	sub	sp, #72	@ 0x48
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+ADVPARAM=%d\r\n", (char)interval_ms);
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f107 0008 	add.w	r0, r7, #8
 80004ca:	4a06      	ldr	r2, [pc, #24]	@ (80004e4 <BLE_SetAdvInterval+0x2c>)
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	f004 fb11 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe4a 	bl	8000170 <BLE_SendCommand>
}
 80004dc:	bf00      	nop
 80004de:	3748      	adds	r7, #72	@ 0x48
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	080055f4 	.word	0x080055f4

080004e8 <BLE_SetBroadcast>:

// Activer/désactiver le broadcast
void BLE_SetBroadcast(uint8_t enable) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+ADV=%d\r\n", (char)enable);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f107 0008 	add.w	r0, r7, #8
 80004f8:	4a06      	ldr	r2, [pc, #24]	@ (8000514 <BLE_SetBroadcast+0x2c>)
 80004fa:	2120      	movs	r1, #32
 80004fc:	f004 fafa 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe33 	bl	8000170 <BLE_SendCommand>
}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	@ 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08005608 	.word	0x08005608

08000518 <BLE_SetLowPowerMode>:

// Activer ou désactiver le mode low power
void BLE_SetLowPowerMode(uint8_t enable) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+LPM=%d\r\n", (char)enable);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f107 0008 	add.w	r0, r7, #8
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <BLE_SetLowPowerMode+0x2c>)
 800052a:	2120      	movs	r1, #32
 800052c:	f004 fae2 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe1b 	bl	8000170 <BLE_SendCommand>
}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	@ 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	08005614 	.word	0x08005614

08000548 <BLE_ReadLowPowerMode>:

// Lire état low power
void BLE_ReadLowPowerMode(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+LPM\r\n");
 800054c:	4802      	ldr	r0, [pc, #8]	@ (8000558 <BLE_ReadLowPowerMode+0x10>)
 800054e:	f7ff fe0f 	bl	8000170 <BLE_SendCommand>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	08005620 	.word	0x08005620

0800055c <BLE_ConnectTo>:
void BLE_Scan(void) {
    BLE_SendCommand("AT+SCAN=1\r\n");
}

// Connexion à un périphérique BLE (master mode)
void BLE_ConnectTo(const char* mac_addr) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b092      	sub	sp, #72	@ 0x48
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+CONN=%s\r\n", mac_addr);
 8000564:	f107 0008 	add.w	r0, r7, #8
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <BLE_ConnectTo+0x28>)
 800056c:	2140      	movs	r1, #64	@ 0x40
 800056e:	f004 fac1 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdfa 	bl	8000170 <BLE_SendCommand>
}
 800057c:	bf00      	nop
 800057e:	3748      	adds	r7, #72	@ 0x48
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	08005638 	.word	0x08005638

08000588 <BLE_Disconnect>:

// Déconnexion (nécessite d’abord AT>9)
void BLE_Disconnect(uint8_t mode) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	@ 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+DISC=%d\r\n", (char)mode);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f107 0008 	add.w	r0, r7, #8
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <BLE_Disconnect+0x2c>)
 800059a:	2120      	movs	r1, #32
 800059c:	f004 faaa 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fde3 	bl	8000170 <BLE_SendCommand>
}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	@ 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08005648 	.word	0x08005648

080005b8 <BLE_Sleep>:

// Mise en veille (soft shutdown)
void BLE_Sleep(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SLEEP\r\n");
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <BLE_Sleep+0x10>)
 80005be:	f7ff fdd7 	bl	8000170 <BLE_SendCommand>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08005658 	.word	0x08005658

080005cc <BLE_ReadBaudrate>:
// Lire le baudrate
void BLE_ReadBaudrate(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+BAUD\r\n");
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <BLE_ReadBaudrate+0x10>)
 80005d2:	f7ff fdcd 	bl	8000170 <BLE_SendCommand>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08005664 	.word	0x08005664

080005e0 <BLE_SetBaudrate>:

// Définir le baudrate (ex: 9600, 115200, etc.)
void BLE_SetBaudrate(uint32_t baudrate) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+BAUD=%lu\r\n", (char)baudrate);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f107 0008 	add.w	r0, r7, #8
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <BLE_SetBaudrate+0x2c>)
 80005f2:	2120      	movs	r1, #32
 80005f4:	f004 fa7e 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdb7 	bl	8000170 <BLE_SendCommand>
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	@ 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08005670 	.word	0x08005670

08000610 <BLE_ReadMode>:

// Lire le mode (0 = BLE / 1 = BLE&SPP)
void BLE_ReadMode(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+MODE\r\n");
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <BLE_ReadMode+0x10>)
 8000616:	f7ff fdab 	bl	8000170 <BLE_SendCommand>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	08005680 	.word	0x08005680

08000624 <BLE_SetMode>:

// Définir le mode BLE ou BLE+SPP
void BLE_SetMode(uint8_t mode) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+MODE=%d\r\n", (char)mode);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f107 0008 	add.w	r0, r7, #8
 8000634:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <BLE_SetMode+0x2c>)
 8000636:	2120      	movs	r1, #32
 8000638:	f004 fa5c 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fd95 	bl	8000170 <BLE_SendCommand>
}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	0800568c 	.word	0x0800568c

08000654 <BLE_ReadSPPName>:

// Lire nom SPP
void BLE_ReadSPPName(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPNAME\r\n");
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <BLE_ReadSPPName+0x10>)
 800065a:	f7ff fd89 	bl	8000170 <BLE_SendCommand>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	0800569c 	.word	0x0800569c

08000668 <BLE_SetSPPName>:

// Définir nom SPP
void BLE_SetSPPName(const char* name) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b092      	sub	sp, #72	@ 0x48
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPNAME=%s\r\n", name);
 8000670:	f107 0008 	add.w	r0, r7, #8
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <BLE_SetSPPName+0x28>)
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	f004 fa3b 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fd74 	bl	8000170 <BLE_SendCommand>
}
 8000688:	bf00      	nop
 800068a:	3748      	adds	r7, #72	@ 0x48
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080056ac 	.word	0x080056ac

08000694 <BLE_ReadSPPMAC>:

// Lire MAC SPP
void BLE_ReadSPPMAC(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SPPMAC\r\n");
 8000698:	4802      	ldr	r0, [pc, #8]	@ (80006a4 <BLE_ReadSPPMAC+0x10>)
 800069a:	f7ff fd69 	bl	8000170 <BLE_SendCommand>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	080056bc 	.word	0x080056bc

080006a8 <BLE_SetBLEMAC>:

// Définir MAC BLE
void BLE_SetBLEMAC(const char* mac12) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b092      	sub	sp, #72	@ 0x48
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+BLEMAC=%s\r\n", mac12);
 80006b0:	f107 0008 	add.w	r0, r7, #8
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <BLE_SetBLEMAC+0x28>)
 80006b8:	2140      	movs	r1, #64	@ 0x40
 80006ba:	f004 fa1b 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd54 	bl	8000170 <BLE_SendCommand>
}
 80006c8:	bf00      	nop
 80006ca:	3748      	adds	r7, #72	@ 0x48
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	080056c8 	.word	0x080056c8

080006d4 <BLE_SetSPPMAC>:

// Définir MAC SPP
void BLE_SetSPPMAC(const char* mac12) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b092      	sub	sp, #72	@ 0x48
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SPPMAC=%s\r\n", mac12);
 80006dc:	f107 0008 	add.w	r0, r7, #8
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a06      	ldr	r2, [pc, #24]	@ (80006fc <BLE_SetSPPMAC+0x28>)
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	f004 fa05 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd3e 	bl	8000170 <BLE_SendCommand>
}
 80006f4:	bf00      	nop
 80006f6:	3748      	adds	r7, #72	@ 0x48
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	080056d8 	.word	0x080056d8

08000700 <BLE_SetTargetUUID>:

// Définir UUID cible pour connexion (client mode)
void BLE_SetTargetUUID(const char* uuid) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b0a2      	sub	sp, #136	@ 0x88
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+TARGETUUID=%s\r\n", uuid);
 8000708:	f107 0008 	add.w	r0, r7, #8
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <BLE_SetTargetUUID+0x28>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	f004 f9ef 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd28 	bl	8000170 <BLE_SendCommand>
}
 8000720:	bf00      	nop
 8000722:	3788      	adds	r7, #136	@ 0x88
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	080056e8 	.word	0x080056e8

0800072c <BLE_ScanStart>:

// Scanner les périphériques BLE
void BLE_ScanStart(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+SCAN=1\r\n");
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <BLE_ScanStart+0x10>)
 8000732:	f7ff fd1d 	bl	8000170 <BLE_SendCommand>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800562c 	.word	0x0800562c

08000740 <BLE_SetScanLimits>:

// Configurer paramètres de scan (nombre, timeout)
void BLE_SetScanLimits(uint8_t count, uint8_t timeout_sec) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af02      	add	r7, sp, #8
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), "AT+SCANM=%d,%d\r\n", (char)count, (char)timeout_sec);
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	f107 0008 	add.w	r0, r7, #8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4613      	mov	r3, r2
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <BLE_SetScanLimits+0x38>)
 800075e:	2120      	movs	r1, #32
 8000760:	f004 f9c8 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fd01 	bl	8000170 <BLE_SendCommand>
}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	@ 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	080056fc 	.word	0x080056fc

0800077c <BLE_SetScanParams>:

// Configurer scan params (mode, interval, window)
void BLE_SetScanParams(uint8_t active, uint8_t interval, uint8_t window) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af02      	add	r7, sp, #8
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	460b      	mov	r3, r1
 8000788:	71bb      	strb	r3, [r7, #6]
 800078a:	4613      	mov	r3, r2
 800078c:	717b      	strb	r3, [r7, #5]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SCANPARAM=%d,%d,%d\r\n", (char)active, (char)interval, (char)window);
 800078e:	79f9      	ldrb	r1, [r7, #7]
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	797a      	ldrb	r2, [r7, #5]
 8000794:	f107 0008 	add.w	r0, r7, #8
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	460b      	mov	r3, r1
 800079e:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <BLE_SetScanParams+0x3c>)
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	f004 f9a7 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fce0 	bl	8000170 <BLE_SendCommand>
}
 80007b0:	bf00      	nop
 80007b2:	3748      	adds	r7, #72	@ 0x48
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08005710 	.word	0x08005710

080007bc <BLE_ClearBindings>:

// Effacer les liaisons enregistrées
void BLE_ClearBindings(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    BLE_SendCommand("AT+CLRBIND\r\n");
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <BLE_ClearBindings+0x10>)
 80007c2:	f7ff fcd5 	bl	8000170 <BLE_SendCommand>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	08005728 	.word	0x08005728

080007d0 <BLE_SetAutoConnect>:

// Configurer auto-connexion (client mode uniquement)
void BLE_SetAutoConnect(const char* mac) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b092      	sub	sp, #72	@ 0x48
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    char cmd[64];
    snprintf(cmd, sizeof(cmd), "AT+SERVER=%s\r\n", mac);
 80007d8:	f107 0008 	add.w	r0, r7, #8
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <BLE_SetAutoConnect+0x2c>)
 80007e0:	2140      	movs	r1, #64	@ 0x40
 80007e2:	f004 f987 	bl	8004af4 <sniprintf>
    BLE_SendCommand(cmd);
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fcc0 	bl	8000170 <BLE_SendCommand>
    BLE_Reset();  // Reboot pour appliquer
 80007f0:	f7ff fcf4 	bl	80001dc <BLE_Reset>
}
 80007f4:	bf00      	nop
 80007f6:	3748      	adds	r7, #72	@ 0x48
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08005738 	.word	0x08005738

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fe48 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f830 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 f9cc 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f000 f9ac 	bl	8000b6c <MX_DMA_Init>
  MX_ADC1_Init();
 8000814:	f000 f87a 	bl	800090c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000818:	f000 f8e2 	bl	80009e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800081c:	f000 f97c 	bl	8000b18 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000820:	f000 f92c 	bl	8000a7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  // CALIBRATION DES ADCs
  HAL_ADCEx_Calibration_Start(&hadc1); // Calibrer ADC1 => CF drivers hal_adc
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <main+0x54>)
 8000826:	f001 fb2d 	bl	8001e84 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_NUM_CONVERSIONS); // configurer DMA
 800082a:	2204      	movs	r2, #4
 800082c:	490a      	ldr	r1, [pc, #40]	@ (8000858 <main+0x58>)
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <main+0x54>)
 8000830:	f000 ff6c 	bl	800170c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3); // demarer timer 3
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <main+0x5c>)
 8000836:	f002 feff 	bl	8003638 <HAL_TIM_Base_Start>

  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	4908      	ldr	r1, [pc, #32]	@ (8000860 <main+0x60>)
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <main+0x64>)
 8000840:	f003 fbc9 	bl	8003fd6 <HAL_UART_Receive_IT>
  // chaque caractère va être écrit dans le buff et une interruption sera envoyée à HAL_UART_RxCpltCallback

  //Config du module BLE
  config_BLE();
 8000844:	f000 fb06 	bl	8000e54 <config_BLE>

  //Timer pour envoyer la trame
  HAL_TIM_Base_Start_IT(&htim4);
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <main+0x68>)
 800084a:	f002 ff3f 	bl	80036cc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_trame_if_necessary();
 800084e:	f000 fb77 	bl	8000f40 <send_trame_if_necessary>
 8000852:	e7fc      	b.n	800084e <main+0x4e>
 8000854:	20000174 	.word	0x20000174
 8000858:	20000358 	.word	0x20000358
 800085c:	200001e8 	.word	0x200001e8
 8000860:	200002c0 	.word	0x200002c0
 8000864:	20000278 	.word	0x20000278
 8000868:	20000230 	.word	0x20000230

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000876:	2228      	movs	r2, #40	@ 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 f970 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f8f6 	bl	8002aa0 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x52>
  {
    Error_Handler();
 80008ba:	f000 fa39 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fb63 	bl	8002fa4 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008e4:	f000 fa24 	bl	8000d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e8:	2302      	movs	r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fce4 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008fe:	f000 fa17 	bl	8000d30 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	@ 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800091e:	4a2f      	ldr	r2, [pc, #188]	@ (80009dc <MX_ADC1_Init+0xd0>)
 8000920:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000928:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000932:	2200      	movs	r2, #0
 8000934:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000938:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800093c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000946:	2204      	movs	r2, #4
 8000948:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	4823      	ldr	r0, [pc, #140]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800094c:	f000 fe06 	bl	800155c <HAL_ADC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000956:	f000 f9eb 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800095a:	2301      	movs	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000962:	2306      	movs	r3, #6
 8000964:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800096c:	f001 f890 	bl	8001a90 <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f9db 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800097a:	2302      	movs	r3, #2
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800097e:	2302      	movs	r3, #2
 8000980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000988:	f001 f882 	bl	8001a90 <HAL_ADC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000992:	f000 f9cd 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000996:	2303      	movs	r3, #3
 8000998:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800099a:	2303      	movs	r3, #3
 800099c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 80009a4:	f001 f874 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009ae:	f000 f9bf 	bl	8000d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 80009c0:	f001 f866 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009ca:	f000 f9b1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000174 	.word	0x20000174
 80009dc:	40012400 	.word	0x40012400

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_TIM3_Init+0x94>)
 80009fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000a78 <MX_TIM3_Init+0x98>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a04:	f240 321f 	movw	r2, #799	@ 0x31f
 8000a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a24:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a26:	f002 fdb7 	bl	8003598 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a30:	f000 f97e 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a42:	f002 ff85 	bl	8003950 <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a4c:	f000 f970 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a50:	2320      	movs	r3, #32
 8000a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_TIM3_Init+0x94>)
 8000a5e:	f003 f96f 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 f962 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001e8 	.word	0x200001e8
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <MX_TIM4_Init+0x98>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000aa0:	f240 321f 	movw	r2, #799	@ 0x31f
 8000aa4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000ac2:	f002 fd69 	bl	8003598 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000acc:	f000 f930 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000ade:	f002 ff37 	bl	8003950 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ae8:	f000 f922 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_TIM4_Init+0x94>)
 8000afa:	f003 f921 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f914 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000230 	.word	0x20000230
 8000b14:	40000800 	.word	0x40000800

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f003 f966 	bl	8003e20 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f8e9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000278 	.word	0x20000278
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_DMA_Init+0x38>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <MX_DMA_Init+0x38>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_DMA_Init+0x38>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f001 fb07 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b94:	200b      	movs	r0, #11
 8000b96:	f001 fb20 	bl	80021da <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bc2:	f043 0320 	orr.w	r3, r3, #32
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a26      	ldr	r2, [pc, #152]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c04:	233e      	movs	r3, #62	@ 0x3e
 8000c06:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_GPIO_Init+0xd0>)
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <MX_GPIO_Init+0xd4>)
 8000c18:	f001 fd9c 	bl	8002754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2102      	movs	r1, #2
 8000c20:	2007      	movs	r0, #7
 8000c22:	f001 fabe 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c26:	2007      	movs	r0, #7
 8000c28:	f001 fad7 	bl	80021da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	2008      	movs	r0, #8
 8000c32:	f001 fab6 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c36:	2008      	movs	r0, #8
 8000c38:	f001 facf 	bl	80021da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2102      	movs	r1, #2
 8000c40:	2009      	movs	r0, #9
 8000c42:	f001 faae 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c46:	2009      	movs	r0, #9
 8000c48:	f001 fac7 	bl	80021da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2102      	movs	r1, #2
 8000c50:	200a      	movs	r0, #10
 8000c52:	f001 faa6 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 fabf 	bl	80021da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2017      	movs	r0, #23
 8000c62:	f001 fa9e 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c66:	2017      	movs	r0, #23
 8000c68:	f001 fab7 	bl	80021da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <HAL_UART_RxCpltCallback>:


////////////////////////////////////////////////////////////////// CODE RX


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <HAL_UART_RxCpltCallback+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d13b      	bne.n	8000d0a <HAL_UART_RxCpltCallback+0x8a>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_UART_RxCpltCallback+0x98>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c98:	d81a      	bhi.n	8000cd0 <HAL_UART_RxCpltCallback+0x50>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <HAL_UART_RxCpltCallback+0x98>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	491d      	ldr	r1, [pc, #116]	@ (8000d18 <HAL_UART_RxCpltCallback+0x98>)
 8000ca2:	600a      	str	r2, [r1, #0]
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d1c <HAL_UART_RxCpltCallback+0x9c>)
 8000ca6:	7811      	ldrb	r1, [r2, #0]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <HAL_UART_RxCpltCallback+0xa0>)
 8000caa:	54d1      	strb	r1, [r2, r3]
            if((char)rx_it_buffer == '\n'){
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_UART_RxCpltCallback+0x9c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	d10d      	bne.n	8000cd0 <HAL_UART_RxCpltCallback+0x50>
            	if (!debut_de_trame){
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <HAL_UART_RxCpltCallback+0xa4>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_UART_RxCpltCallback+0x4a>
            		debut_de_trame = true;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_RxCpltCallback+0xa4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e002      	b.n	8000cd0 <HAL_UART_RxCpltCallback+0x50>
            	}
            	else{
            		fin_de_trame = true;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_UART_RxCpltCallback+0xa8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_RxCpltCallback+0xa8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d013      	beq.n	8000d00 <HAL_UART_RxCpltCallback+0x80>
        	process_trame_rx(receive_buffer);  // traite la trame
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <HAL_UART_RxCpltCallback+0xa0>)
 8000cda:	f000 f883 	bl	8000de4 <process_trame_rx>
        	memset(receive_buffer, 0, sizeof(receive_buffer));
 8000cde:	2240      	movs	r2, #64	@ 0x40
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ce4:	f003 ff3c 	bl	8004b60 <memset>
            receive_index = 0;              // réinitialise l'index
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_UART_RxCpltCallback+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <HAL_UART_RxCpltCallback+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_UART_RxCpltCallback+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
            rx_it_buffer = 0;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_UART_RxCpltCallback+0x9c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]


        }

        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart_BLE, &rx_it_buffer, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <HAL_UART_RxCpltCallback+0x9c>)
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <HAL_UART_RxCpltCallback+0xac>)
 8000d06:	f003 f966 	bl	8003fd6 <HAL_UART_Receive_IT>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40013800 	.word	0x40013800
 8000d18:	200002c4 	.word	0x200002c4
 8000d1c:	200002c0 	.word	0x200002c0
 8000d20:	200002cc 	.word	0x200002cc
 8000d24:	200002c8 	.word	0x200002c8
 8000d28:	200002c9 	.word	0x200002c9
 8000d2c:	20000278 	.word	0x20000278

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <handle_BLE_DISC>:
    {"\r\nBLE_CONN\r\n", handle_BLE_CONN}
};

// Handles

void handle_BLE_DISC(void){
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = false;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <handle_BLE_DISC+0x14>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000034c 	.word	0x2000034c

08000d54 <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	flags.BLE_CONNECTED = true;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <handle_BLE_CONN+0x14>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2000034c 	.word	0x2000034c

08000d6c <handle_OK>:

void handle_OK(void){
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	flags.OK = true;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <handle_OK+0x14>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	70da      	strb	r2, [r3, #3]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000034c 	.word	0x2000034c

08000d84 <handle_ERR_CMD>:

void handle_ERR_CMD(void){
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	flags.ERR_CMD = true;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <handle_ERR_CMD+0x14>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	711a      	strb	r2, [r3, #4]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000034c 	.word	0x2000034c

08000d9c <handle_RSTING>:

void handle_RSTING(void){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	flags.RSTING = true;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <handle_RSTING+0x14>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	715a      	strb	r2, [r3, #5]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000034c 	.word	0x2000034c

08000db4 <handle_CONNECTING>:
void handle_CONNECTING(void){
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	flags.CONNECTING = true;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <handle_CONNECTING+0x14>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	719a      	strb	r2, [r3, #6]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000034c 	.word	0x2000034c

08000dcc <handle_RESTORING>:
void handle_RESTORING(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	flags.RESTORING = true;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <handle_RESTORING+0x14>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	71da      	strb	r2, [r3, #7]
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000034c 	.word	0x2000034c

08000de4 <process_trame_rx>:



// fonctions
void process_trame_rx(char* receive_buffer) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d025      	beq.n	8000e40 <process_trame_rx+0x5c>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e017      	b.n	8000e2a <process_trame_rx+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 8000dfa:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <process_trame_rx+0x64>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff f9a1 	bl	800014c <strcmp>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <process_trame_rx+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <process_trame_rx+0x64>)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4798      	blx	r3
				flags.UNKNOW_COMMAND = false;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <process_trame_rx+0x68>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	709a      	strb	r2, [r3, #2]
				return; // Optionnel : on quitte après exécution
 8000e22:	e00e      	b.n	8000e42 <process_trame_rx+0x5e>
		for (int i = 0; i < COMMAND_COUNT_RX; ++i) {
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	dde4      	ble.n	8000dfa <process_trame_rx+0x16>
			}
		}
		flags.UNKNOW_COMMAND = true;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <process_trame_rx+0x68>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	709a      	strb	r2, [r3, #2]
		strcpy(receive_buffer, unknow_command); //utile pr le debug
 8000e36:	4906      	ldr	r1, [pc, #24]	@ (8000e50 <process_trame_rx+0x6c>)
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f003 fec5 	bl	8004bc8 <strcpy>
		return;
 8000e3e:	e000      	b.n	8000e42 <process_trame_rx+0x5e>
		return;
 8000e40:	bf00      	nop
		}
}
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	2000034c 	.word	0x2000034c
 8000e50:	2000030c 	.word	0x2000030c

08000e54 <config_BLE>:

bool flag_timeout_err = false;


// config du module BLE
void config_BLE(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	BLE.RestoreDefaults();
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <config_BLE+0x74>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4798      	blx	r3
	wait_until_flag(&flags.RESTORING,BLE_TIMEOUT_MS);
 8000e5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e62:	481a      	ldr	r0, [pc, #104]	@ (8000ecc <config_BLE+0x78>)
 8000e64:	f000 f83c 	bl	8000ee0 <wait_until_flag>
	BLE.SetName(NAME);
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <config_BLE+0x74>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <config_BLE+0x7c>)
 8000e6e:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8000e70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e74:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <config_BLE+0x80>)
 8000e76:	f000 f833 	bl	8000ee0 <wait_until_flag>
	BLE.SetRole(BLE_ROLE);
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <config_BLE+0x74>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8000e82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e86:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <config_BLE+0x80>)
 8000e88:	f000 f82a 	bl	8000ee0 <wait_until_flag>
	BLE.SetAutoConnect(BLE_MAC_SERVEUR);  // MAC du drone
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <config_BLE+0x74>)
 8000e8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000e92:	4811      	ldr	r0, [pc, #68]	@ (8000ed8 <config_BLE+0x84>)
 8000e94:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8000e96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <config_BLE+0x80>)
 8000e9c:	f000 f820 	bl	8000ee0 <wait_until_flag>
	BLE.ScanStart();
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <config_BLE+0x74>)
 8000ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000ea6:	4798      	blx	r3
	wait_until_flag(&flags.OK,BLE_TIMEOUT_MS);
 8000ea8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <config_BLE+0x80>)
 8000eae:	f000 f817 	bl	8000ee0 <wait_until_flag>
	BLE.Reset();                 // Redémarre pour appliquer
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <config_BLE+0x74>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	4798      	blx	r3
	wait_until_flag(&flags.RSTING,BLE_TIMEOUT_MS);
 8000eb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <config_BLE+0x88>)
 8000ebe:	f000 f80f 	bl	8000ee0 <wait_until_flag>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000353 	.word	0x20000353
 8000ed0:	080057b8 	.word	0x080057b8
 8000ed4:	2000034f 	.word	0x2000034f
 8000ed8:	080057c8 	.word	0x080057c8
 8000edc:	20000351 	.word	0x20000351

08000ee0 <wait_until_flag>:

void wait_until_flag(volatile bool* flag, uint32_t timeout_ms) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8000eea:	f000 fb2d 	bl	8001548 <HAL_GetTick>
 8000eee:	60f8      	str	r0, [r7, #12]

    while (!(*flag)) {
 8000ef0:	e00d      	b.n	8000f0e <wait_until_flag+0x2e>
        if (HAL_GetTick() - start >= timeout_ms) {
 8000ef2:	f000 fb29 	bl	8001548 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d805      	bhi.n	8000f0e <wait_until_flag+0x2e>
            flag_timeout_err = true;      // Indique qu'un timeout s’est produit
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <wait_until_flag+0x50>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
            TIMEOUT_ERR_HANDLER();        // Fonction de traitement personnalisée
 8000f08:	f000 f814 	bl	8000f34 <TIMEOUT_ERR_HANDLER>
            return;                       // Sort de la fonction
 8000f0c:	e00d      	b.n	8000f2a <wait_until_flag+0x4a>
    while (!(*flag)) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f083 0301 	eor.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e9      	bne.n	8000ef2 <wait_until_flag+0x12>
        }
    }

    *flag = false;                        // Réinitialise le flag une fois traité
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
    flag_timeout_err = false;             // Tout s’est bien passé
 8000f24:	4b02      	ldr	r3, [pc, #8]	@ (8000f30 <wait_until_flag+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
}
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000354 	.word	0x20000354

08000f34 <TIMEOUT_ERR_HANDLER>:


void TIMEOUT_ERR_HANDLER(void){
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	//Ecrire ça plus tard
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <send_trame_if_necessary>:
#define FOOTER_BYTE 0x55

bool MUST_SEND_TRAME = false;
uint8_t trame[TRAME_SIZE];

void send_trame_if_necessary(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	if(flags.BLE_CONNECTED && MUST_SEND_TRAME){
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <send_trame_if_necessary+0x2c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <send_trame_if_necessary+0x28>
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <send_trame_if_necessary+0x30>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <send_trame_if_necessary+0x28>
		build_drone_trame(trame);
 8000f54:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <send_trame_if_necessary+0x34>)
 8000f56:	f000 f811 	bl	8000f7c <build_drone_trame>
		BLE.SendTrame(trame);
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <send_trame_if_necessary+0x38>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <send_trame_if_necessary+0x34>)
 8000f60:	4798      	blx	r3
		MUST_SEND_TRAME = false;
 8000f62:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <send_trame_if_necessary+0x30>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	}
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000034c 	.word	0x2000034c
 8000f70:	20000374 	.word	0x20000374
 8000f74:	20000378 	.word	0x20000378
 8000f78:	20000000 	.word	0x20000000

08000f7c <build_drone_trame>:

void build_drone_trame(uint8_t* buffer) {			//code la trame (plus opti que du texte : taille trame constante et rapidité)
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    uint8_t idx = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	75fb      	strb	r3, [r7, #23]

    buffer[idx++] = HEADER_BYTE;  // Header (convention)
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	75fa      	strb	r2, [r7, #23]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	22aa      	movs	r2, #170	@ 0xaa
 8000f96:	701a      	strb	r2, [r3, #0]

    // ADC data (2 octets chacun)
    for (int i = 0; i < ADC_NUM_CONVERSIONS; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e01c      	b.n	8000fd8 <build_drone_trame+0x5c>
        buffer[idx++] = (adcData[i] >> 8) & 0xFF;  // MSB
 8000f9e:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <build_drone_trame+0xbc>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	1c59      	adds	r1, r3, #1
 8000fae:	75f9      	strb	r1, [r7, #23]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
        buffer[idx++] = adcData[i] & 0xFF;         // LSB
 8000fba:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <build_drone_trame+0xbc>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	1c59      	adds	r1, r3, #1
 8000fc6:	75f9      	strb	r1, [r7, #23]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	440b      	add	r3, r1
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < ADC_NUM_CONVERSIONS; i++) {
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	dddf      	ble.n	8000f9e <build_drone_trame+0x22>
    }

    // GPIO data (1 octet chacun)
    for (int i = 0; i < GPIO_NUM_CONVERSIONS; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e019      	b.n	8001018 <build_drone_trame+0x9c>
        buffer[idx++] = gpioData[i];
 8000fe4:	4a15      	ldr	r2, [pc, #84]	@ (800103c <build_drone_trame+0xc0>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	75f9      	strb	r1, [r7, #23]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	440b      	add	r3, r1
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]
        if (gpioData[i]!=0){
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <build_drone_trame+0xc0>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <build_drone_trame+0x96>
        	gpioData[i]=0;
 8001008:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <build_drone_trame+0xc0>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2100      	movs	r1, #0
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < GPIO_NUM_CONVERSIONS; i++) {
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3301      	adds	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b04      	cmp	r3, #4
 800101c:	dde2      	ble.n	8000fe4 <build_drone_trame+0x68>
        }
    }

    buffer[idx++] = FOOTER_BYTE;  // Footer (convention)
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	75fa      	strb	r2, [r7, #23]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	2255      	movs	r2, #85	@ 0x55
 800102c:	701a      	strb	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000358 	.word	0x20000358
 800103c:	20000360 	.word	0x20000360

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_MspInit+0x5c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a14      	ldr	r2, [pc, #80]	@ (800109c <HAL_MspInit+0x5c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_MspInit+0x5c>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_MspInit+0x5c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_MspInit+0x5c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_MspInit+0x5c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_MspInit+0x60>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_MspInit+0x60>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000

080010a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a2c      	ldr	r2, [pc, #176]	@ (8001170 <HAL_ADC_MspInit+0xcc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d151      	bne.n	8001168 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a24      	ldr	r2, [pc, #144]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <HAL_ADC_MspInit+0xd0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80010f4:	231e      	movs	r3, #30
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	481d      	ldr	r0, [pc, #116]	@ (8001178 <HAL_ADC_MspInit+0xd4>)
 8001104:	f001 fb26 	bl	8002754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001108:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 800110a:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <HAL_ADC_MspInit+0xdc>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001132:	2220      	movs	r2, #32
 8001134:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480f      	ldr	r0, [pc, #60]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 800113e:	f001 f867 	bl	8002210 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001148:	f7ff fdf2 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001150:	621a      	str	r2, [r3, #32]
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_ADC_MspInit+0xd8>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2103      	movs	r1, #3
 800115c:	2012      	movs	r0, #18
 800115e:	f001 f820 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f001 f839 	bl	80021da <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40012400 	.word	0x40012400
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800
 800117c:	200001a4 	.word	0x200001a4
 8001180:	40020008 	.word	0x40020008

08001184 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a16      	ldr	r2, [pc, #88]	@ (80011ec <HAL_TIM_Base_MspInit+0x68>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10c      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ae:	e018      	b.n	80011e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_TIM_Base_MspInit+0x70>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_TIM_Base_MspInit+0x6c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2101      	movs	r1, #1
 80011d6:	201e      	movs	r0, #30
 80011d8:	f000 ffe3 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011dc:	201e      	movs	r0, #30
 80011de:	f000 fffc 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40000400 	.word	0x40000400
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40000800 	.word	0x40000800

080011f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <HAL_UART_MspInit+0x9c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d139      	bne.n	800128c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0xa0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	480f      	ldr	r0, [pc, #60]	@ (800129c <HAL_UART_MspInit+0xa4>)
 800125e:	f001 fa79 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <HAL_UART_MspInit+0xa4>)
 8001278:	f001 fa6c 	bl	8002754 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2025      	movs	r0, #37	@ 0x25
 8001282:	f000 ff8e 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001286:	2025      	movs	r0, #37	@ 0x25
 8001288:	f000 ffa7 	bl	80021da <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013800 	.word	0x40013800
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 f918 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	//back offset
	gpioData[0] = 1;
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <EXTI1_IRQHandler+0x14>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001302:	2002      	movs	r0, #2
 8001304:	f001 fbaa 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000360 	.word	0x20000360

08001310 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	//left offset
	gpioData[1] = 1;
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <EXTI2_IRQHandler+0x14>)
 8001316:	2201      	movs	r2, #1
 8001318:	605a      	str	r2, [r3, #4]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800131a:	2004      	movs	r0, #4
 800131c:	f001 fb9e 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000360 	.word	0x20000360

08001328 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//front offset
	gpioData[2] = 1;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <EXTI3_IRQHandler+0x14>)
 800132e:	2201      	movs	r2, #1
 8001330:	609a      	str	r2, [r3, #8]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001332:	2008      	movs	r0, #8
 8001334:	f001 fb92 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000360 	.word	0x20000360

08001340 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//right offset
	gpioData[3] = 1;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <EXTI4_IRQHandler+0x14>)
 8001346:	2201      	movs	r2, #1
 8001348:	60da      	str	r2, [r3, #12]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800134a:	2010      	movs	r0, #16
 800134c:	f001 fb86 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000360 	.word	0x20000360

08001358 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Channel1_IRQHandler+0x10>)
 800135e:	f001 f8c5 	bl	80024ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001a4 	.word	0x200001a4

0800136c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <ADC1_2_IRQHandler+0x10>)
 8001372:	f000 faa9 	bl	80018c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000174 	.word	0x20000174

08001380 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//emergency stop
	gpioData[4] = 1;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <EXTI9_5_IRQHandler+0x14>)
 8001386:	2201      	movs	r2, #1
 8001388:	611a      	str	r2, [r3, #16]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800138a:	2020      	movs	r0, #32
 800138c:	f001 fb66 	bl	8002a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000360 	.word	0x20000360

08001398 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	//Timer qui va envoyer régulièrement les trames au drone
	if(flags.BLE_CONNECTED){
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <TIM4_IRQHandler+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <TIM4_IRQHandler+0x12>
		MUST_SEND_TRAME = true;
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <TIM4_IRQHandler+0x20>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013aa:	4804      	ldr	r0, [pc, #16]	@ (80013bc <TIM4_IRQHandler+0x24>)
 80013ac:	f002 f9e0 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000034c 	.word	0x2000034c
 80013b8:	20000374 	.word	0x20000374
 80013bc:	20000230 	.word	0x20000230

080013c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <USART1_IRQHandler+0x10>)
 80013c6:	f002 fe2b 	bl	8004020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000278 	.word	0x20000278

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f003 fbb4 	bl	8004b70 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20005000 	.word	0x20005000
 8001434:	00000400 	.word	0x00000400
 8001438:	20000388 	.word	0x20000388
 800143c:	200004d8 	.word	0x200004d8

08001440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff fff8 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	@ (8001480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001452:	490c      	ldr	r1, [pc, #48]	@ (8001484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001454:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001468:	4c09      	ldr	r4, [pc, #36]	@ (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f003 fb81 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f7ff f9c1 	bl	8000800 <main>
  bx lr
 800147e:	4770      	bx	lr
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001488:	0800585c 	.word	0x0800585c
  ldr r2, =_sbss
 800148c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001490:	200004d8 	.word	0x200004d8

08001494 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <CAN1_RX1_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 fe6f 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fdc4 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fe87 	bl	80021f6 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 fe4f 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000fc 	.word	0x200000fc
 800151c:	20000104 	.word	0x20000104
 8001520:	20000100 	.word	0x20000100

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000104 	.word	0x20000104
 8001544:	2000038c 	.word	0x2000038c

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	@ (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	2000038c 	.word	0x2000038c

0800155c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0be      	b.n	80016fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fd82 	bl	80010a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fbc7 	bl	8001d34 <ADC_ConversionStop_Disable>
 80015a6:	4603      	mov	r3, r0
 80015a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8099 	bne.w	80016ea <HAL_ADC_Init+0x18e>
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 8095 	bne.w	80016ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015c8:	f023 0302 	bic.w	r3, r3, #2
 80015cc:	f043 0202 	orr.w	r2, r3, #2
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b1b      	ldrb	r3, [r3, #12]
 80015e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015f4:	d003      	beq.n	80015fe <HAL_ADC_Init+0xa2>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d102      	bne.n	8001604 <HAL_ADC_Init+0xa8>
 80015fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001602:	e000      	b.n	8001606 <HAL_ADC_Init+0xaa>
 8001604:	2300      	movs	r3, #0
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7d1b      	ldrb	r3, [r3, #20]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d119      	bne.n	8001648 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	3b01      	subs	r3, #1
 8001622:	035a      	lsls	r2, r3, #13
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e00b      	b.n	8001648 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001634:	f043 0220 	orr.w	r2, r3, #32
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <HAL_ADC_Init+0x1a8>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	430b      	orrs	r3, r1
 800166e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001678:	d003      	beq.n	8001682 <HAL_ADC_Init+0x126>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d104      	bne.n	800168c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	3b01      	subs	r3, #1
 8001688:	051b      	lsls	r3, r3, #20
 800168a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	430a      	orrs	r2, r1
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_ADC_Init+0x1ac>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10b      	bne.n	80016c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c6:	e018      	b.n	80016fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f023 0312 	bic.w	r3, r3, #18
 80016d0:	f043 0210 	orr.w	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e8:	e007      	b.n	80016fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ee:	f043 0210 	orr.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	ffe1f7fd 	.word	0xffe1f7fd
 8001708:	ff1f0efe 	.word	0xff1f0efe

0800170c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a64      	ldr	r2, [pc, #400]	@ (80018b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d004      	beq.n	8001730 <HAL_ADC_Start_DMA+0x24>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a63      	ldr	r2, [pc, #396]	@ (80018b8 <HAL_ADC_Start_DMA+0x1ac>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d106      	bne.n	800173e <HAL_ADC_Start_DMA+0x32>
 8001730:	4b60      	ldr	r3, [pc, #384]	@ (80018b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 80b3 	bne.w	80018a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADC_Start_DMA+0x40>
 8001748:	2302      	movs	r3, #2
 800174a:	e0ae      	b.n	80018aa <HAL_ADC_Start_DMA+0x19e>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fa93 	bl	8001c80 <ADC_Enable>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 809a 	bne.w	800189a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a4e      	ldr	r2, [pc, #312]	@ (80018b8 <HAL_ADC_Start_DMA+0x1ac>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d105      	bne.n	8001790 <HAL_ADC_Start_DMA+0x84>
 8001784:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d115      	bne.n	80017bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d026      	beq.n	80017f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ba:	e01d      	b.n	80017f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a39      	ldr	r2, [pc, #228]	@ (80018b4 <HAL_ADC_Start_DMA+0x1a8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d004      	beq.n	80017dc <HAL_ADC_Start_DMA+0xd0>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a38      	ldr	r2, [pc, #224]	@ (80018b8 <HAL_ADC_Start_DMA+0x1ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10d      	bne.n	80017f8 <HAL_ADC_Start_DMA+0xec>
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <HAL_ADC_Start_DMA+0x1a8>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	f023 0206 	bic.w	r2, r3, #6
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001810:	e002      	b.n	8001818 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <HAL_ADC_Start_DMA+0x1b0>)
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <HAL_ADC_Start_DMA+0x1b4>)
 800182e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001836:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0202 	mvn.w	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001850:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a18      	ldr	r0, [r3, #32]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	334c      	adds	r3, #76	@ 0x4c
 800185c:	4619      	mov	r1, r3
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f000 fd2f 	bl	80022c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001870:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001874:	d108      	bne.n	8001888 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001884:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001886:	e00f      	b.n	80018a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001896:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001898:	e006      	b.n	80018a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80018a2:	e001      	b.n	80018a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40012400 	.word	0x40012400
 80018b8:	40012800 	.word	0x40012800
 80018bc:	08001db7 	.word	0x08001db7
 80018c0:	08001e33 	.word	0x08001e33
 80018c4:	08001e4f 	.word	0x08001e4f

080018c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03e      	beq.n	8001968 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d039      	beq.n	8001968 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001916:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800191a:	d11d      	bne.n	8001958 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001920:	2b00      	cmp	r3, #0
 8001922:	d119      	bne.n	8001958 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0220 	bic.w	r2, r2, #32
 8001932:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f874 	bl	8001a46 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0212 	mvn.w	r2, #18
 8001966:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d04d      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d048      	beq.n	8001a0e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800199e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019a2:	d012      	beq.n	80019ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d125      	bne.n	80019fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019c0:	d11d      	bne.n	80019fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 faee 	bl	8001fe0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 020c 	mvn.w	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f81b 	bl	8001a6a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0201 	mvn.w	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x20>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0dc      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1da>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d81c      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b05      	subs	r3, #5
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af8:	e03c      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d81c      	bhi.n	8001b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	@ 0x23
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4019      	ands	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b23      	subs	r3, #35	@ 0x23
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b3a:	e01b      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b41      	subs	r3, #65	@ 0x41
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	@ 0x41
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d91c      	bls.n	8001bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6898      	ldr	r0, [r3, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e019      	b.n	8001bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4019      	ands	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6898      	ldr	r0, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d003      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d132      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d125      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d126      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d11a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a13      	ldr	r2, [pc, #76]	@ (8001c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9a      	lsrs	r2, r3, #18
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x1b2>
 8001c4e:	e007      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012400 	.word	0x40012400
 8001c78:	200000fc 	.word	0x200000fc
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d040      	beq.n	8001d20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <ADC_Enable+0xac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <ADC_Enable+0xb0>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cbc:	e002      	b.n	8001cc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cca:	f7ff fc3d 	bl	8001548 <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cd0:	e01f      	b.n	8001d12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd2:	f7ff fc39 	bl	8001548 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d918      	bls.n	8001d12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d011      	beq.n	8001d12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e007      	b.n	8001d22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d1d8      	bne.n	8001cd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200000fc 	.word	0x200000fc
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d12e      	bne.n	8001dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5e:	f7ff fbf3 	bl	8001548 <HAL_GetTick>
 8001d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d64:	e01b      	b.n	8001d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d66:	f7ff fbef 	bl	8001548 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d914      	bls.n	8001d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d10d      	bne.n	8001d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e007      	b.n	8001dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d0dc      	beq.n	8001d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d127      	bne.n	8001e20 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001de6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dea:	d115      	bne.n	8001e18 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff fe14 	bl	8001a46 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e1e:	e004      	b.n	8001e2a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fe09 	bl	8001a58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fe01 	bl	8001a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e097      	b.n	8001fd2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff42 	bl	8001d34 <ADC_ConversionStop_Disable>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fee3 	bl	8001c80 <ADC_Enable>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 8081 	bne.w	8001fc8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ece:	f023 0302 	bic.w	r3, r3, #2
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_ADCEx_Calibration_Start+0x158>)
 8001edc:	681c      	ldr	r4, [r3, #0]
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f001 faa4 	bl	800342c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001eea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001eec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001eee:	e002      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f0c:	f7ff fb1c 	bl	8001548 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f12:	e01b      	b.n	8001f4c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f14:	f7ff fb18 	bl	8001548 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d914      	bls.n	8001f4c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f023 0312 	bic.w	r3, r3, #18
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e042      	b.n	8001fd2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1dc      	bne.n	8001f14 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0204 	orr.w	r2, r2, #4
 8001f68:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f6a:	f7ff faed 	bl	8001548 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f70:	e01b      	b.n	8001faa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f72:	f7ff fae9 	bl	8001548 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b0a      	cmp	r3, #10
 8001f7e:	d914      	bls.n	8001faa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	f023 0312 	bic.w	r3, r3, #18
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e013      	b.n	8001fd2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1dc      	bne.n	8001f72 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	f023 0303 	bic.w	r3, r3, #3
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200000fc 	.word	0x200000fc

08001fe0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4906      	ldr	r1, [pc, #24]	@ (800208c <__NVIC_EnableIRQ+0x34>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	@ (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	@ (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff90 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff2d 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff42 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff90 	bl	80020e4 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5f 	bl	8002090 <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff35 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e043      	b.n	80022ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_DMA_Init+0xa8>)
 800222e:	4413      	add	r3, r2
 8002230:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_DMA_Init+0xac>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <HAL_DMA_Init+0xb0>)
 8002242:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800225a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800225e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	bffdfff8 	.word	0xbffdfff8
 80022bc:	cccccccd 	.word	0xcccccccd
 80022c0:	40020000 	.word	0x40020000

080022c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Start_IT+0x20>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e04b      	b.n	800237c <HAL_DMA_Start_IT+0xb8>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13a      	bne.n	800236e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f9eb 	bl	80026f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 020e 	orr.w	r2, r2, #14
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e00f      	b.n	800235c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0204 	bic.w	r2, r2, #4
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 020a 	orr.w	r2, r2, #10
 800235a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e020      	b.n	80023f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 020e 	bic.w	r2, r2, #14
 80023bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d005      	beq.n	8002420 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e051      	b.n	80024c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_DMA_Abort_IT+0xd4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d029      	beq.n	800249e <HAL_DMA_Abort_IT+0xa2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <HAL_DMA_Abort_IT+0xd8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort_IT+0x9e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1f      	ldr	r2, [pc, #124]	@ (80024d8 <HAL_DMA_Abort_IT+0xdc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01a      	beq.n	8002494 <HAL_DMA_Abort_IT+0x98>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1e      	ldr	r2, [pc, #120]	@ (80024dc <HAL_DMA_Abort_IT+0xe0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d012      	beq.n	800248e <HAL_DMA_Abort_IT+0x92>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_DMA_Abort_IT+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00a      	beq.n	8002488 <HAL_DMA_Abort_IT+0x8c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_DMA_Abort_IT+0xe8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <HAL_DMA_Abort_IT+0x86>
 800247c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002480:	e00e      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002482:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002486:	e00b      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800248c:	e008      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	e005      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002498:	e002      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800249a:	2310      	movs	r3, #16
 800249c:	e000      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800249e:	2301      	movs	r3, #1
 80024a0:	4a11      	ldr	r2, [pc, #68]	@ (80024e8 <HAL_DMA_Abort_IT+0xec>)
 80024a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    } 
  }
  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40020008 	.word	0x40020008
 80024d4:	4002001c 	.word	0x4002001c
 80024d8:	40020030 	.word	0x40020030
 80024dc:	40020044 	.word	0x40020044
 80024e0:	40020058 	.word	0x40020058
 80024e4:	4002006c 	.word	0x4002006c
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	2204      	movs	r2, #4
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d04f      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xc8>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a66      	ldr	r2, [pc, #408]	@ (80026dc <HAL_DMA_IRQHandler+0x1f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d029      	beq.n	800259a <HAL_DMA_IRQHandler+0xae>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_DMA_IRQHandler+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <HAL_DMA_IRQHandler+0xaa>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a63      	ldr	r2, [pc, #396]	@ (80026e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0xa4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a62      	ldr	r2, [pc, #392]	@ (80026e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d012      	beq.n	800258a <HAL_DMA_IRQHandler+0x9e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a60      	ldr	r2, [pc, #384]	@ (80026ec <HAL_DMA_IRQHandler+0x200>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x98>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5f      	ldr	r2, [pc, #380]	@ (80026f0 <HAL_DMA_IRQHandler+0x204>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d102      	bne.n	800257e <HAL_DMA_IRQHandler+0x92>
 8002578:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800257c:	e00e      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800257e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002582:	e00b      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002584:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002588:	e008      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800258a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800258e:	e005      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002594:	e002      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002596:	2340      	movs	r3, #64	@ 0x40
 8002598:	e000      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800259a:	2304      	movs	r3, #4
 800259c:	4a55      	ldr	r2, [pc, #340]	@ (80026f4 <HAL_DMA_IRQHandler+0x208>)
 800259e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8094 	beq.w	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	e08e      	b.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	2202      	movs	r2, #2
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d056      	beq.n	8002672 <HAL_DMA_IRQHandler+0x186>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d051      	beq.n	8002672 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020a 	bic.w	r2, r2, #10
 80025ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a38      	ldr	r2, [pc, #224]	@ (80026dc <HAL_DMA_IRQHandler+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d029      	beq.n	8002652 <HAL_DMA_IRQHandler+0x166>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a37      	ldr	r2, [pc, #220]	@ (80026e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0x162>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a35      	ldr	r2, [pc, #212]	@ (80026e4 <HAL_DMA_IRQHandler+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x15c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a34      	ldr	r2, [pc, #208]	@ (80026e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0x156>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a32      	ldr	r2, [pc, #200]	@ (80026ec <HAL_DMA_IRQHandler+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_DMA_IRQHandler+0x150>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <HAL_DMA_IRQHandler+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_DMA_IRQHandler+0x14a>
 8002630:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002634:	e00e      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002636:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800263a:	e00b      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 800263c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002640:	e008      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002646:	e005      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800264c:	e002      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 800264e:	2320      	movs	r3, #32
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002652:	2302      	movs	r3, #2
 8002654:	4a27      	ldr	r2, [pc, #156]	@ (80026f4 <HAL_DMA_IRQHandler+0x208>)
 8002656:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d034      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002670:	e02f      	b.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	2208      	movs	r2, #8
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d028      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    }
  }
  return;
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
}
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40020008 	.word	0x40020008
 80026e0:	4002001c 	.word	0x4002001c
 80026e4:	40020030 	.word	0x40020030
 80026e8:	40020044 	.word	0x40020044
 80026ec:	40020058 	.word	0x40020058
 80026f0:	4002006c 	.word	0x4002006c
 80026f4:	40020000 	.word	0x40020000

080026f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d108      	bne.n	8002738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002736:	e007      	b.n	8002748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b08b      	sub	sp, #44	@ 0x2c
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e169      	b.n	8002a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002768:	2201      	movs	r2, #1
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 8158 	bne.w	8002a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a9a      	ldr	r2, [pc, #616]	@ (80029f4 <HAL_GPIO_Init+0x2a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 8002790:	4a98      	ldr	r2, [pc, #608]	@ (80029f4 <HAL_GPIO_Init+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d875      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 8002796:	4a98      	ldr	r2, [pc, #608]	@ (80029f8 <HAL_GPIO_Init+0x2a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d058      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 800279c:	4a96      	ldr	r2, [pc, #600]	@ (80029f8 <HAL_GPIO_Init+0x2a4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d86f      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027a2:	4a96      	ldr	r2, [pc, #600]	@ (80029fc <HAL_GPIO_Init+0x2a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d052      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027a8:	4a94      	ldr	r2, [pc, #592]	@ (80029fc <HAL_GPIO_Init+0x2a8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d869      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ae:	4a94      	ldr	r2, [pc, #592]	@ (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04c      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027b4:	4a92      	ldr	r2, [pc, #584]	@ (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d863      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ba:	4a92      	ldr	r2, [pc, #584]	@ (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d046      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027c0:	4a90      	ldr	r2, [pc, #576]	@ (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d85d      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d82a      	bhi.n	8002820 <HAL_GPIO_Init+0xcc>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d859      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ce:	a201      	add	r2, pc, #4	@ (adr r2, 80027d4 <HAL_GPIO_Init+0x80>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	0800284f 	.word	0x0800284f
 80027d8:	08002829 	.word	0x08002829
 80027dc:	0800283b 	.word	0x0800283b
 80027e0:	0800287d 	.word	0x0800287d
 80027e4:	08002883 	.word	0x08002883
 80027e8:	08002883 	.word	0x08002883
 80027ec:	08002883 	.word	0x08002883
 80027f0:	08002883 	.word	0x08002883
 80027f4:	08002883 	.word	0x08002883
 80027f8:	08002883 	.word	0x08002883
 80027fc:	08002883 	.word	0x08002883
 8002800:	08002883 	.word	0x08002883
 8002804:	08002883 	.word	0x08002883
 8002808:	08002883 	.word	0x08002883
 800280c:	08002883 	.word	0x08002883
 8002810:	08002883 	.word	0x08002883
 8002814:	08002883 	.word	0x08002883
 8002818:	08002831 	.word	0x08002831
 800281c:	08002845 	.word	0x08002845
 8002820:	4a79      	ldr	r2, [pc, #484]	@ (8002a08 <HAL_GPIO_Init+0x2b4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002826:	e02c      	b.n	8002882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e029      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	3304      	adds	r3, #4
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e024      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	3308      	adds	r3, #8
 8002840:	623b      	str	r3, [r7, #32]
          break;
 8002842:	e01f      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	330c      	adds	r3, #12
 800284a:	623b      	str	r3, [r7, #32]
          break;
 800284c:	e01a      	b.n	8002884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002856:	2304      	movs	r3, #4
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e013      	b.n	8002884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002864:	2308      	movs	r3, #8
 8002866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	611a      	str	r2, [r3, #16]
          break;
 800286e:	e009      	b.n	8002884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002870:	2308      	movs	r3, #8
 8002872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	615a      	str	r2, [r3, #20]
          break;
 800287a:	e003      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
          break;
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x130>
          break;
 8002882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2bff      	cmp	r3, #255	@ 0xff
 8002888:	d801      	bhi.n	800288e <HAL_GPIO_Init+0x13a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_Init+0x13e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2bff      	cmp	r3, #255	@ 0xff
 8002898:	d802      	bhi.n	80028a0 <HAL_GPIO_Init+0x14c>
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x152>
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	3b08      	subs	r3, #8
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	210f      	movs	r1, #15
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80b1 	beq.w	8002a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d4:	4b4d      	ldr	r3, [pc, #308]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028ec:	4a48      	ldr	r2, [pc, #288]	@ (8002a10 <HAL_GPIO_Init+0x2bc>)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a40      	ldr	r2, [pc, #256]	@ (8002a14 <HAL_GPIO_Init+0x2c0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a18 <HAL_GPIO_Init+0x2c4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00d      	beq.n	800293c <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3e      	ldr	r2, [pc, #248]	@ (8002a1c <HAL_GPIO_Init+0x2c8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <HAL_GPIO_Init+0x1e4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a20 <HAL_GPIO_Init+0x2cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_GPIO_Init+0x1e0>
 8002930:	2303      	movs	r3, #3
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002934:	2304      	movs	r3, #4
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002940:	2300      	movs	r3, #0
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002952:	492f      	ldr	r1, [pc, #188]	@ (8002a10 <HAL_GPIO_Init+0x2bc>)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	492c      	ldr	r1, [pc, #176]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4928      	ldr	r1, [pc, #160]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002994:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4922      	ldr	r1, [pc, #136]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	491e      	ldr	r1, [pc, #120]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4918      	ldr	r1, [pc, #96]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4914      	ldr	r1, [pc, #80]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e021      	b.n	8002a36 <HAL_GPIO_Init+0x2e2>
 80029f2:	bf00      	nop
 80029f4:	10320000 	.word	0x10320000
 80029f8:	10310000 	.word	0x10310000
 80029fc:	10220000 	.word	0x10220000
 8002a00:	10210000 	.word	0x10210000
 8002a04:	10120000 	.word	0x10120000
 8002a08:	10110000 	.word	0x10110000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010800 	.word	0x40010800
 8002a18:	40010c00 	.word	0x40010c00
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_GPIO_Init+0x304>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4909      	ldr	r1, [pc, #36]	@ (8002a58 <HAL_GPIO_Init+0x304>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	3301      	adds	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ae8e 	bne.w	8002768 <HAL_GPIO_Init+0x14>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	372c      	adds	r7, #44	@ 0x2c
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a72:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f806 	bl	8002a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e272      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8087 	beq.w	8002bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac0:	4b92      	ldr	r3, [pc, #584]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002acc:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d112      	bne.n	8002afe <HAL_RCC_OscConfig+0x5e>
 8002ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x12c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d168      	bne.n	8002bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e24c      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x76>
 8002b08:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7f      	ldr	r2, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e02e      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7a      	ldr	r2, [pc, #488]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b78      	ldr	r3, [pc, #480]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a77      	ldr	r2, [pc, #476]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e01d      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0xbc>
 8002b42:	4b72      	ldr	r3, [pc, #456]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a71      	ldr	r2, [pc, #452]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6a      	ldr	r2, [pc, #424]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b68      	ldr	r3, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a67      	ldr	r2, [pc, #412]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fce4 	bl	8001548 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe fce0 	bl	8001548 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e200      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b5d      	ldr	r3, [pc, #372]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe4>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fcd0 	bl	8001548 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fccc 	bl	8001548 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1ec      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x10c>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bda:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002be6:	4b49      	ldr	r3, [pc, #292]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x18c>
 8002bf2:	4b46      	ldr	r3, [pc, #280]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x176>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e1c0      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4939      	ldr	r1, [pc, #228]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e03a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b36      	ldr	r3, [pc, #216]	@ (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc85 	bl	8001548 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe fc81 	bl	8001548 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1a1      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4927      	ldr	r1, [pc, #156]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	4b26      	ldr	r3, [pc, #152]	@ (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fc64 	bl	8001548 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fc60 	bl	8001548 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e180      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03a      	beq.n	8002d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d019      	beq.n	8002cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fc44 	bl	8001548 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fc40 	bl	8001548 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e160      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f000 face 	bl	8003284 <RCC_Delay>
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_RCC_OscConfig+0x274>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fc2a 	bl	8001548 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	e00f      	b.n	8002d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fc26 	bl	8001548 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e146      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	42420000 	.word	0x42420000
 8002d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b92      	ldr	r3, [pc, #584]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e9      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80a6 	beq.w	8002e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b8b      	ldr	r3, [pc, #556]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b88      	ldr	r3, [pc, #544]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4a87      	ldr	r2, [pc, #540]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	61d3      	str	r3, [r2, #28]
 8002d4e:	4b85      	ldr	r3, [pc, #532]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	4b82      	ldr	r3, [pc, #520]	@ (8002f68 <HAL_RCC_OscConfig+0x4c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f68 <HAL_RCC_OscConfig+0x4c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f68 <HAL_RCC_OscConfig+0x4c8>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fbe7 	bl	8001548 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7fe fbe3 	bl	8001548 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	@ 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e103      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	4b75      	ldr	r3, [pc, #468]	@ (8002f68 <HAL_RCC_OscConfig+0x4c8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x312>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x334>
 8002dba:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a69      	ldr	r2, [pc, #420]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a66      	ldr	r2, [pc, #408]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x356>
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a60      	ldr	r2, [pc, #384]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a5d      	ldr	r2, [pc, #372]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002df6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	4b58      	ldr	r3, [pc, #352]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a57      	ldr	r2, [pc, #348]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fb97 	bl	8001548 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fb93 	bl	8001548 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0b1      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x37e>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fb81 	bl	8001548 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fb7d 	bl	8001548 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e09b      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b40      	ldr	r3, [pc, #256]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b3c      	ldr	r3, [pc, #240]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a3b      	ldr	r2, [pc, #236]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e88:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d061      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d146      	bne.n	8002f2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fb51 	bl	8001548 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fb4d 	bl	8001548 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e06d      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebc:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4921      	ldr	r1, [pc, #132]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a19      	ldr	r1, [r3, #32]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	491b      	ldr	r1, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe fb21 	bl	8001548 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe fb1d 	bl	8001548 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e03d      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46a>
 8002f28:	e035      	b.n	8002f96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fb0a 	bl	8001548 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fb06 	bl	8001548 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e026      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x498>
 8002f56:	e01e      	b.n	8002f96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e019      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x500>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d0      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d910      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b67      	ldr	r3, [pc, #412]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4965      	ldr	r1, [pc, #404]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b63      	ldr	r3, [pc, #396]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b8      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003000:	4b59      	ldr	r3, [pc, #356]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a58      	ldr	r2, [pc, #352]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800300a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003018:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a52      	ldr	r2, [pc, #328]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b50      	ldr	r3, [pc, #320]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	494d      	ldr	r1, [pc, #308]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d040      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b47      	ldr	r3, [pc, #284]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d115      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e073      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06b      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4936      	ldr	r1, [pc, #216]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003094:	f7fe fa58 	bl	8001548 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309c:	f7fe fa54 	bl	8001548 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e053      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 020c 	and.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1eb      	bne.n	800309c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c4:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d210      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	4922      	ldr	r1, [pc, #136]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e032      	b.n	800315a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4916      	ldr	r1, [pc, #88]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	490e      	ldr	r1, [pc, #56]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003132:	f000 f821 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 8003136:	4602      	mov	r2, r0
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	490a      	ldr	r1, [pc, #40]	@ (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	5ccb      	ldrb	r3, [r1, r3]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <HAL_RCC_ClockConfig+0x1cc>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCC_ClockConfig+0x1d0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f9b6 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40022000 	.word	0x40022000
 8003168:	40021000 	.word	0x40021000
 800316c:	080057d8 	.word	0x080057d8
 8003170:	200000fc 	.word	0x200000fc
 8003174:	20000100 	.word	0x20000100

08003178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <HAL_RCC_GetSysClockFreq+0x94>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x30>
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x36>
 80031a6:	e027      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x98>)
 80031aa:	613b      	str	r3, [r7, #16]
      break;
 80031ac:	e027      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0c9b      	lsrs	r3, r3, #18
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <HAL_RCC_GetSysClockFreq+0x94>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0c5b      	lsrs	r3, r3, #17
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x98>)
 80031da:	fb03 f202 	mul.w	r2, r3, r2
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e004      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	613b      	str	r3, [r7, #16]
      break;
 80031f6:	e002      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fa:	613b      	str	r3, [r7, #16]
      break;
 80031fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fe:	693b      	ldr	r3, [r7, #16]
}
 8003200:	4618      	mov	r0, r3
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	007a1200 	.word	0x007a1200
 8003214:	080057f0 	.word	0x080057f0
 8003218:	08005800 	.word	0x08005800
 800321c:	003d0900 	.word	0x003d0900

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b02      	ldr	r3, [pc, #8]	@ (8003230 <HAL_RCC_GetHCLKFreq+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	200000fc 	.word	0x200000fc

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003238:	f7ff fff2 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	080057e8 	.word	0x080057e8

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003260:	f7ff ffde 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0adb      	lsrs	r3, r3, #11
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	080057e8 	.word	0x080057e8

08003284 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <RCC_Delay+0x34>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <RCC_Delay+0x38>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0a5b      	lsrs	r3, r3, #9
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032a0:	bf00      	nop
  }
  while (Delay --);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	60fa      	str	r2, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f9      	bne.n	80032a0 <RCC_Delay+0x1c>
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	200000fc 	.word	0x200000fc
 80032bc:	10624dd3 	.word	0x10624dd3

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d07d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	61d3      	str	r3, [r2, #28]
 80032f8:	4b49      	ldr	r3, [pc, #292]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b46      	ldr	r3, [pc, #280]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d118      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003314:	4b43      	ldr	r3, [pc, #268]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a42      	ldr	r2, [pc, #264]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003320:	f7fe f912 	bl	8001548 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fe f90e 	bl	8001548 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e06d      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b3a      	ldr	r3, [pc, #232]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003346:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02e      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d027      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003364:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800336c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336e:	4b2e      	ldr	r3, [pc, #184]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003374:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800337a:	4a29      	ldr	r2, [pc, #164]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d014      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe f8dd 	bl	8001548 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe f8d9 	bl	8001548 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e036      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4917      	ldr	r1, [pc, #92]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	490b      	ldr	r1, [pc, #44]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	4904      	ldr	r1, [pc, #16]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
 8003428:	42420440 	.word	0x42420440

0800342c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b10      	cmp	r3, #16
 8003452:	f200 808a 	bhi.w	800356a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d045      	beq.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d075      	beq.n	800354e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003462:	e082      	b.n	800356a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003464:	4b46      	ldr	r3, [pc, #280]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800346a:	4b45      	ldr	r3, [pc, #276]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07b      	beq.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0c9b      	lsrs	r3, r3, #18
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a41      	ldr	r2, [pc, #260]	@ (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d015      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800348e:	4b3c      	ldr	r3, [pc, #240]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	0c5b      	lsrs	r3, r3, #17
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	4a3b      	ldr	r2, [pc, #236]	@ (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80034a8:	4a38      	ldr	r2, [pc, #224]	@ (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	e004      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4a34      	ldr	r2, [pc, #208]	@ (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d0:	d102      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	61bb      	str	r3, [r7, #24]
      break;
 80034d6:	e04a      	b.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
      break;
 80034e6:	e042      	b.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034e8:	4b25      	ldr	r3, [pc, #148]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f8:	d108      	bne.n	800350c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e01f      	b.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003516:	d109      	bne.n	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003524:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e00f      	b.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003536:	d11c      	bne.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003538:	4b11      	ldr	r3, [pc, #68]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d016      	beq.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003544:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003548:	61bb      	str	r3, [r7, #24]
      break;
 800354a:	e012      	b.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800354c:	e011      	b.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800354e:	f7ff fe85 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0b9b      	lsrs	r3, r3, #14
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	61bb      	str	r3, [r7, #24]
      break;
 8003568:	e004      	b.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003572:	bf00      	nop
    }
  }
  return (frequency);
 8003574:	69bb      	ldr	r3, [r7, #24]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	08005804 	.word	0x08005804
 8003588:	08005814 	.word	0x08005814
 800358c:	007a1200 	.word	0x007a1200
 8003590:	003d0900 	.word	0x003d0900
 8003594:	aaaaaaab 	.word	0xaaaaaaab

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e041      	b.n	800362e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fde0 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 faae 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <HAL_TIM_Base_Start+0x88>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_Base_Start+0x48>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366a:	d009      	beq.n	8003680 <HAL_TIM_Base_Start+0x48>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a14      	ldr	r2, [pc, #80]	@ (80036c4 <HAL_TIM_Base_Start+0x8c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_Base_Start+0x48>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a13      	ldr	r2, [pc, #76]	@ (80036c8 <HAL_TIM_Base_Start+0x90>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d010      	beq.n	80036b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	e007      	b.n	80036b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e03a      	b.n	800375a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <HAL_TIM_Base_Start_IT+0x98>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370e:	d009      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <HAL_TIM_Base_Start_IT+0x9c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x58>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <HAL_TIM_Base_Start_IT+0xa0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d010      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003746:	e007      	b.n	8003758 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d020      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0202 	mvn.w	r2, #2
 80037a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9a1 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f994 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9a3 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0204 	mvn.w	r2, #4
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f97b 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f96e 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f97d 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f955 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f948 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f957 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0210 	mvn.w	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f92f 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f922 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f931 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0201 	mvn.w	r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f901 	bl	8003ade <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fa87 	bl	8003e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f901 	bl	8003b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0220 	mvn.w	r2, #32
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa5a 	bl	8003dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIM_ConfigClockSource+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e0b4      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x186>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800398a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a4:	d03e      	beq.n	8003a24 <HAL_TIM_ConfigClockSource+0xd4>
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039aa:	f200 8087 	bhi.w	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b2:	f000 8086 	beq.w	8003ac2 <HAL_TIM_ConfigClockSource+0x172>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ba:	d87f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b70      	cmp	r3, #112	@ 0x70
 80039be:	d01a      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0xa6>
 80039c0:	2b70      	cmp	r3, #112	@ 0x70
 80039c2:	d87b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b60      	cmp	r3, #96	@ 0x60
 80039c6:	d050      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x11a>
 80039c8:	2b60      	cmp	r3, #96	@ 0x60
 80039ca:	d877      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b50      	cmp	r3, #80	@ 0x50
 80039ce:	d03c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xfa>
 80039d0:	2b50      	cmp	r3, #80	@ 0x50
 80039d2:	d873      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d058      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x13a>
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	d86f      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b30      	cmp	r3, #48	@ 0x30
 80039de:	d064      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	2b30      	cmp	r3, #48	@ 0x30
 80039e2:	d86b      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d060      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d867      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d05a      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x15a>
 80039f4:	e062      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a06:	f000 f97c 	bl	8003d02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	609a      	str	r2, [r3, #8]
      break;
 8003a22:	e04f      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a34:	f000 f965 	bl	8003d02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a46:	609a      	str	r2, [r3, #8]
      break;
 8003a48:	e03c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 f8dc 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2150      	movs	r1, #80	@ 0x50
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f933 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003a68:	e02c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 f8fa 	bl	8003c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2160      	movs	r1, #96	@ 0x60
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f923 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003a88:	e01c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a96:	461a      	mov	r2, r3
 8003a98:	f000 f8bc 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2140      	movs	r1, #64	@ 0x40
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f913 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e00c      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 f90a 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003aba:	e003      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e000      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c08 <TIM_Base_SetConfig+0xd0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c0c <TIM_Base_SetConfig+0xd4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	@ (8003c10 <TIM_Base_SetConfig+0xd8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a22      	ldr	r2, [pc, #136]	@ (8003c08 <TIM_Base_SetConfig+0xd0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <TIM_Base_SetConfig+0xd4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <TIM_Base_SetConfig+0xd8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c08 <TIM_Base_SetConfig+0xd0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800

08003c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 030a 	bic.w	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f043 0307 	orr.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e046      	b.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d009      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd f9d6 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	@ 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fdb7 	bl	80049d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d175      	bne.n	8003fcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_UART_Transmit+0x2c>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e06e      	b.n	8003fce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2221      	movs	r2, #33	@ 0x21
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003efe:	f7fd fb23 	bl	8001548 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f18:	d108      	bne.n	8003f2c <HAL_UART_Transmit+0x6c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e003      	b.n	8003f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f34:	e02e      	b.n	8003f94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	@ 0x80
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fb1c 	bl	800457e <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e03a      	b.n	8003fce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3302      	adds	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1cb      	bne.n	8003f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2140      	movs	r1, #64	@ 0x40
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fae8 	bl	800457e <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d112      	bne.n	8004016 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Receive_IT+0x26>
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e00b      	b.n	8004018 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	461a      	mov	r2, r3
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fb0f 	bl	8004630 <UART_Start_Receive_IT>
 8004012:	4603      	mov	r3, r0
 8004014:	e000      	b.n	8004018 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0ba      	sub	sp, #232	@ 0xe8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800405e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_UART_IRQHandler+0x66>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fbec 	bl	800485c <UART_Receive_IT>
      return;
 8004084:	e25b      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80de 	beq.w	800424c <HAL_UART_IRQHandler+0x22c>
 8004090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80d1 	beq.w	800424c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xae>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_UART_IRQHandler+0xd2>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_UART_IRQHandler+0xf6>
 80040fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d011      	beq.n	8004146 <HAL_UART_IRQHandler+0x126>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0208 	orr.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 81f2 	beq.w	8004534 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x14e>
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb77 	bl	800485c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_UART_IRQHandler+0x17a>
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04f      	beq.n	800423a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fa81 	bl	80046a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d041      	beq.n	8004232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1d9      	bne.n	80041ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	4a7e      	ldr	r2, [pc, #504]	@ (8004400 <HAL_UART_IRQHandler+0x3e0>)
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f8f4 	bl	80023fc <HAL_DMA_Abort_IT>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004224:	4610      	mov	r0, r2
 8004226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e00e      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f993 	bl	8004556 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e00a      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f98f 	bl	8004556 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e006      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f98b 	bl	8004556 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004246:	e175      	b.n	8004534 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	bf00      	nop
    return;
 800424a:	e173      	b.n	8004534 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 814f 	bne.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8148 	beq.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8141 	beq.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b6 	beq.w	8004404 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8145 	beq.w	8004538 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b6:	429a      	cmp	r2, r3
 80042b8:	f080 813e 	bcs.w	8004538 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f000 8088 	beq.w	80043e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004308:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1d9      	bne.n	80042d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800432c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3314      	adds	r3, #20
 800433c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004340:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004344:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004348:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e1      	bne.n	800431c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800436a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800437c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800437e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004382:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800438a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e3      	bne.n	8004358 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e3      	bne.n	800439e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd ffd2 	bl	8002384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8b6 	bl	8004568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043fc:	e09c      	b.n	8004538 <HAL_UART_IRQHandler+0x518>
 80043fe:	bf00      	nop
 8004400:	08004767 	.word	0x08004767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 808e 	beq.w	800453c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8089 	beq.w	800453c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800444e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	623b      	str	r3, [r7, #32]
   return(result);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004486:	633a      	str	r2, [r7, #48]	@ 0x30
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044cc:	61fa      	str	r2, [r7, #28]
 80044ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	617b      	str	r3, [r7, #20]
   return(result);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f83b 	bl	8004568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f2:	e023      	b.n	800453c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_UART_IRQHandler+0x4f4>
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f93e 	bl	800478e <UART_Transmit_IT>
    return;
 8004512:	e014      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <HAL_UART_IRQHandler+0x51e>
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f97d 	bl	800482c <UART_EndTransmit_IT>
    return;
 8004532:	e004      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
    return;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
      return;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
      return;
 800453c:	bf00      	nop
  }
}
 800453e:	37e8      	adds	r7, #232	@ 0xe8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458e:	e03b      	b.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d037      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fc ffd6 	bl	8001548 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6a3a      	ldr	r2, [r7, #32]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <UART_WaitOnFlagUntilTimeout+0x30>
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e03a      	b.n	8004628 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d023      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d020      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d01d      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d116      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f856 	bl	80046a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2208      	movs	r2, #8
 80045fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e00f      	b.n	8004628 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	429a      	cmp	r2, r3
 8004624:	d0b4      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2222      	movs	r2, #34	@ 0x22
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004674:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0220 	orr.w	r2, r2, #32
 8004694:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b095      	sub	sp, #84	@ 0x54
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80046cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3314      	adds	r3, #20
 80046fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	2b01      	cmp	r3, #1
 8004718:	d119      	bne.n	800474e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	60bb      	str	r3, [r7, #8]
   return(result);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800473a:	61ba      	str	r2, [r7, #24]
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	613b      	str	r3, [r7, #16]
   return(result);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800475c:	bf00      	nop
 800475e:	3754      	adds	r7, #84	@ 0x54
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fee8 	bl	8004556 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b21      	cmp	r3, #33	@ 0x21
 80047a0:	d13e      	bne.n	8004820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d114      	bne.n	80047d6 <UART_Transmit_IT+0x48>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	1c9a      	adds	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]
 80047d4:	e008      	b.n	80047e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6211      	str	r1, [r2, #32]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4619      	mov	r1, r3
 80047f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800480a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800481a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004842:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fe79 	bl	8004544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	@ 0x30
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b22      	cmp	r3, #34	@ 0x22
 800486e:	f040 80ae 	bne.w	80049ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487a:	d117      	bne.n	80048ac <UART_Receive_IT+0x50>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d113      	bne.n	80048ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	b29a      	uxth	r2, r3
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80048aa:	e026      	b.n	80048fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048be:	d007      	beq.n	80048d0 <UART_Receive_IT+0x74>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <UART_Receive_IT+0x82>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e008      	b.n	80048f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4619      	mov	r1, r3
 8004908:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800490a:	2b00      	cmp	r3, #0
 800490c:	d15d      	bne.n	80049ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0220 	bic.w	r2, r2, #32
 800491c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800492c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	2b01      	cmp	r3, #1
 8004952:	d135      	bne.n	80049c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497a:	623a      	str	r2, [r7, #32]
 800497c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	61bb      	str	r3, [r7, #24]
   return(result);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d10a      	bne.n	80049b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fdd5 	bl	8004568 <HAL_UARTEx_RxEventCallback>
 80049be:	e002      	b.n	80049c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fc f95d 	bl	8000c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e002      	b.n	80049d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
  }
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3730      	adds	r7, #48	@ 0x30
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a12:	f023 030c 	bic.w	r3, r3, #12
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004aec <UART_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d103      	bne.n	8004a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fc0c 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	e002      	b.n	8004a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe fbf4 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009a      	lsls	r2, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <UART_SetConfig+0x118>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	0119      	lsls	r1, r3, #4
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a84:	4b1a      	ldr	r3, [pc, #104]	@ (8004af0 <UART_SetConfig+0x118>)
 8004a86:	fba3 0302 	umull	r0, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2064      	movs	r0, #100	@ 0x64
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	3332      	adds	r3, #50	@ 0x32
 8004a98:	4a15      	ldr	r2, [pc, #84]	@ (8004af0 <UART_SetConfig+0x118>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa4:	4419      	add	r1, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009a      	lsls	r2, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <UART_SetConfig+0x118>)
 8004abe:	fba3 0302 	umull	r0, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2064      	movs	r0, #100	@ 0x64
 8004ac6:	fb00 f303 	mul.w	r3, r0, r3
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	3332      	adds	r3, #50	@ 0x32
 8004ad0:	4a07      	ldr	r2, [pc, #28]	@ (8004af0 <UART_SetConfig+0x118>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40013800 	.word	0x40013800
 8004af0:	51eb851f 	.word	0x51eb851f

08004af4 <sniprintf>:
 8004af4:	b40c      	push	{r2, r3}
 8004af6:	b530      	push	{r4, r5, lr}
 8004af8:	4b18      	ldr	r3, [pc, #96]	@ (8004b5c <sniprintf+0x68>)
 8004afa:	1e0c      	subs	r4, r1, #0
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	b09d      	sub	sp, #116	@ 0x74
 8004b00:	da08      	bge.n	8004b14 <sniprintf+0x20>
 8004b02:	238b      	movs	r3, #139	@ 0x8b
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	b01d      	add	sp, #116	@ 0x74
 8004b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b10:	b002      	add	sp, #8
 8004b12:	4770      	bx	lr
 8004b14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004b22:	bf0c      	ite	eq
 8004b24:	4623      	moveq	r3, r4
 8004b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b2a:	9304      	str	r3, [sp, #16]
 8004b2c:	9307      	str	r3, [sp, #28]
 8004b2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	9006      	str	r0, [sp, #24]
 8004b36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	ab21      	add	r3, sp, #132	@ 0x84
 8004b3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b40:	a902      	add	r1, sp, #8
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	f000 f99a 	bl	8004e7c <_svfiprintf_r>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	bfbc      	itt	lt
 8004b4c:	238b      	movlt	r3, #139	@ 0x8b
 8004b4e:	602b      	strlt	r3, [r5, #0]
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	d0da      	beq.n	8004b0a <sniprintf+0x16>
 8004b54:	2200      	movs	r2, #0
 8004b56:	9b02      	ldr	r3, [sp, #8]
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e7d6      	b.n	8004b0a <sniprintf+0x16>
 8004b5c:	20000108 	.word	0x20000108

08004b60 <memset>:
 8004b60:	4603      	mov	r3, r0
 8004b62:	4402      	add	r2, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	@ (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000108 	.word	0x20000108

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	@ (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f000 fc7e 	bl	800548c <_init>
 8004b90:	2600      	movs	r6, #0
 8004b92:	4d0a      	ldr	r5, [pc, #40]	@ (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	@ (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08005854 	.word	0x08005854
 8004bb8:	08005854 	.word	0x08005854
 8004bbc:	08005854 	.word	0x08005854
 8004bc0:	08005858 	.word	0x08005858

08004bc4 <__retarget_lock_acquire_recursive>:
 8004bc4:	4770      	bx	lr

08004bc6 <__retarget_lock_release_recursive>:
 8004bc6:	4770      	bx	lr

08004bc8 <strcpy>:
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bce:	f803 2b01 	strb.w	r2, [r3], #1
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	d1f9      	bne.n	8004bca <strcpy+0x2>
 8004bd6:	4770      	bx	lr

08004bd8 <_free_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4605      	mov	r5, r0
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d040      	beq.n	8004c62 <_free_r+0x8a>
 8004be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be4:	1f0c      	subs	r4, r1, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfb8      	it	lt
 8004bea:	18e4      	addlt	r4, r4, r3
 8004bec:	f000 f8de 	bl	8004dac <__malloc_lock>
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <_free_r+0x8c>)
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	b933      	cbnz	r3, 8004c04 <_free_r+0x2c>
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c00:	f000 b8da 	b.w	8004db8 <__malloc_unlock>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d908      	bls.n	8004c1a <_free_r+0x42>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	1821      	adds	r1, r4, r0
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1809      	addeq	r1, r1, r0
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	e7ed      	b.n	8004bf6 <_free_r+0x1e>
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b10b      	cbz	r3, 8004c24 <_free_r+0x4c>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d9fa      	bls.n	8004c1a <_free_r+0x42>
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	1850      	adds	r0, r2, r1
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d10b      	bne.n	8004c44 <_free_r+0x6c>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	4401      	add	r1, r0
 8004c30:	1850      	adds	r0, r2, r1
 8004c32:	4283      	cmp	r3, r0
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	d1e0      	bne.n	8004bfa <_free_r+0x22>
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4408      	add	r0, r1
 8004c3e:	6010      	str	r0, [r2, #0]
 8004c40:	6053      	str	r3, [r2, #4]
 8004c42:	e7da      	b.n	8004bfa <_free_r+0x22>
 8004c44:	d902      	bls.n	8004c4c <_free_r+0x74>
 8004c46:	230c      	movs	r3, #12
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	e7d6      	b.n	8004bfa <_free_r+0x22>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	1821      	adds	r1, r4, r0
 8004c50:	428b      	cmp	r3, r1
 8004c52:	bf01      	itttt	eq
 8004c54:	6819      	ldreq	r1, [r3, #0]
 8004c56:	685b      	ldreq	r3, [r3, #4]
 8004c58:	1809      	addeq	r1, r1, r0
 8004c5a:	6021      	streq	r1, [r4, #0]
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	6054      	str	r4, [r2, #4]
 8004c60:	e7cb      	b.n	8004bfa <_free_r+0x22>
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200004d4 	.word	0x200004d4

08004c68 <sbrk_aligned>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ca8 <sbrk_aligned+0x40>)
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	6831      	ldr	r1, [r6, #0]
 8004c70:	4605      	mov	r5, r0
 8004c72:	b911      	cbnz	r1, 8004c7a <sbrk_aligned+0x12>
 8004c74:	f000 fba8 	bl	80053c8 <_sbrk_r>
 8004c78:	6030      	str	r0, [r6, #0]
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f000 fba3 	bl	80053c8 <_sbrk_r>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d103      	bne.n	8004c8e <sbrk_aligned+0x26>
 8004c86:	f04f 34ff 	mov.w	r4, #4294967295
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	f024 0403 	bic.w	r4, r4, #3
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d0f8      	beq.n	8004c8a <sbrk_aligned+0x22>
 8004c98:	1a21      	subs	r1, r4, r0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 fb94 	bl	80053c8 <_sbrk_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1f2      	bne.n	8004c8a <sbrk_aligned+0x22>
 8004ca4:	e7ef      	b.n	8004c86 <sbrk_aligned+0x1e>
 8004ca6:	bf00      	nop
 8004ca8:	200004d0 	.word	0x200004d0

08004cac <_malloc_r>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d904      	bls.n	8004cd2 <_malloc_r+0x26>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	6033      	str	r3, [r6, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004da8 <_malloc_r+0xfc>
 8004cd6:	f000 f869 	bl	8004dac <__malloc_lock>
 8004cda:	f8d8 3000 	ldr.w	r3, [r8]
 8004cde:	461c      	mov	r4, r3
 8004ce0:	bb44      	cbnz	r4, 8004d34 <_malloc_r+0x88>
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ffbf 	bl	8004c68 <sbrk_aligned>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	4604      	mov	r4, r0
 8004cee:	d158      	bne.n	8004da2 <_malloc_r+0xf6>
 8004cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf4:	4627      	mov	r7, r4
 8004cf6:	2f00      	cmp	r7, #0
 8004cf8:	d143      	bne.n	8004d82 <_malloc_r+0xd6>
 8004cfa:	2c00      	cmp	r4, #0
 8004cfc:	d04b      	beq.n	8004d96 <_malloc_r+0xea>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	4639      	mov	r1, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	eb04 0903 	add.w	r9, r4, r3
 8004d08:	f000 fb5e 	bl	80053c8 <_sbrk_r>
 8004d0c:	4581      	cmp	r9, r0
 8004d0e:	d142      	bne.n	8004d96 <_malloc_r+0xea>
 8004d10:	6821      	ldr	r1, [r4, #0]
 8004d12:	4630      	mov	r0, r6
 8004d14:	1a6d      	subs	r5, r5, r1
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7ff ffa6 	bl	8004c68 <sbrk_aligned>
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d03a      	beq.n	8004d96 <_malloc_r+0xea>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	442b      	add	r3, r5
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	bb62      	cbnz	r2, 8004d88 <_malloc_r+0xdc>
 8004d2e:	f8c8 7000 	str.w	r7, [r8]
 8004d32:	e00f      	b.n	8004d54 <_malloc_r+0xa8>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	1b52      	subs	r2, r2, r5
 8004d38:	d420      	bmi.n	8004d7c <_malloc_r+0xd0>
 8004d3a:	2a0b      	cmp	r2, #11
 8004d3c:	d917      	bls.n	8004d6e <_malloc_r+0xc2>
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	6025      	str	r5, [r4, #0]
 8004d44:	bf18      	it	ne
 8004d46:	6059      	strne	r1, [r3, #4]
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	bf08      	it	eq
 8004d4c:	f8c8 1000 	streq.w	r1, [r8]
 8004d50:	5162      	str	r2, [r4, r5]
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 f82f 	bl	8004db8 <__malloc_unlock>
 8004d5a:	f104 000b 	add.w	r0, r4, #11
 8004d5e:	1d23      	adds	r3, r4, #4
 8004d60:	f020 0007 	bic.w	r0, r0, #7
 8004d64:	1ac2      	subs	r2, r0, r3
 8004d66:	bf1c      	itt	ne
 8004d68:	1a1b      	subne	r3, r3, r0
 8004d6a:	50a3      	strne	r3, [r4, r2]
 8004d6c:	e7af      	b.n	8004cce <_malloc_r+0x22>
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	bf0c      	ite	eq
 8004d74:	f8c8 2000 	streq.w	r2, [r8]
 8004d78:	605a      	strne	r2, [r3, #4]
 8004d7a:	e7eb      	b.n	8004d54 <_malloc_r+0xa8>
 8004d7c:	4623      	mov	r3, r4
 8004d7e:	6864      	ldr	r4, [r4, #4]
 8004d80:	e7ae      	b.n	8004ce0 <_malloc_r+0x34>
 8004d82:	463c      	mov	r4, r7
 8004d84:	687f      	ldr	r7, [r7, #4]
 8004d86:	e7b6      	b.n	8004cf6 <_malloc_r+0x4a>
 8004d88:	461a      	mov	r2, r3
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d1fb      	bne.n	8004d88 <_malloc_r+0xdc>
 8004d90:	2300      	movs	r3, #0
 8004d92:	6053      	str	r3, [r2, #4]
 8004d94:	e7de      	b.n	8004d54 <_malloc_r+0xa8>
 8004d96:	230c      	movs	r3, #12
 8004d98:	4630      	mov	r0, r6
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f000 f80c 	bl	8004db8 <__malloc_unlock>
 8004da0:	e794      	b.n	8004ccc <_malloc_r+0x20>
 8004da2:	6005      	str	r5, [r0, #0]
 8004da4:	e7d6      	b.n	8004d54 <_malloc_r+0xa8>
 8004da6:	bf00      	nop
 8004da8:	200004d4 	.word	0x200004d4

08004dac <__malloc_lock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	@ (8004db4 <__malloc_lock+0x8>)
 8004dae:	f7ff bf09 	b.w	8004bc4 <__retarget_lock_acquire_recursive>
 8004db2:	bf00      	nop
 8004db4:	200004cc 	.word	0x200004cc

08004db8 <__malloc_unlock>:
 8004db8:	4801      	ldr	r0, [pc, #4]	@ (8004dc0 <__malloc_unlock+0x8>)
 8004dba:	f7ff bf04 	b.w	8004bc6 <__retarget_lock_release_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	200004cc 	.word	0x200004cc

08004dc4 <__ssputs_r>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	461f      	mov	r7, r3
 8004dca:	688e      	ldr	r6, [r1, #8]
 8004dcc:	4682      	mov	sl, r0
 8004dce:	42be      	cmp	r6, r7
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	680b      	ldr	r3, [r1, #0]
 8004dd6:	d82d      	bhi.n	8004e34 <__ssputs_r+0x70>
 8004dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004de0:	d026      	beq.n	8004e30 <__ssputs_r+0x6c>
 8004de2:	6965      	ldr	r5, [r4, #20]
 8004de4:	6909      	ldr	r1, [r1, #16]
 8004de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dea:	eba3 0901 	sub.w	r9, r3, r1
 8004dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004df2:	1c7b      	adds	r3, r7, #1
 8004df4:	444b      	add	r3, r9
 8004df6:	106d      	asrs	r5, r5, #1
 8004df8:	429d      	cmp	r5, r3
 8004dfa:	bf38      	it	cc
 8004dfc:	461d      	movcc	r5, r3
 8004dfe:	0553      	lsls	r3, r2, #21
 8004e00:	d527      	bpl.n	8004e52 <__ssputs_r+0x8e>
 8004e02:	4629      	mov	r1, r5
 8004e04:	f7ff ff52 	bl	8004cac <_malloc_r>
 8004e08:	4606      	mov	r6, r0
 8004e0a:	b360      	cbz	r0, 8004e66 <__ssputs_r+0xa2>
 8004e0c:	464a      	mov	r2, r9
 8004e0e:	6921      	ldr	r1, [r4, #16]
 8004e10:	f000 faf8 	bl	8005404 <memcpy>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	6126      	str	r6, [r4, #16]
 8004e22:	444e      	add	r6, r9
 8004e24:	6026      	str	r6, [r4, #0]
 8004e26:	463e      	mov	r6, r7
 8004e28:	6165      	str	r5, [r4, #20]
 8004e2a:	eba5 0509 	sub.w	r5, r5, r9
 8004e2e:	60a5      	str	r5, [r4, #8]
 8004e30:	42be      	cmp	r6, r7
 8004e32:	d900      	bls.n	8004e36 <__ssputs_r+0x72>
 8004e34:	463e      	mov	r6, r7
 8004e36:	4632      	mov	r2, r6
 8004e38:	4641      	mov	r1, r8
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	f000 faaa 	bl	8005394 <memmove>
 8004e40:	2000      	movs	r0, #0
 8004e42:	68a3      	ldr	r3, [r4, #8]
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	60a3      	str	r3, [r4, #8]
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	4433      	add	r3, r6
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e52:	462a      	mov	r2, r5
 8004e54:	f000 fae4 	bl	8005420 <_realloc_r>
 8004e58:	4606      	mov	r6, r0
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d1e0      	bne.n	8004e20 <__ssputs_r+0x5c>
 8004e5e:	4650      	mov	r0, sl
 8004e60:	6921      	ldr	r1, [r4, #16]
 8004e62:	f7ff feb9 	bl	8004bd8 <_free_r>
 8004e66:	230c      	movs	r3, #12
 8004e68:	f8ca 3000 	str.w	r3, [sl]
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	e7e9      	b.n	8004e4e <__ssputs_r+0x8a>
	...

08004e7c <_svfiprintf_r>:
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	4698      	mov	r8, r3
 8004e82:	898b      	ldrh	r3, [r1, #12]
 8004e84:	4607      	mov	r7, r0
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	460d      	mov	r5, r1
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	b09d      	sub	sp, #116	@ 0x74
 8004e8e:	d510      	bpl.n	8004eb2 <_svfiprintf_r+0x36>
 8004e90:	690b      	ldr	r3, [r1, #16]
 8004e92:	b973      	cbnz	r3, 8004eb2 <_svfiprintf_r+0x36>
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	f7ff ff09 	bl	8004cac <_malloc_r>
 8004e9a:	6028      	str	r0, [r5, #0]
 8004e9c:	6128      	str	r0, [r5, #16]
 8004e9e:	b930      	cbnz	r0, 8004eae <_svfiprintf_r+0x32>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	b01d      	add	sp, #116	@ 0x74
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	2340      	movs	r3, #64	@ 0x40
 8004eb0:	616b      	str	r3, [r5, #20]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb6:	2320      	movs	r3, #32
 8004eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ebc:	2330      	movs	r3, #48	@ 0x30
 8004ebe:	f04f 0901 	mov.w	r9, #1
 8004ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ec6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005060 <_svfiprintf_r+0x1e4>
 8004eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ece:	4623      	mov	r3, r4
 8004ed0:	469a      	mov	sl, r3
 8004ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed6:	b10a      	cbz	r2, 8004edc <_svfiprintf_r+0x60>
 8004ed8:	2a25      	cmp	r2, #37	@ 0x25
 8004eda:	d1f9      	bne.n	8004ed0 <_svfiprintf_r+0x54>
 8004edc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ee0:	d00b      	beq.n	8004efa <_svfiprintf_r+0x7e>
 8004ee2:	465b      	mov	r3, fp
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f7ff ff6b 	bl	8004dc4 <__ssputs_r>
 8004eee:	3001      	adds	r0, #1
 8004ef0:	f000 80a7 	beq.w	8005042 <_svfiprintf_r+0x1c6>
 8004ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ef6:	445a      	add	r2, fp
 8004ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004efa:	f89a 3000 	ldrb.w	r3, [sl]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 809f 	beq.w	8005042 <_svfiprintf_r+0x1c6>
 8004f04:	2300      	movs	r3, #0
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0e:	f10a 0a01 	add.w	sl, sl, #1
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f1c:	4654      	mov	r4, sl
 8004f1e:	2205      	movs	r2, #5
 8004f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f24:	484e      	ldr	r0, [pc, #312]	@ (8005060 <_svfiprintf_r+0x1e4>)
 8004f26:	f000 fa5f 	bl	80053e8 <memchr>
 8004f2a:	9a04      	ldr	r2, [sp, #16]
 8004f2c:	b9d8      	cbnz	r0, 8004f66 <_svfiprintf_r+0xea>
 8004f2e:	06d0      	lsls	r0, r2, #27
 8004f30:	bf44      	itt	mi
 8004f32:	2320      	movmi	r3, #32
 8004f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f38:	0711      	lsls	r1, r2, #28
 8004f3a:	bf44      	itt	mi
 8004f3c:	232b      	movmi	r3, #43	@ 0x2b
 8004f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f42:	f89a 3000 	ldrb.w	r3, [sl]
 8004f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f48:	d015      	beq.n	8004f76 <_svfiprintf_r+0xfa>
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f04f 0c0a 	mov.w	ip, #10
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	4621      	mov	r1, r4
 8004f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f5a:	3b30      	subs	r3, #48	@ 0x30
 8004f5c:	2b09      	cmp	r3, #9
 8004f5e:	d94b      	bls.n	8004ff8 <_svfiprintf_r+0x17c>
 8004f60:	b1b0      	cbz	r0, 8004f90 <_svfiprintf_r+0x114>
 8004f62:	9207      	str	r2, [sp, #28]
 8004f64:	e014      	b.n	8004f90 <_svfiprintf_r+0x114>
 8004f66:	eba0 0308 	sub.w	r3, r0, r8
 8004f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	46a2      	mov	sl, r4
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	e7d2      	b.n	8004f1c <_svfiprintf_r+0xa0>
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	1d19      	adds	r1, r3, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	9103      	str	r1, [sp, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbb      	ittet	lt
 8004f82:	425b      	neglt	r3, r3
 8004f84:	f042 0202 	orrlt.w	r2, r2, #2
 8004f88:	9307      	strge	r3, [sp, #28]
 8004f8a:	9307      	strlt	r3, [sp, #28]
 8004f8c:	bfb8      	it	lt
 8004f8e:	9204      	strlt	r2, [sp, #16]
 8004f90:	7823      	ldrb	r3, [r4, #0]
 8004f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f94:	d10a      	bne.n	8004fac <_svfiprintf_r+0x130>
 8004f96:	7863      	ldrb	r3, [r4, #1]
 8004f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f9a:	d132      	bne.n	8005002 <_svfiprintf_r+0x186>
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	3402      	adds	r4, #2
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	9203      	str	r2, [sp, #12]
 8004fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004faa:	9305      	str	r3, [sp, #20]
 8004fac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005064 <_svfiprintf_r+0x1e8>
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	7821      	ldrb	r1, [r4, #0]
 8004fb6:	f000 fa17 	bl	80053e8 <memchr>
 8004fba:	b138      	cbz	r0, 8004fcc <_svfiprintf_r+0x150>
 8004fbc:	2240      	movs	r2, #64	@ 0x40
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	eba0 000a 	sub.w	r0, r0, sl
 8004fc4:	4082      	lsls	r2, r0
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	3401      	adds	r4, #1
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	4825      	ldr	r0, [pc, #148]	@ (8005068 <_svfiprintf_r+0x1ec>)
 8004fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fd8:	f000 fa06 	bl	80053e8 <memchr>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d036      	beq.n	800504e <_svfiprintf_r+0x1d2>
 8004fe0:	4b22      	ldr	r3, [pc, #136]	@ (800506c <_svfiprintf_r+0x1f0>)
 8004fe2:	bb1b      	cbnz	r3, 800502c <_svfiprintf_r+0x1b0>
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	3307      	adds	r3, #7
 8004fe8:	f023 0307 	bic.w	r3, r3, #7
 8004fec:	3308      	adds	r3, #8
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff2:	4433      	add	r3, r6
 8004ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff6:	e76a      	b.n	8004ece <_svfiprintf_r+0x52>
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005000:	e7a8      	b.n	8004f54 <_svfiprintf_r+0xd8>
 8005002:	2300      	movs	r3, #0
 8005004:	f04f 0c0a 	mov.w	ip, #10
 8005008:	4619      	mov	r1, r3
 800500a:	3401      	adds	r4, #1
 800500c:	9305      	str	r3, [sp, #20]
 800500e:	4620      	mov	r0, r4
 8005010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005014:	3a30      	subs	r2, #48	@ 0x30
 8005016:	2a09      	cmp	r2, #9
 8005018:	d903      	bls.n	8005022 <_svfiprintf_r+0x1a6>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0c6      	beq.n	8004fac <_svfiprintf_r+0x130>
 800501e:	9105      	str	r1, [sp, #20]
 8005020:	e7c4      	b.n	8004fac <_svfiprintf_r+0x130>
 8005022:	4604      	mov	r4, r0
 8005024:	2301      	movs	r3, #1
 8005026:	fb0c 2101 	mla	r1, ip, r1, r2
 800502a:	e7f0      	b.n	800500e <_svfiprintf_r+0x192>
 800502c:	ab03      	add	r3, sp, #12
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	462a      	mov	r2, r5
 8005032:	4638      	mov	r0, r7
 8005034:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <_svfiprintf_r+0x1f4>)
 8005036:	a904      	add	r1, sp, #16
 8005038:	f3af 8000 	nop.w
 800503c:	1c42      	adds	r2, r0, #1
 800503e:	4606      	mov	r6, r0
 8005040:	d1d6      	bne.n	8004ff0 <_svfiprintf_r+0x174>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	065b      	lsls	r3, r3, #25
 8005046:	f53f af2d 	bmi.w	8004ea4 <_svfiprintf_r+0x28>
 800504a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800504c:	e72c      	b.n	8004ea8 <_svfiprintf_r+0x2c>
 800504e:	ab03      	add	r3, sp, #12
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	462a      	mov	r2, r5
 8005054:	4638      	mov	r0, r7
 8005056:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <_svfiprintf_r+0x1f4>)
 8005058:	a904      	add	r1, sp, #16
 800505a:	f000 f87d 	bl	8005158 <_printf_i>
 800505e:	e7ed      	b.n	800503c <_svfiprintf_r+0x1c0>
 8005060:	08005816 	.word	0x08005816
 8005064:	0800581c 	.word	0x0800581c
 8005068:	08005820 	.word	0x08005820
 800506c:	00000000 	.word	0x00000000
 8005070:	08004dc5 	.word	0x08004dc5

08005074 <_printf_common>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	4616      	mov	r6, r2
 800507a:	4698      	mov	r8, r3
 800507c:	688a      	ldr	r2, [r1, #8]
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	4607      	mov	r7, r0
 8005082:	4293      	cmp	r3, r2
 8005084:	bfb8      	it	lt
 8005086:	4613      	movlt	r3, r2
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800508e:	460c      	mov	r4, r1
 8005090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005094:	b10a      	cbz	r2, 800509a <_printf_common+0x26>
 8005096:	3301      	adds	r3, #1
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	0699      	lsls	r1, r3, #26
 800509e:	bf42      	ittt	mi
 80050a0:	6833      	ldrmi	r3, [r6, #0]
 80050a2:	3302      	addmi	r3, #2
 80050a4:	6033      	strmi	r3, [r6, #0]
 80050a6:	6825      	ldr	r5, [r4, #0]
 80050a8:	f015 0506 	ands.w	r5, r5, #6
 80050ac:	d106      	bne.n	80050bc <_printf_common+0x48>
 80050ae:	f104 0a19 	add.w	sl, r4, #25
 80050b2:	68e3      	ldr	r3, [r4, #12]
 80050b4:	6832      	ldr	r2, [r6, #0]
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	42ab      	cmp	r3, r5
 80050ba:	dc2b      	bgt.n	8005114 <_printf_common+0xa0>
 80050bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	3b00      	subs	r3, #0
 80050c4:	bf18      	it	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	0692      	lsls	r2, r2, #26
 80050ca:	d430      	bmi.n	800512e <_printf_common+0xba>
 80050cc:	4641      	mov	r1, r8
 80050ce:	4638      	mov	r0, r7
 80050d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050d4:	47c8      	blx	r9
 80050d6:	3001      	adds	r0, #1
 80050d8:	d023      	beq.n	8005122 <_printf_common+0xae>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	f003 0306 	and.w	r3, r3, #6
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	bf14      	ite	ne
 80050e6:	2500      	movne	r5, #0
 80050e8:	6833      	ldreq	r3, [r6, #0]
 80050ea:	f04f 0600 	mov.w	r6, #0
 80050ee:	bf08      	it	eq
 80050f0:	68e5      	ldreq	r5, [r4, #12]
 80050f2:	f104 041a 	add.w	r4, r4, #26
 80050f6:	bf08      	it	eq
 80050f8:	1aed      	subeq	r5, r5, r3
 80050fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050fe:	bf08      	it	eq
 8005100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005104:	4293      	cmp	r3, r2
 8005106:	bfc4      	itt	gt
 8005108:	1a9b      	subgt	r3, r3, r2
 800510a:	18ed      	addgt	r5, r5, r3
 800510c:	42b5      	cmp	r5, r6
 800510e:	d11a      	bne.n	8005146 <_printf_common+0xd2>
 8005110:	2000      	movs	r0, #0
 8005112:	e008      	b.n	8005126 <_printf_common+0xb2>
 8005114:	2301      	movs	r3, #1
 8005116:	4652      	mov	r2, sl
 8005118:	4641      	mov	r1, r8
 800511a:	4638      	mov	r0, r7
 800511c:	47c8      	blx	r9
 800511e:	3001      	adds	r0, #1
 8005120:	d103      	bne.n	800512a <_printf_common+0xb6>
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	3501      	adds	r5, #1
 800512c:	e7c1      	b.n	80050b2 <_printf_common+0x3e>
 800512e:	2030      	movs	r0, #48	@ 0x30
 8005130:	18e1      	adds	r1, r4, r3
 8005132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800513c:	4422      	add	r2, r4
 800513e:	3302      	adds	r3, #2
 8005140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005144:	e7c2      	b.n	80050cc <_printf_common+0x58>
 8005146:	2301      	movs	r3, #1
 8005148:	4622      	mov	r2, r4
 800514a:	4641      	mov	r1, r8
 800514c:	4638      	mov	r0, r7
 800514e:	47c8      	blx	r9
 8005150:	3001      	adds	r0, #1
 8005152:	d0e6      	beq.n	8005122 <_printf_common+0xae>
 8005154:	3601      	adds	r6, #1
 8005156:	e7d9      	b.n	800510c <_printf_common+0x98>

08005158 <_printf_i>:
 8005158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	7e0f      	ldrb	r7, [r1, #24]
 800515e:	4691      	mov	r9, r2
 8005160:	2f78      	cmp	r7, #120	@ 0x78
 8005162:	4680      	mov	r8, r0
 8005164:	460c      	mov	r4, r1
 8005166:	469a      	mov	sl, r3
 8005168:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800516a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800516e:	d807      	bhi.n	8005180 <_printf_i+0x28>
 8005170:	2f62      	cmp	r7, #98	@ 0x62
 8005172:	d80a      	bhi.n	800518a <_printf_i+0x32>
 8005174:	2f00      	cmp	r7, #0
 8005176:	f000 80d1 	beq.w	800531c <_printf_i+0x1c4>
 800517a:	2f58      	cmp	r7, #88	@ 0x58
 800517c:	f000 80b8 	beq.w	80052f0 <_printf_i+0x198>
 8005180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005188:	e03a      	b.n	8005200 <_printf_i+0xa8>
 800518a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800518e:	2b15      	cmp	r3, #21
 8005190:	d8f6      	bhi.n	8005180 <_printf_i+0x28>
 8005192:	a101      	add	r1, pc, #4	@ (adr r1, 8005198 <_printf_i+0x40>)
 8005194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005198:	080051f1 	.word	0x080051f1
 800519c:	08005205 	.word	0x08005205
 80051a0:	08005181 	.word	0x08005181
 80051a4:	08005181 	.word	0x08005181
 80051a8:	08005181 	.word	0x08005181
 80051ac:	08005181 	.word	0x08005181
 80051b0:	08005205 	.word	0x08005205
 80051b4:	08005181 	.word	0x08005181
 80051b8:	08005181 	.word	0x08005181
 80051bc:	08005181 	.word	0x08005181
 80051c0:	08005181 	.word	0x08005181
 80051c4:	08005303 	.word	0x08005303
 80051c8:	0800522f 	.word	0x0800522f
 80051cc:	080052bd 	.word	0x080052bd
 80051d0:	08005181 	.word	0x08005181
 80051d4:	08005181 	.word	0x08005181
 80051d8:	08005325 	.word	0x08005325
 80051dc:	08005181 	.word	0x08005181
 80051e0:	0800522f 	.word	0x0800522f
 80051e4:	08005181 	.word	0x08005181
 80051e8:	08005181 	.word	0x08005181
 80051ec:	080052c5 	.word	0x080052c5
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6032      	str	r2, [r6, #0]
 80051f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005200:	2301      	movs	r3, #1
 8005202:	e09c      	b.n	800533e <_printf_i+0x1e6>
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	0606      	lsls	r6, r0, #24
 800520e:	d501      	bpl.n	8005214 <_printf_i+0xbc>
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	e003      	b.n	800521c <_printf_i+0xc4>
 8005214:	0645      	lsls	r5, r0, #25
 8005216:	d5fb      	bpl.n	8005210 <_printf_i+0xb8>
 8005218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800521c:	2d00      	cmp	r5, #0
 800521e:	da03      	bge.n	8005228 <_printf_i+0xd0>
 8005220:	232d      	movs	r3, #45	@ 0x2d
 8005222:	426d      	negs	r5, r5
 8005224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005228:	230a      	movs	r3, #10
 800522a:	4858      	ldr	r0, [pc, #352]	@ (800538c <_printf_i+0x234>)
 800522c:	e011      	b.n	8005252 <_printf_i+0xfa>
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	0608      	lsls	r0, r1, #24
 8005234:	f853 5b04 	ldr.w	r5, [r3], #4
 8005238:	d402      	bmi.n	8005240 <_printf_i+0xe8>
 800523a:	0649      	lsls	r1, r1, #25
 800523c:	bf48      	it	mi
 800523e:	b2ad      	uxthmi	r5, r5
 8005240:	2f6f      	cmp	r7, #111	@ 0x6f
 8005242:	6033      	str	r3, [r6, #0]
 8005244:	bf14      	ite	ne
 8005246:	230a      	movne	r3, #10
 8005248:	2308      	moveq	r3, #8
 800524a:	4850      	ldr	r0, [pc, #320]	@ (800538c <_printf_i+0x234>)
 800524c:	2100      	movs	r1, #0
 800524e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005252:	6866      	ldr	r6, [r4, #4]
 8005254:	2e00      	cmp	r6, #0
 8005256:	60a6      	str	r6, [r4, #8]
 8005258:	db05      	blt.n	8005266 <_printf_i+0x10e>
 800525a:	6821      	ldr	r1, [r4, #0]
 800525c:	432e      	orrs	r6, r5
 800525e:	f021 0104 	bic.w	r1, r1, #4
 8005262:	6021      	str	r1, [r4, #0]
 8005264:	d04b      	beq.n	80052fe <_printf_i+0x1a6>
 8005266:	4616      	mov	r6, r2
 8005268:	fbb5 f1f3 	udiv	r1, r5, r3
 800526c:	fb03 5711 	mls	r7, r3, r1, r5
 8005270:	5dc7      	ldrb	r7, [r0, r7]
 8005272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005276:	462f      	mov	r7, r5
 8005278:	42bb      	cmp	r3, r7
 800527a:	460d      	mov	r5, r1
 800527c:	d9f4      	bls.n	8005268 <_printf_i+0x110>
 800527e:	2b08      	cmp	r3, #8
 8005280:	d10b      	bne.n	800529a <_printf_i+0x142>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	07df      	lsls	r7, r3, #31
 8005286:	d508      	bpl.n	800529a <_printf_i+0x142>
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	6861      	ldr	r1, [r4, #4]
 800528c:	4299      	cmp	r1, r3
 800528e:	bfde      	ittt	le
 8005290:	2330      	movle	r3, #48	@ 0x30
 8005292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005296:	f106 36ff 	addle.w	r6, r6, #4294967295
 800529a:	1b92      	subs	r2, r2, r6
 800529c:	6122      	str	r2, [r4, #16]
 800529e:	464b      	mov	r3, r9
 80052a0:	4621      	mov	r1, r4
 80052a2:	4640      	mov	r0, r8
 80052a4:	f8cd a000 	str.w	sl, [sp]
 80052a8:	aa03      	add	r2, sp, #12
 80052aa:	f7ff fee3 	bl	8005074 <_printf_common>
 80052ae:	3001      	adds	r0, #1
 80052b0:	d14a      	bne.n	8005348 <_printf_i+0x1f0>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	b004      	add	sp, #16
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	2778      	movs	r7, #120	@ 0x78
 80052c6:	4832      	ldr	r0, [pc, #200]	@ (8005390 <_printf_i+0x238>)
 80052c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	6831      	ldr	r1, [r6, #0]
 80052d0:	061f      	lsls	r7, r3, #24
 80052d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052d6:	d402      	bmi.n	80052de <_printf_i+0x186>
 80052d8:	065f      	lsls	r7, r3, #25
 80052da:	bf48      	it	mi
 80052dc:	b2ad      	uxthmi	r5, r5
 80052de:	6031      	str	r1, [r6, #0]
 80052e0:	07d9      	lsls	r1, r3, #31
 80052e2:	bf44      	itt	mi
 80052e4:	f043 0320 	orrmi.w	r3, r3, #32
 80052e8:	6023      	strmi	r3, [r4, #0]
 80052ea:	b11d      	cbz	r5, 80052f4 <_printf_i+0x19c>
 80052ec:	2310      	movs	r3, #16
 80052ee:	e7ad      	b.n	800524c <_printf_i+0xf4>
 80052f0:	4826      	ldr	r0, [pc, #152]	@ (800538c <_printf_i+0x234>)
 80052f2:	e7e9      	b.n	80052c8 <_printf_i+0x170>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f023 0320 	bic.w	r3, r3, #32
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	e7f6      	b.n	80052ec <_printf_i+0x194>
 80052fe:	4616      	mov	r6, r2
 8005300:	e7bd      	b.n	800527e <_printf_i+0x126>
 8005302:	6833      	ldr	r3, [r6, #0]
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1d18      	adds	r0, r3, #4
 8005308:	6961      	ldr	r1, [r4, #20]
 800530a:	6030      	str	r0, [r6, #0]
 800530c:	062e      	lsls	r6, r5, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0x1be>
 8005312:	6019      	str	r1, [r3, #0]
 8005314:	e002      	b.n	800531c <_printf_i+0x1c4>
 8005316:	0668      	lsls	r0, r5, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0x1ba>
 800531a:	8019      	strh	r1, [r3, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	4616      	mov	r6, r2
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7bc      	b.n	800529e <_printf_i+0x146>
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	2100      	movs	r1, #0
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	6032      	str	r2, [r6, #0]
 800532c:	681e      	ldr	r6, [r3, #0]
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f859 	bl	80053e8 <memchr>
 8005336:	b108      	cbz	r0, 800533c <_printf_i+0x1e4>
 8005338:	1b80      	subs	r0, r0, r6
 800533a:	6060      	str	r0, [r4, #4]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005346:	e7aa      	b.n	800529e <_printf_i+0x146>
 8005348:	4632      	mov	r2, r6
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d0ad      	beq.n	80052b2 <_printf_i+0x15a>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d413      	bmi.n	8005384 <_printf_i+0x22c>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e7a6      	b.n	80052b6 <_printf_i+0x15e>
 8005368:	2301      	movs	r3, #1
 800536a:	4632      	mov	r2, r6
 800536c:	4649      	mov	r1, r9
 800536e:	4640      	mov	r0, r8
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d09d      	beq.n	80052b2 <_printf_i+0x15a>
 8005376:	3501      	adds	r5, #1
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	42ab      	cmp	r3, r5
 8005380:	dcf2      	bgt.n	8005368 <_printf_i+0x210>
 8005382:	e7eb      	b.n	800535c <_printf_i+0x204>
 8005384:	2500      	movs	r5, #0
 8005386:	f104 0619 	add.w	r6, r4, #25
 800538a:	e7f5      	b.n	8005378 <_printf_i+0x220>
 800538c:	08005827 	.word	0x08005827
 8005390:	08005838 	.word	0x08005838

08005394 <memmove>:
 8005394:	4288      	cmp	r0, r1
 8005396:	b510      	push	{r4, lr}
 8005398:	eb01 0402 	add.w	r4, r1, r2
 800539c:	d902      	bls.n	80053a4 <memmove+0x10>
 800539e:	4284      	cmp	r4, r0
 80053a0:	4623      	mov	r3, r4
 80053a2:	d807      	bhi.n	80053b4 <memmove+0x20>
 80053a4:	1e43      	subs	r3, r0, #1
 80053a6:	42a1      	cmp	r1, r4
 80053a8:	d008      	beq.n	80053bc <memmove+0x28>
 80053aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053b2:	e7f8      	b.n	80053a6 <memmove+0x12>
 80053b4:	4601      	mov	r1, r0
 80053b6:	4402      	add	r2, r0
 80053b8:	428a      	cmp	r2, r1
 80053ba:	d100      	bne.n	80053be <memmove+0x2a>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053c6:	e7f7      	b.n	80053b8 <memmove+0x24>

080053c8 <_sbrk_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d05      	ldr	r5, [pc, #20]	@ (80053e4 <_sbrk_r+0x1c>)
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fb fffe 	bl	80013d4 <_sbrk>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_sbrk_r+0x1a>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_sbrk_r+0x1a>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200004c8 	.word	0x200004c8

080053e8 <memchr>:
 80053e8:	4603      	mov	r3, r0
 80053ea:	b510      	push	{r4, lr}
 80053ec:	b2c9      	uxtb	r1, r1
 80053ee:	4402      	add	r2, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	d101      	bne.n	80053fa <memchr+0x12>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e003      	b.n	8005402 <memchr+0x1a>
 80053fa:	7804      	ldrb	r4, [r0, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	428c      	cmp	r4, r1
 8005400:	d1f6      	bne.n	80053f0 <memchr+0x8>
 8005402:	bd10      	pop	{r4, pc}

08005404 <memcpy>:
 8005404:	440a      	add	r2, r1
 8005406:	4291      	cmp	r1, r2
 8005408:	f100 33ff 	add.w	r3, r0, #4294967295
 800540c:	d100      	bne.n	8005410 <memcpy+0xc>
 800540e:	4770      	bx	lr
 8005410:	b510      	push	{r4, lr}
 8005412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005416:	4291      	cmp	r1, r2
 8005418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800541c:	d1f9      	bne.n	8005412 <memcpy+0xe>
 800541e:	bd10      	pop	{r4, pc}

08005420 <_realloc_r>:
 8005420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005424:	4607      	mov	r7, r0
 8005426:	4614      	mov	r4, r2
 8005428:	460d      	mov	r5, r1
 800542a:	b921      	cbnz	r1, 8005436 <_realloc_r+0x16>
 800542c:	4611      	mov	r1, r2
 800542e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005432:	f7ff bc3b 	b.w	8004cac <_malloc_r>
 8005436:	b92a      	cbnz	r2, 8005444 <_realloc_r+0x24>
 8005438:	f7ff fbce 	bl	8004bd8 <_free_r>
 800543c:	4625      	mov	r5, r4
 800543e:	4628      	mov	r0, r5
 8005440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005444:	f000 f81a 	bl	800547c <_malloc_usable_size_r>
 8005448:	4284      	cmp	r4, r0
 800544a:	4606      	mov	r6, r0
 800544c:	d802      	bhi.n	8005454 <_realloc_r+0x34>
 800544e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005452:	d8f4      	bhi.n	800543e <_realloc_r+0x1e>
 8005454:	4621      	mov	r1, r4
 8005456:	4638      	mov	r0, r7
 8005458:	f7ff fc28 	bl	8004cac <_malloc_r>
 800545c:	4680      	mov	r8, r0
 800545e:	b908      	cbnz	r0, 8005464 <_realloc_r+0x44>
 8005460:	4645      	mov	r5, r8
 8005462:	e7ec      	b.n	800543e <_realloc_r+0x1e>
 8005464:	42b4      	cmp	r4, r6
 8005466:	4622      	mov	r2, r4
 8005468:	4629      	mov	r1, r5
 800546a:	bf28      	it	cs
 800546c:	4632      	movcs	r2, r6
 800546e:	f7ff ffc9 	bl	8005404 <memcpy>
 8005472:	4629      	mov	r1, r5
 8005474:	4638      	mov	r0, r7
 8005476:	f7ff fbaf 	bl	8004bd8 <_free_r>
 800547a:	e7f1      	b.n	8005460 <_realloc_r+0x40>

0800547c <_malloc_usable_size_r>:
 800547c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005480:	1f18      	subs	r0, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	bfbc      	itt	lt
 8005486:	580b      	ldrlt	r3, [r1, r0]
 8005488:	18c0      	addlt	r0, r0, r3
 800548a:	4770      	bx	lr

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
