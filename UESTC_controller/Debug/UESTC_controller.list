
UESTC_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c7c  08003c7c  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c84  08003c84  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003c8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000001c  08003ca8  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003ca8  000051d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de6e  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230d  00000000  00000000  00012eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000151c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af0  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018723  00000000  00000000  00016aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010515  00000000  00000000  0002f1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f02f  00000000  00000000  0003f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce70f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000ce754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d2168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c04 	.word	0x08003c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003c04 	.word	0x08003c04

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fc4e 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f826 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f974 	bl	8000458 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f954 	bl	800041c <MX_DMA_Init>
  MX_ADC1_Init();
 8000174:	f000 f870 	bl	8000258 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000178:	f000 f8d8 	bl	800032c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800017c:	f000 f924 	bl	80003c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // CALIBRATION DES ADCs
  HAL_ADCEx_Calibration_Start(&hadc1); // Calibrer ADC1 => CF drivers hal_adc
 8000180:	4808      	ldr	r0, [pc, #32]	@ (80001a4 <main+0x44>)
 8000182:	f001 f935 	bl	80013f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_NUM_CONVERSIONS); // configurer DMA
 8000186:	2204      	movs	r2, #4
 8000188:	4907      	ldr	r1, [pc, #28]	@ (80001a8 <main+0x48>)
 800018a:	4806      	ldr	r0, [pc, #24]	@ (80001a4 <main+0x44>)
 800018c:	f000 fd74 	bl	8000c78 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3); // demarer timer 3
 8000190:	4806      	ldr	r0, [pc, #24]	@ (80001ac <main+0x4c>)
 8000192:	f002 fd07 	bl	8002ba4 <HAL_TIM_Base_Start>

  //Config de l'USART1 pour le BLE RX
  HAL_UART_Receive_IT(&huart1, &rx_it_buffer, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4905      	ldr	r1, [pc, #20]	@ (80001b0 <main+0x50>)
 800019a:	4806      	ldr	r0, [pc, #24]	@ (80001b4 <main+0x54>)
 800019c:	f002 ffc6 	bl	800312c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <main+0x40>
 80001a4:	20000038 	.word	0x20000038
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	200000ac 	.word	0x200000ac
 80001b0:	20000144 	.word	0x20000144
 80001b4:	200000f4 	.word	0x200000f4

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	@ 0x50
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c2:	2228      	movs	r2, #40	@ 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f003 fce8 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	f107 0314 	add.w	r3, r7, #20
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 ff06 	bl	800200c <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000206:	f000 f9ff 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f002 f973 	bl	8002510 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000230:	f000 f9ea 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000234:	2302      	movs	r3, #2
 8000236:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4618      	mov	r0, r3
 8000240:	f002 faf4 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800024a:	f000 f9dd 	bl	8000608 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3750      	adds	r7, #80	@ 0x50
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000268:	4b2e      	ldr	r3, [pc, #184]	@ (8000324 <MX_ADC1_Init+0xcc>)
 800026a:	4a2f      	ldr	r2, [pc, #188]	@ (8000328 <MX_ADC1_Init+0xd0>)
 800026c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800026e:	4b2d      	ldr	r3, [pc, #180]	@ (8000324 <MX_ADC1_Init+0xcc>)
 8000270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000276:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <MX_ADC1_Init+0xcc>)
 8000278:	2200      	movs	r2, #0
 800027a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027c:	4b29      	ldr	r3, [pc, #164]	@ (8000324 <MX_ADC1_Init+0xcc>)
 800027e:	2200      	movs	r2, #0
 8000280:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000282:	4b28      	ldr	r3, [pc, #160]	@ (8000324 <MX_ADC1_Init+0xcc>)
 8000284:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028a:	4b26      	ldr	r3, [pc, #152]	@ (8000324 <MX_ADC1_Init+0xcc>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000290:	4b24      	ldr	r3, [pc, #144]	@ (8000324 <MX_ADC1_Init+0xcc>)
 8000292:	2204      	movs	r2, #4
 8000294:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000296:	4823      	ldr	r0, [pc, #140]	@ (8000324 <MX_ADC1_Init+0xcc>)
 8000298:	f000 fc16 	bl	8000ac8 <HAL_ADC_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002a2:	f000 f9b1 	bl	8000608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80002ae:	2306      	movs	r3, #6
 80002b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	481b      	ldr	r0, [pc, #108]	@ (8000324 <MX_ADC1_Init+0xcc>)
 80002b8:	f000 fea0 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f9a1 	bl	8000608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002c6:	2302      	movs	r3, #2
 80002c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	4814      	ldr	r0, [pc, #80]	@ (8000324 <MX_ADC1_Init+0xcc>)
 80002d4:	f000 fe92 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002de:	f000 f993 	bl	8000608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002e2:	2303      	movs	r3, #3
 80002e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	480d      	ldr	r0, [pc, #52]	@ (8000324 <MX_ADC1_Init+0xcc>)
 80002f0:	f000 fe84 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002fa:	f000 f985 	bl	8000608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002fe:	2304      	movs	r3, #4
 8000300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000302:	2304      	movs	r3, #4
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4619      	mov	r1, r3
 800030a:	4806      	ldr	r0, [pc, #24]	@ (8000324 <MX_ADC1_Init+0xcc>)
 800030c:	f000 fe76 	bl	8000ffc <HAL_ADC_ConfigChannel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000316:	f000 f977 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000038 	.word	0x20000038
 8000328:	40012400 	.word	0x40012400

0800032c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000348:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <MX_TIM3_Init+0x94>)
 800034a:	4a1e      	ldr	r2, [pc, #120]	@ (80003c4 <MX_TIM3_Init+0x98>)
 800034c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 800034e:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <MX_TIM3_Init+0x94>)
 8000350:	f240 321f 	movw	r2, #799	@ 0x31f
 8000354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_TIM3_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_TIM3_Init+0x94>)
 800035e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <MX_TIM3_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_TIM3_Init+0x94>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000370:	4813      	ldr	r0, [pc, #76]	@ (80003c0 <MX_TIM3_Init+0x94>)
 8000372:	f002 fbc7 	bl	8002b04 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800037c:	f000 f944 	bl	8000608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	@ (80003c0 <MX_TIM3_Init+0x94>)
 800038e:	f002 fc53 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000398:	f000 f936 	bl	8000608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800039c:	2320      	movs	r3, #32
 800039e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_TIM3_Init+0x94>)
 80003aa:	f002 fe11 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80003b4:	f000 f928 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000ac 	.word	0x200000ac
 80003c4:	40000400 	.word	0x40000400

080003c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	@ (8000418 <MX_USART1_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003d2:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_USART1_UART_Init+0x4c>)
 8000400:	f002 fe44 	bl	800308c <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 f8fd 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000f4 	.word	0x200000f4
 8000418:	40013800 	.word	0x40013800

0800041c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_DMA_Init+0x38>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <MX_DMA_Init+0x38>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_DMA_Init+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2100      	movs	r1, #0
 800043e:	200b      	movs	r0, #11
 8000440:	f001 f965 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000444:	200b      	movs	r0, #11
 8000446:	f001 f97e 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b33      	ldr	r3, [pc, #204]	@ (800053c <MX_GPIO_Init+0xe4>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a32      	ldr	r2, [pc, #200]	@ (800053c <MX_GPIO_Init+0xe4>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b30      	ldr	r3, [pc, #192]	@ (800053c <MX_GPIO_Init+0xe4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <MX_GPIO_Init+0xe4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a2c      	ldr	r2, [pc, #176]	@ (800053c <MX_GPIO_Init+0xe4>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <MX_GPIO_Init+0xe4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <MX_GPIO_Init+0xe4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a26      	ldr	r2, [pc, #152]	@ (800053c <MX_GPIO_Init+0xe4>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b24      	ldr	r3, [pc, #144]	@ (800053c <MX_GPIO_Init+0xe4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80004b4:	2322      	movs	r3, #34	@ 0x22
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_GPIO_Init+0xe8>)
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	481f      	ldr	r0, [pc, #124]	@ (8000544 <MX_GPIO_Init+0xec>)
 80004c8:	f001 fbfa 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80004cc:	231c      	movs	r3, #28
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <MX_GPIO_Init+0xf0>)
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4819      	ldr	r0, [pc, #100]	@ (8000544 <MX_GPIO_Init+0xec>)
 80004e0:	f001 fbee 	bl	8001cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2007      	movs	r0, #7
 80004ea:	f001 f910 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004ee:	2007      	movs	r0, #7
 80004f0:	f001 f929 	bl	8001746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2008      	movs	r0, #8
 80004fa:	f001 f908 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80004fe:	2008      	movs	r0, #8
 8000500:	f001 f921 	bl	8001746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2009      	movs	r0, #9
 800050a:	f001 f900 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800050e:	2009      	movs	r0, #9
 8000510:	f001 f919 	bl	8001746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	200a      	movs	r0, #10
 800051a:	f001 f8f8 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800051e:	200a      	movs	r0, #10
 8000520:	f001 f911 	bl	8001746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2017      	movs	r0, #23
 800052a:	f001 f8f0 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800052e:	2017      	movs	r0, #23
 8000530:	f001 f909 	bl	8001746 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	10110000 	.word	0x10110000
 8000544:	40010c00 	.word	0x40010c00
 8000548:	10210000 	.word	0x10210000

0800054c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	static int receive_index = 0;
	static bool debut_de_trame = false;
	static bool fin_de_trame = false;
    if (huart->Instance == USART1) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a23      	ldr	r2, [pc, #140]	@ (80005e8 <HAL_UART_RxCpltCallback+0x9c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d13f      	bne.n	80005de <HAL_UART_RxCpltCallback+0x92>
        // Copier le caractère dans le buffer
        if (receive_index < sizeof(receive_buffer) - 1) {
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <HAL_UART_RxCpltCallback+0xa0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b3e      	cmp	r3, #62	@ 0x3e
 8000564:	d81a      	bhi.n	800059c <HAL_UART_RxCpltCallback+0x50>
            receive_buffer[receive_index++] = (char)rx_it_buffer;
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <HAL_UART_RxCpltCallback+0xa0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	491f      	ldr	r1, [pc, #124]	@ (80005ec <HAL_UART_RxCpltCallback+0xa0>)
 800056e:	600a      	str	r2, [r1, #0]
 8000570:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <HAL_UART_RxCpltCallback+0xa4>)
 8000572:	7811      	ldrb	r1, [r2, #0]
 8000574:	4a1f      	ldr	r2, [pc, #124]	@ (80005f4 <HAL_UART_RxCpltCallback+0xa8>)
 8000576:	54d1      	strb	r1, [r2, r3]
            if((char)rx_it_buffer == '\n'){
 8000578:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <HAL_UART_RxCpltCallback+0xa4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d10d      	bne.n	800059c <HAL_UART_RxCpltCallback+0x50>
            	if (!debut_de_trame){
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <HAL_UART_RxCpltCallback+0xac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <HAL_UART_RxCpltCallback+0x4a>
            		debut_de_trame = true;
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <HAL_UART_RxCpltCallback+0xac>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	e002      	b.n	800059c <HAL_UART_RxCpltCallback+0x50>
            	}
            	else{
            		fin_de_trame = true;
 8000596:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <HAL_UART_RxCpltCallback+0xb0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
            	}

            }
        }
        // Vérifier si la trame est terminée
        if (fin_de_trame) {
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_UART_RxCpltCallback+0xb0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d017      	beq.n	80005d4 <HAL_UART_RxCpltCallback+0x88>
            process_trame(receive_buffer);  // traite la trame
 80005a4:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <HAL_UART_RxCpltCallback+0xa8>)
 80005a6:	f000 f835 	bl	8000614 <process_trame>
            receive_index = 0;              // réinitialise l'index
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <HAL_UART_RxCpltCallback+0xa0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
            debut_de_trame = false;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <HAL_UART_RxCpltCallback+0xac>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
            fin_de_trame = false;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <HAL_UART_RxCpltCallback+0xb0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
            strcpy(receive_buffer, receive_buffer_copy); // DEBUG
 80005bc:	4910      	ldr	r1, [pc, #64]	@ (8000600 <HAL_UART_RxCpltCallback+0xb4>)
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <HAL_UART_RxCpltCallback+0xa8>)
 80005c0:	f003 fb18 	bl	8003bf4 <strcpy>
            memset(receive_buffer, 0, sizeof(receive_buffer));
 80005c4:	2240      	movs	r2, #64	@ 0x40
 80005c6:	2100      	movs	r1, #0
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <HAL_UART_RxCpltCallback+0xa8>)
 80005ca:	f003 fae7 	bl	8003b9c <memset>
            rx_it_buffer = 0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <HAL_UART_RxCpltCallback+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]

        }

        // Remet à écouter un octet
        HAL_UART_Receive_IT(&huart1, &rx_it_buffer, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	4906      	ldr	r1, [pc, #24]	@ (80005f0 <HAL_UART_RxCpltCallback+0xa4>)
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <HAL_UART_RxCpltCallback+0xb8>)
 80005da:	f002 fda7 	bl	800312c <HAL_UART_Receive_IT>
    }
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40013800 	.word	0x40013800
 80005ec:	200001c8 	.word	0x200001c8
 80005f0:	20000144 	.word	0x20000144
 80005f4:	20000148 	.word	0x20000148
 80005f8:	200001cc 	.word	0x200001cc
 80005fc:	200001cd 	.word	0x200001cd
 8000600:	20000188 	.word	0x20000188
 8000604:	200000f4 	.word	0x200000f4

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <process_trame>:

////////////////////////////////////////////////////////////////// CODE RX



void process_trame(char* receive_buffer) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if(receive_buffer[0] == '\0'){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d021      	beq.n	8000668 <process_trame+0x54>
		return;
	}
	else {
		for (int i = 0; i < COMMAND_COUNT; ++i) {
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e017      	b.n	800065a <process_trame+0x46>
			if (strcmp(receive_buffer, command_table_rx[i].command) == 0) {
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <process_trame+0x5c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fd89 	bl	800014c <strcmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <process_trame+0x40>
				command_table_rx[i].handler(); // Exécute le handler associé
 8000640:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <process_trame+0x5c>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	4798      	blx	r3
				UNKNOW_COMMAND = false;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <process_trame+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
				return; // Optionnel : on quitte après exécution
 8000652:	e00a      	b.n	800066a <process_trame+0x56>
		for (int i = 0; i < COMMAND_COUNT; ++i) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	dde4      	ble.n	800062a <process_trame+0x16>
			}
		}
		UNKNOW_COMMAND = true;
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <process_trame+0x60>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		return;
 8000666:	e000      	b.n	800066a <process_trame+0x56>
		return;
 8000668:	bf00      	nop
		}
}
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	200001cf 	.word	0x200001cf

08000678 <handle_BLE_DISC>:


void handle_BLE_DISC(void){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	BLE_CONNECTED = false;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <handle_BLE_DISC+0x14>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200001ce 	.word	0x200001ce

08000690 <handle_BLE_CONN>:

void handle_BLE_CONN(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	BLE_CONNECTED = true;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <handle_BLE_CONN+0x14>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200001ce 	.word	0x200001ce

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <HAL_MspInit+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <HAL_MspInit+0x5c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <HAL_MspInit+0x60>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <HAL_MspInit+0x60>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000

0800070c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <HAL_ADC_MspInit+0xcc>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d151      	bne.n	80007d0 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800072c:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 8000732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a24      	ldr	r2, [pc, #144]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <HAL_ADC_MspInit+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800075c:	231e      	movs	r3, #30
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	2303      	movs	r3, #3
 8000762:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <HAL_ADC_MspInit+0xd4>)
 800076c:	f001 faa8 	bl	8001cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 8000772:	4a1d      	ldr	r2, [pc, #116]	@ (80007e8 <HAL_ADC_MspInit+0xdc>)
 8000774:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 800078a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800078e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 8000792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000796:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 800079a:	2220      	movs	r2, #32
 800079c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 80007a6:	f000 ffe9 	bl	800177c <HAL_DMA_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007b0:	f7ff ff2a 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 80007b8:	621a      	str	r2, [r3, #32]
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <HAL_ADC_MspInit+0xd8>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2012      	movs	r0, #18
 80007c6:	f000 ffa2 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007ca:	2012      	movs	r0, #18
 80007cc:	f000 ffbb 	bl	8001746 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40012400 	.word	0x40012400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	20000068 	.word	0x20000068
 80007e8:	40020008 	.word	0x40020008

080007ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <HAL_TIM_Base_MspInit+0x34>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d10b      	bne.n	8000816 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_TIM_Base_MspInit+0x38>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <HAL_TIM_Base_MspInit+0x38>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_TIM_Base_MspInit+0x38>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40000400 	.word	0x40000400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a20      	ldr	r2, [pc, #128]	@ (80008c4 <HAL_UART_MspInit+0x9c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d139      	bne.n	80008bc <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a1e      	ldr	r2, [pc, #120]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <HAL_UART_MspInit+0xa0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800087c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	480f      	ldr	r0, [pc, #60]	@ (80008cc <HAL_UART_MspInit+0xa4>)
 800088e:	f001 fa17 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	@ (80008cc <HAL_UART_MspInit+0xa4>)
 80008a8:	f001 fa0a 	bl	8001cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2025      	movs	r0, #37	@ 0x25
 80008b2:	f000 ff2c 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b6:	2025      	movs	r0, #37	@ 0x25
 80008b8:	f000 ff45 	bl	8001746 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f8b6 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800092c:	2002      	movs	r0, #2
 800092e:	f001 fb4b 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}

08000936 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800093a:	2004      	movs	r0, #4
 800093c:	f001 fb44 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000948:	2008      	movs	r0, #8
 800094a:	f001 fb3d 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}

08000952 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000956:	2010      	movs	r0, #16
 8000958:	f001 fb36 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <DMA1_Channel1_IRQHandler+0x10>)
 8000966:	f001 f877 	bl	8001a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000068 	.word	0x20000068

08000974 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <ADC1_2_IRQHandler+0x10>)
 800097a:	f000 fa5b 	bl	8000e34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000038 	.word	0x20000038

08000988 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800098c:	2020      	movs	r0, #32
 800098e:	f001 fb1b 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <USART1_IRQHandler+0x10>)
 800099e:	f002 fbeb 	bl	8003178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000f4 	.word	0x200000f4

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff fff8 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480b      	ldr	r0, [pc, #44]	@ (80009ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009be:	490c      	ldr	r1, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009c0:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a09      	ldr	r2, [pc, #36]	@ (80009f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d4:	4c09      	ldr	r4, [pc, #36]	@ (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 f8e3 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fbbb 	bl	8000160 <main>
  bx lr
 80009ea:	4770      	bx	lr
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009f4:	08003c8c 	.word	0x08003c8c
  ldr r2, =_sbss
 80009f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009fc:	200001d4 	.word	0x200001d4

08000a00 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <CAN1_RX1_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fe6f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fe42 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fe87 	bl	8001762 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 fe4f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000010 	.word	0x20000010
 8000a88:	20000018 	.word	0x20000018
 8000a8c:	20000014 	.word	0x20000014

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	200001d0 	.word	0x200001d0

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200001d0 	.word	0x200001d0

08000ac8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e0be      	b.n	8000c68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d109      	bne.n	8000b0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff fe00 	bl	800070c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 fbc7 	bl	80012a0 <ADC_ConversionStop_Disable>
 8000b12:	4603      	mov	r3, r0
 8000b14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8099 	bne.w	8000c56 <HAL_ADC_Init+0x18e>
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8095 	bne.w	8000c56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b34:	f023 0302 	bic.w	r3, r3, #2
 8000b38:	f043 0202 	orr.w	r2, r3, #2
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7b1b      	ldrb	r3, [r3, #12]
 8000b4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b60:	d003      	beq.n	8000b6a <HAL_ADC_Init+0xa2>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d102      	bne.n	8000b70 <HAL_ADC_Init+0xa8>
 8000b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b6e:	e000      	b.n	8000b72 <HAL_ADC_Init+0xaa>
 8000b70:	2300      	movs	r3, #0
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7d1b      	ldrb	r3, [r3, #20]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d119      	bne.n	8000bb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7b1b      	ldrb	r3, [r3, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	035a      	lsls	r2, r3, #13
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba0:	f043 0220 	orr.w	r2, r3, #32
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bac:	f043 0201 	orr.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <HAL_ADC_Init+0x1a8>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be4:	d003      	beq.n	8000bee <HAL_ADC_Init+0x126>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	051b      	lsls	r3, r3, #20
 8000bf6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_ADC_Init+0x1ac>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d10b      	bne.n	8000c34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c26:	f023 0303 	bic.w	r3, r3, #3
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c32:	e018      	b.n	8000c66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c38:	f023 0312 	bic.w	r3, r3, #18
 8000c3c:	f043 0210 	orr.w	r2, r3, #16
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c54:	e007      	b.n	8000c66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	ffe1f7fd 	.word	0xffe1f7fd
 8000c74:	ff1f0efe 	.word	0xff1f0efe

08000c78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a64      	ldr	r2, [pc, #400]	@ (8000e20 <HAL_ADC_Start_DMA+0x1a8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d004      	beq.n	8000c9c <HAL_ADC_Start_DMA+0x24>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a63      	ldr	r2, [pc, #396]	@ (8000e24 <HAL_ADC_Start_DMA+0x1ac>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d106      	bne.n	8000caa <HAL_ADC_Start_DMA+0x32>
 8000c9c:	4b60      	ldr	r3, [pc, #384]	@ (8000e20 <HAL_ADC_Start_DMA+0x1a8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 80b3 	bne.w	8000e10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_Start_DMA+0x40>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e0ae      	b.n	8000e16 <HAL_ADC_Start_DMA+0x19e>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 fa93 	bl	80011ec <ADC_Enable>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f040 809a 	bne.w	8000e06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cda:	f023 0301 	bic.w	r3, r3, #1
 8000cde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a4e      	ldr	r2, [pc, #312]	@ (8000e24 <HAL_ADC_Start_DMA+0x1ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d105      	bne.n	8000cfc <HAL_ADC_Start_DMA+0x84>
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e20 <HAL_ADC_Start_DMA+0x1a8>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d115      	bne.n	8000d28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d026      	beq.n	8000d64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d26:	e01d      	b.n	8000d64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a39      	ldr	r2, [pc, #228]	@ (8000e20 <HAL_ADC_Start_DMA+0x1a8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d004      	beq.n	8000d48 <HAL_ADC_Start_DMA+0xd0>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_ADC_Start_DMA+0x1ac>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d10d      	bne.n	8000d64 <HAL_ADC_Start_DMA+0xec>
 8000d48:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <HAL_ADC_Start_DMA+0x1a8>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d007      	beq.n	8000d64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	f023 0206 	bic.w	r2, r3, #6
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d7c:	e002      	b.n	8000d84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6a1b      	ldr	r3, [r3, #32]
 8000d90:	4a25      	ldr	r2, [pc, #148]	@ (8000e28 <HAL_ADC_Start_DMA+0x1b0>)
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4a24      	ldr	r2, [pc, #144]	@ (8000e2c <HAL_ADC_Start_DMA+0x1b4>)
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <HAL_ADC_Start_DMA+0x1b8>)
 8000da2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f06f 0202 	mvn.w	r2, #2
 8000dac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dbc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6a18      	ldr	r0, [r3, #32]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	334c      	adds	r3, #76	@ 0x4c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f000 fd2f 	bl	8001830 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ddc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000de0:	d108      	bne.n	8000df4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000df0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000df2:	e00f      	b.n	8000e14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e04:	e006      	b.n	8000e14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000e0e:	e001      	b.n	8000e14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012400 	.word	0x40012400
 8000e24:	40012800 	.word	0x40012800
 8000e28:	08001323 	.word	0x08001323
 8000e2c:	0800139f 	.word	0x0800139f
 8000e30:	080013bb 	.word	0x080013bb

08000e34 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d03e      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d039      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e82:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e86:	d11d      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d119      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0220 	bic.w	r2, r2, #32
 8000e9e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f874 	bl	8000fb2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f06f 0212 	mvn.w	r2, #18
 8000ed2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d04d      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d048      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d105      	bne.n	8000f00 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000f0a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000f0e:	d012      	beq.n	8000f36 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d125      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f28:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f2c:	d11d      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d119      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f44:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 faee 	bl	800154c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f06f 020c 	mvn.w	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d012      	beq.n	8000faa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00d      	beq.n	8000faa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f81b 	bl	8000fd6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f06f 0201 	mvn.w	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_ConfigChannel+0x20>
 8001018:	2302      	movs	r3, #2
 800101a:	e0dc      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1da>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d81c      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	3b05      	subs	r3, #5
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b05      	subs	r3, #5
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34
 8001064:	e03c      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d81c      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b23      	subs	r3, #35	@ 0x23
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	4019      	ands	r1, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b23      	subs	r3, #35	@ 0x23
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a6:	e01b      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b41      	subs	r3, #65	@ 0x41
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b41      	subs	r3, #65	@ 0x41
 80010d4:	fa00 f203 	lsl.w	r2, r0, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d91c      	bls.n	8001122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3b1e      	subs	r3, #30
 80010fa:	2207      	movs	r2, #7
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6898      	ldr	r0, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	3b1e      	subs	r3, #30
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	e019      	b.n	8001156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6919      	ldr	r1, [r3, #16]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	fa00 f203 	lsl.w	r2, r0, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d003      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	2b11      	cmp	r3, #17
 8001164:	d132      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d125      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d126      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800118c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d11a      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9a      	lsrs	r2, r3, #18
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x1b2>
 80011ba:	e007      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40012400 	.word	0x40012400
 80011e4:	20000010 	.word	0x20000010
 80011e8:	431bde83 	.word	0x431bde83

080011ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d040      	beq.n	800128c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <ADC_Enable+0xac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <ADC_Enable+0xb0>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001228:	e002      	b.n	8001230 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001236:	f7ff fc3d 	bl	8000ab4 <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800123c:	e01f      	b.n	800127e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123e:	f7ff fc39 	bl	8000ab4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d918      	bls.n	800127e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d011      	beq.n	800127e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125e:	f043 0210 	orr.w	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e007      	b.n	800128e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b01      	cmp	r3, #1
 800128a:	d1d8      	bne.n	800123e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000010 	.word	0x20000010
 800129c:	431bde83 	.word	0x431bde83

080012a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d12e      	bne.n	8001318 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ca:	f7ff fbf3 	bl	8000ab4 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012d0:	e01b      	b.n	800130a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012d2:	f7ff fbef 	bl	8000ab4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d914      	bls.n	800130a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10d      	bne.n	800130a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e007      	b.n	800131a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d0dc      	beq.n	80012d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001338:	2b00      	cmp	r3, #0
 800133a:	d127      	bne.n	800138c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001340:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001352:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001356:	d115      	bne.n	8001384 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fe14 	bl	8000fb2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800138a:	e004      	b.n	8001396 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff fe09 	bl	8000fc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	f043 0204 	orr.w	r2, r3, #4
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fe01 	bl	8000fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADCEx_Calibration_Start+0x1e>
 800140a:	2302      	movs	r3, #2
 800140c:	e097      	b.n	800153e <HAL_ADCEx_Calibration_Start+0x14e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff42 	bl	80012a0 <ADC_ConversionStop_Disable>
 800141c:	4603      	mov	r3, r0
 800141e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fee3 	bl	80011ec <ADC_Enable>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 8081 	bne.w	8001534 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	f043 0202 	orr.w	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <HAL_ADCEx_Calibration_Start+0x158>)
 8001448:	681c      	ldr	r4, [r3, #0]
 800144a:	2002      	movs	r0, #2
 800144c:	f001 faa4 	bl	8002998 <HAL_RCCEx_GetPeriphCLKFreq>
 8001450:	4603      	mov	r3, r0
 8001452:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001456:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001458:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800145a:	e002      	b.n	8001462 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0208 	orr.w	r2, r2, #8
 8001476:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001478:	f7ff fb1c 	bl	8000ab4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800147e:	e01b      	b.n	80014b8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001480:	f7ff fb18 	bl	8000ab4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d914      	bls.n	80014b8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00d      	beq.n	80014b8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	f023 0312 	bic.w	r3, r3, #18
 80014a4:	f043 0210 	orr.w	r2, r3, #16
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e042      	b.n	800153e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1dc      	bne.n	8001480 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0204 	orr.w	r2, r2, #4
 80014d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014d6:	f7ff faed 	bl	8000ab4 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014dc:	e01b      	b.n	8001516 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014de:	f7ff fae9 	bl	8000ab4 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	d914      	bls.n	8001516 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00d      	beq.n	8001516 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f023 0312 	bic.w	r3, r3, #18
 8001502:	f043 0210 	orr.w	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e013      	b.n	800153e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1dc      	bne.n	80014de <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	f023 0303 	bic.w	r3, r3, #3
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800153c:	7dfb      	ldrb	r3, [r7, #23]
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000010 	.word	0x20000010

0800154c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
	...

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4906      	ldr	r1, [pc, #24]	@ (80015f8 <__NVIC_EnableIRQ+0x34>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff2d 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff42 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff35 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e043      	b.n	800181a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <HAL_DMA_Init+0xa8>)
 800179a:	4413      	add	r3, r2
 800179c:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <HAL_DMA_Init+0xac>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	009a      	lsls	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <HAL_DMA_Init+0xb0>)
 80017ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	bffdfff8 	.word	0xbffdfff8
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Start_IT+0x20>
 800184c:	2302      	movs	r3, #2
 800184e:	e04b      	b.n	80018e8 <HAL_DMA_Start_IT+0xb8>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d13a      	bne.n	80018da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f9eb 	bl	8001c64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 020e 	orr.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00f      	b.n	80018c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 020a 	orr.w	r2, r2, #10
 80018c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e005      	b.n	80018e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d008      	beq.n	800191a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2204      	movs	r2, #4
 800190c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e020      	b.n	800195c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d005      	beq.n	800198c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e051      	b.n	8001a30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <HAL_DMA_Abort_IT+0xd4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d029      	beq.n	8001a0a <HAL_DMA_Abort_IT+0xa2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <HAL_DMA_Abort_IT+0xd8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x9e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <HAL_DMA_Abort_IT+0xdc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01a      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x98>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_DMA_Abort_IT+0xe0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d012      	beq.n	80019fa <HAL_DMA_Abort_IT+0x92>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_DMA_Abort_IT+0xe4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00a      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x8c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_DMA_Abort_IT+0xe8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <HAL_DMA_Abort_IT+0x86>
 80019e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019ec:	e00e      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019f2:	e00b      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f8:	e008      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 80019fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fe:	e005      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a04:	e002      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a06:	2310      	movs	r3, #16
 8001a08:	e000      	b.n	8001a0c <HAL_DMA_Abort_IT+0xa4>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_DMA_Abort_IT+0xec>)
 8001a0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
    } 
  }
  return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40020008 	.word	0x40020008
 8001a40:	4002001c 	.word	0x4002001c
 8001a44:	40020030 	.word	0x40020030
 8001a48:	40020044 	.word	0x40020044
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	4002006c 	.word	0x4002006c
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	2204      	movs	r2, #4
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d04f      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xc8>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0320 	and.w	r3, r3, #32
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0204 	bic.w	r2, r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a66      	ldr	r2, [pc, #408]	@ (8001c48 <HAL_DMA_IRQHandler+0x1f0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d029      	beq.n	8001b06 <HAL_DMA_IRQHandler+0xae>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_DMA_IRQHandler+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xaa>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a63      	ldr	r2, [pc, #396]	@ (8001c50 <HAL_DMA_IRQHandler+0x1f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01a      	beq.n	8001afc <HAL_DMA_IRQHandler+0xa4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a62      	ldr	r2, [pc, #392]	@ (8001c54 <HAL_DMA_IRQHandler+0x1fc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d012      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x9e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	@ (8001c58 <HAL_DMA_IRQHandler+0x200>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x98>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5f      	ldr	r2, [pc, #380]	@ (8001c5c <HAL_DMA_IRQHandler+0x204>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d102      	bne.n	8001aea <HAL_DMA_IRQHandler+0x92>
 8001ae4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ae8:	e00e      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001aea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001aee:	e00b      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001af0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001af4:	e008      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001af6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001afa:	e005      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b00:	e002      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001b02:	2340      	movs	r3, #64	@ 0x40
 8001b04:	e000      	b.n	8001b08 <HAL_DMA_IRQHandler+0xb0>
 8001b06:	2304      	movs	r3, #4
 8001b08:	4a55      	ldr	r2, [pc, #340]	@ (8001c60 <HAL_DMA_IRQHandler+0x208>)
 8001b0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8094 	beq.w	8001c3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	e08e      	b.n	8001c3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2202      	movs	r2, #2
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d056      	beq.n	8001bde <HAL_DMA_IRQHandler+0x186>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d051      	beq.n	8001bde <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 020a 	bic.w	r2, r2, #10
 8001b56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <HAL_DMA_IRQHandler+0x1f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d029      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x166>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a37      	ldr	r2, [pc, #220]	@ (8001c4c <HAL_DMA_IRQHandler+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_IRQHandler+0x162>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a35      	ldr	r2, [pc, #212]	@ (8001c50 <HAL_DMA_IRQHandler+0x1f8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x15c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <HAL_DMA_IRQHandler+0x1fc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d012      	beq.n	8001bae <HAL_DMA_IRQHandler+0x156>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a32      	ldr	r2, [pc, #200]	@ (8001c58 <HAL_DMA_IRQHandler+0x200>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x150>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <HAL_DMA_IRQHandler+0x204>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_DMA_IRQHandler+0x14a>
 8001b9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ba0:	e00e      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ba6:	e00b      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001ba8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bac:	e008      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb2:	e005      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb8:	e002      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001bba:	2320      	movs	r3, #32
 8001bbc:	e000      	b.n	8001bc0 <HAL_DMA_IRQHandler+0x168>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <HAL_DMA_IRQHandler+0x208>)
 8001bc2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d034      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bdc:	e02f      	b.n	8001c3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	2208      	movs	r2, #8
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d028      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x1e8>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020e 	bic.w	r2, r2, #14
 8001c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
    }
  }
  return;
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
}
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020008 	.word	0x40020008
 8001c4c:	4002001c 	.word	0x4002001c
 8001c50:	40020030 	.word	0x40020030
 8001c54:	40020044 	.word	0x40020044
 8001c58:	40020058 	.word	0x40020058
 8001c5c:	4002006c 	.word	0x4002006c
 8001c60:	40020000 	.word	0x40020000

08001c64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d108      	bne.n	8001ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ca2:	e007      	b.n	8001cb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b08b      	sub	sp, #44	@ 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd2:	e169      	b.n	8001fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8158 	bne.w	8001fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d05e      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001cfc:	4a98      	ldr	r2, [pc, #608]	@ (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d875      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d02:	4a98      	ldr	r2, [pc, #608]	@ (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d058      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d08:	4a96      	ldr	r2, [pc, #600]	@ (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d86f      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d0e:	4a96      	ldr	r2, [pc, #600]	@ (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d052      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d14:	4a94      	ldr	r2, [pc, #592]	@ (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d869      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d1a:	4a94      	ldr	r2, [pc, #592]	@ (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d04c      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d20:	4a92      	ldr	r2, [pc, #584]	@ (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d863      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d26:	4a92      	ldr	r2, [pc, #584]	@ (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d046      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d2c:	4a90      	ldr	r2, [pc, #576]	@ (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d85d      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d82a      	bhi.n	8001d8c <HAL_GPIO_Init+0xcc>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d859      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d40 <HAL_GPIO_Init+0x80>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001dbb 	.word	0x08001dbb
 8001d44:	08001d95 	.word	0x08001d95
 8001d48:	08001da7 	.word	0x08001da7
 8001d4c:	08001de9 	.word	0x08001de9
 8001d50:	08001def 	.word	0x08001def
 8001d54:	08001def 	.word	0x08001def
 8001d58:	08001def 	.word	0x08001def
 8001d5c:	08001def 	.word	0x08001def
 8001d60:	08001def 	.word	0x08001def
 8001d64:	08001def 	.word	0x08001def
 8001d68:	08001def 	.word	0x08001def
 8001d6c:	08001def 	.word	0x08001def
 8001d70:	08001def 	.word	0x08001def
 8001d74:	08001def 	.word	0x08001def
 8001d78:	08001def 	.word	0x08001def
 8001d7c:	08001def 	.word	0x08001def
 8001d80:	08001def 	.word	0x08001def
 8001d84:	08001d9d 	.word	0x08001d9d
 8001d88:	08001db1 	.word	0x08001db1
 8001d8c:	4a79      	ldr	r2, [pc, #484]	@ (8001f74 <HAL_GPIO_Init+0x2b4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d92:	e02c      	b.n	8001dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e029      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	3304      	adds	r3, #4
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e024      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	3308      	adds	r3, #8
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e01f      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	330c      	adds	r3, #12
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e01a      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e013      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	611a      	str	r2, [r3, #16]
          break;
 8001dda:	e009      	b.n	8001df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	615a      	str	r2, [r3, #20]
          break;
 8001de6:	e003      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          break;
 8001dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	@ 0xff
 8001df4:	d801      	bhi.n	8001dfa <HAL_GPIO_Init+0x13a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_Init+0x13e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2bff      	cmp	r3, #255	@ 0xff
 8001e04:	d802      	bhi.n	8001e0c <HAL_GPIO_Init+0x14c>
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x152>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	3b08      	subs	r3, #8
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	210f      	movs	r1, #15
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	6a39      	ldr	r1, [r7, #32]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b1 	beq.w	8001fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e40:	4b4d      	ldr	r3, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e58:	4a48      	ldr	r2, [pc, #288]	@ (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <HAL_GPIO_Init+0x2c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <HAL_GPIO_Init+0x2c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f88 <HAL_GPIO_Init+0x2c8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	@ (8001f8c <HAL_GPIO_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1e0>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001eac:	2300      	movs	r3, #0
 8001eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ebe:	492f      	ldr	r1, [pc, #188]	@ (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	492c      	ldr	r1, [pc, #176]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4928      	ldr	r1, [pc, #160]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4922      	ldr	r1, [pc, #136]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	491e      	ldr	r1, [pc, #120]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4918      	ldr	r1, [pc, #96]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4914      	ldr	r1, [pc, #80]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	490e      	ldr	r1, [pc, #56]	@ (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e021      	b.n	8001fa2 <HAL_GPIO_Init+0x2e2>
 8001f5e:	bf00      	nop
 8001f60:	10320000 	.word	0x10320000
 8001f64:	10310000 	.word	0x10310000
 8001f68:	10220000 	.word	0x10220000
 8001f6c:	10210000 	.word	0x10210000
 8001f70:	10120000 	.word	0x10120000
 8001f74:	10110000 	.word	0x10110000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40011400 	.word	0x40011400
 8001f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4909      	ldr	r1, [pc, #36]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f47f ae8e 	bne.w	8001cd4 <HAL_GPIO_Init+0x14>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	372c      	adds	r7, #44	@ 0x2c
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f806 	bl	8001ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e272      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8087 	beq.w	800213a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b92      	ldr	r3, [pc, #584]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b04      	cmp	r3, #4
 8002036:	d00c      	beq.n	8002052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002038:	4b8f      	ldr	r3, [pc, #572]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d112      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
 8002044:	4b8c      	ldr	r3, [pc, #560]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002050:	d10b      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002052:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d06c      	beq.n	8002138 <HAL_RCC_OscConfig+0x12c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d168      	bne.n	8002138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e24c      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x76>
 8002074:	4b80      	ldr	r3, [pc, #512]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7f      	ldr	r2, [pc, #508]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e02e      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b7b      	ldr	r3, [pc, #492]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7a      	ldr	r2, [pc, #488]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b78      	ldr	r3, [pc, #480]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a77      	ldr	r2, [pc, #476]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0xbc>
 80020ae:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a71      	ldr	r2, [pc, #452]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6e      	ldr	r2, [pc, #440]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a67      	ldr	r2, [pc, #412]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fce4 	bl	8000ab4 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fce0 	bl	8000ab4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e200      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe4>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fcd0 	bl	8000ab4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fccc 	bl	8000ab4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1ec      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x10c>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002152:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
 800215e:	4b46      	ldr	r3, [pc, #280]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1c0      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4939      	ldr	r1, [pc, #228]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x270>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe fc85 	bl	8000ab4 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe fc81 	bl	8000ab4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1a1      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4927      	ldr	r1, [pc, #156]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_RCC_OscConfig+0x270>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fc64 	bl	8000ab4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe fc60 	bl	8000ab4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e180      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03a      	beq.n	8002290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_RCC_OscConfig+0x274>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7fe fc44 	bl	8000ab4 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe fc40 	bl	8000ab4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e160      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f000 face 	bl	80027f0 <RCC_Delay>
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_RCC_OscConfig+0x274>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe fc2a 	bl	8000ab4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e00f      	b.n	8002284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fc26 	bl	8000ab4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d908      	bls.n	8002284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e146      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	42420000 	.word	0x42420000
 8002280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b92      	ldr	r3, [pc, #584]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e9      	bne.n	8002264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a6 	beq.w	80023ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b8b      	ldr	r3, [pc, #556]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a87      	ldr	r2, [pc, #540]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b85      	ldr	r3, [pc, #532]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b82      	ldr	r3, [pc, #520]	@ (80024d4 <HAL_RCC_OscConfig+0x4c8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7e      	ldr	r2, [pc, #504]	@ (80024d4 <HAL_RCC_OscConfig+0x4c8>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fbe7 	bl	8000ab4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe fbe3 	bl	8000ab4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	@ 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e103      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b75      	ldr	r3, [pc, #468]	@ (80024d4 <HAL_RCC_OscConfig+0x4c8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x312>
 8002310:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e02d      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x334>
 8002326:	4b6a      	ldr	r3, [pc, #424]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a69      	ldr	r2, [pc, #420]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b67      	ldr	r3, [pc, #412]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a66      	ldr	r2, [pc, #408]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	e01c      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x356>
 8002348:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a60      	ldr	r2, [pc, #384]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	4b5e      	ldr	r3, [pc, #376]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a5d      	ldr	r2, [pc, #372]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002362:	4b5b      	ldr	r3, [pc, #364]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a5a      	ldr	r2, [pc, #360]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b58      	ldr	r3, [pc, #352]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a57      	ldr	r2, [pc, #348]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7fe fb97 	bl	8000ab4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fb93 	bl	8000ab4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0b1      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RCC_OscConfig+0x37e>
 80023ac:	e014      	b.n	80023d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fb81 	bl	8000ab4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7fe fb7d 	bl	8000ab4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e09b      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	4b40      	ldr	r3, [pc, #256]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a3b      	ldr	r2, [pc, #236]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f4:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d061      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d146      	bne.n	8002496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b33      	ldr	r3, [pc, #204]	@ (80024d8 <HAL_RCC_OscConfig+0x4cc>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fb51 	bl	8000ab4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fb4d 	bl	8000ab4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e06d      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243e:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4921      	ldr	r1, [pc, #132]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a19      	ldr	r1, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	430b      	orrs	r3, r1
 8002462:	491b      	ldr	r1, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x4cc>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fb21 	bl	8000ab4 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fb1d 	bl	8000ab4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e03d      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x46a>
 8002494:	e035      	b.n	8002502 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_RCC_OscConfig+0x4cc>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fb0a 	bl	8000ab4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fb06 	bl	8000ab4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e026      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x498>
 80024c2:	e01e      	b.n	8002502 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e019      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCC_OscConfig+0x500>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0d0      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b6a      	ldr	r3, [pc, #424]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b67      	ldr	r3, [pc, #412]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4965      	ldr	r1, [pc, #404]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a58      	ldr	r2, [pc, #352]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002576:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800258e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d040      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e073      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06b      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4936      	ldr	r1, [pc, #216]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7fe fa58 	bl	8000ab4 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fa54 	bl	8000ab4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e053      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b27      	ldr	r3, [pc, #156]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d210      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b24      	ldr	r3, [pc, #144]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4922      	ldr	r1, [pc, #136]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1cc>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_ClockConfig+0x1d0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f9b6 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08003c3c 	.word	0x08003c3c
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000014 	.word	0x20000014

080026e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x94>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d002      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x30>
 800270e:	2b08      	cmp	r3, #8
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x36>
 8002712:	e027      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002714:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_RCC_GetSysClockFreq+0x98>)
 8002716:	613b      	str	r3, [r7, #16]
      break;
 8002718:	e027      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	0c9b      	lsrs	r3, r3, #18
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a17      	ldr	r2, [pc, #92]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x94>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0c5b      	lsrs	r3, r3, #17
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xa0>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a0d      	ldr	r2, [pc, #52]	@ (800277c <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	fb03 f202 	mul.w	r2, r3, r2
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e004      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	613b      	str	r3, [r7, #16]
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_GetSysClockFreq+0x98>)
 8002766:	613b      	str	r3, [r7, #16]
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	693b      	ldr	r3, [r7, #16]
}
 800276c:	4618      	mov	r0, r3
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	007a1200 	.word	0x007a1200
 8002780:	08003c54 	.word	0x08003c54
 8002784:	08003c64 	.word	0x08003c64
 8002788:	003d0900 	.word	0x003d0900

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b02      	ldr	r3, [pc, #8]	@ (800279c <HAL_RCC_GetHCLKFreq+0x10>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000010 	.word	0x20000010

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff2 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08003c4c 	.word	0x08003c4c

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffde 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	@ (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08003c4c 	.word	0x08003c4c

080027f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <RCC_Delay+0x34>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <RCC_Delay+0x38>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800280c:	bf00      	nop
  }
  while (Delay --);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <RCC_Delay+0x1c>
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000010 	.word	0x20000010
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d07d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284c:	4b4f      	ldr	r3, [pc, #316]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	4b4c      	ldr	r3, [pc, #304]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a4b      	ldr	r2, [pc, #300]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
 8002864:	4b49      	ldr	r3, [pc, #292]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002870:	2301      	movs	r3, #1
 8002872:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b46      	ldr	r3, [pc, #280]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d118      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002880:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288c:	f7fe f912 	bl	8000ab4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	e008      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe f90e 	bl	8000ab4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e06d      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b2:	4b36      	ldr	r3, [pc, #216]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d02e      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d027      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d0:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	4b2e      	ldr	r3, [pc, #184]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028e6:	4a29      	ldr	r2, [pc, #164]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe f8dd 	bl	8000ab4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe f8d9 	bl	8000ab4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e036      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4917      	ldr	r1, [pc, #92]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	4313      	orrs	r3, r2
 8002930:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b14      	ldr	r3, [pc, #80]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	4a13      	ldr	r2, [pc, #76]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002942:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	490b      	ldr	r1, [pc, #44]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4904      	ldr	r1, [pc, #16]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	42420440 	.word	0x42420440

08002998 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	f200 808a 	bhi.w	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d045      	beq.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d075      	beq.n	8002aba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80029ce:	e082      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80029d0:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029d6:	4b45      	ldr	r3, [pc, #276]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07b      	beq.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a41      	ldr	r2, [pc, #260]	@ (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b3c      	ldr	r3, [pc, #240]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a14:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	e004      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4a34      	ldr	r2, [pc, #208]	@ (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a30:	4b2e      	ldr	r3, [pc, #184]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	61bb      	str	r3, [r7, #24]
      break;
 8002a42:	e04a      	b.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
      break;
 8002a52:	e042      	b.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a64:	d108      	bne.n	8002a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	e01f      	b.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a82:	d109      	bne.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a90:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e00f      	b.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aa2:	d11c      	bne.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ab0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ab4:	61bb      	str	r3, [r7, #24]
      break;
 8002ab6:	e012      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ab8:	e011      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002aba:	f7ff fe85 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	0b9b      	lsrs	r3, r3, #14
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	61bb      	str	r3, [r7, #24]
      break;
 8002ad4:	e004      	b.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ade:	bf00      	nop
    }
  }
  return (frequency);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08003c68 	.word	0x08003c68
 8002af4:	08003c78 	.word	0x08003c78
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	003d0900 	.word	0x003d0900
 8002b00:	aaaaaaab 	.word	0xaaaaaaab

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e041      	b.n	8002b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fe5e 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 f940 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e032      	b.n	8002c22 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a18      	ldr	r2, [pc, #96]	@ (8002c2c <HAL_TIM_Base_Start+0x88>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_TIM_Base_Start+0x48>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd6:	d009      	beq.n	8002bec <HAL_TIM_Base_Start+0x48>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_TIM_Base_Start+0x8c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_TIM_Base_Start+0x48>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <HAL_TIM_Base_Start+0x90>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d010      	beq.n	8002c20 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	e007      	b.n	8002c20 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800

08002c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x1c>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0b4      	b.n	8002dbe <HAL_TIM_ConfigClockSource+0x186>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8c:	d03e      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0xd4>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c92:	f200 8087 	bhi.w	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9a:	f000 8086 	beq.w	8002daa <HAL_TIM_ConfigClockSource+0x172>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca2:	d87f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b70      	cmp	r3, #112	@ 0x70
 8002ca6:	d01a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xa6>
 8002ca8:	2b70      	cmp	r3, #112	@ 0x70
 8002caa:	d87b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b60      	cmp	r3, #96	@ 0x60
 8002cae:	d050      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x11a>
 8002cb0:	2b60      	cmp	r3, #96	@ 0x60
 8002cb2:	d877      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b50      	cmp	r3, #80	@ 0x50
 8002cb6:	d03c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xfa>
 8002cb8:	2b50      	cmp	r3, #80	@ 0x50
 8002cba:	d873      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d058      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x13a>
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d86f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b30      	cmp	r3, #48	@ 0x30
 8002cc6:	d064      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b30      	cmp	r3, #48	@ 0x30
 8002cca:	d86b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d060      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d867      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d05a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	e062      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	f000 f950 	bl	8002f92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
      break;
 8002d0a:	e04f      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d1c:	f000 f939 	bl	8002f92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d2e:	609a      	str	r2, [r3, #8]
      break;
 8002d30:	e03c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 f8b0 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2150      	movs	r1, #80	@ 0x50
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f907 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d50:	e02c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 f8ce 	bl	8002f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2160      	movs	r1, #96	@ 0x60
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f8f7 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d70:	e01c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f890 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2140      	movs	r1, #64	@ 0x40
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f8e7 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d90:	e00c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 f8de 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002da2:	e003      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e000      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a2f      	ldr	r2, [pc, #188]	@ (8002e98 <TIM_Base_SetConfig+0xd0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a2c      	ldr	r2, [pc, #176]	@ (8002e9c <TIM_Base_SetConfig+0xd4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <TIM_Base_SetConfig+0xd8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a22      	ldr	r2, [pc, #136]	@ (8002e98 <TIM_Base_SetConfig+0xd0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <TIM_Base_SetConfig+0xd4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea0 <TIM_Base_SetConfig+0xd8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <TIM_Base_SetConfig+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d103      	bne.n	8002e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e046      	b.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003034:	d009      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a10      	ldr	r2, [pc, #64]	@ (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10c      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e042      	b.n	8003124 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fbb8 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	@ 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fcd5 	bl	8003a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	d112      	bne.n	800316c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_UART_Receive_IT+0x26>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e00b      	b.n	800316e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	461a      	mov	r2, r3
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fab7 	bl	80036d6 <UART_Start_Receive_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	e000      	b.n	800316e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b0ba      	sub	sp, #232	@ 0xe8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_UART_IRQHandler+0x66>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fb93 	bl	8003902 <UART_Receive_IT>
      return;
 80031dc:	e25b      	b.n	8003696 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80de 	beq.w	80033a4 <HAL_UART_IRQHandler+0x22c>
 80031e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80d1 	beq.w	80033a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_UART_IRQHandler+0xae>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xd2>
 8003232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0202 	orr.w	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xf6>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d011      	beq.n	800329e <HAL_UART_IRQHandler+0x126>
 800327a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f043 0208 	orr.w	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 81f2 	beq.w	800368c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_UART_IRQHandler+0x14e>
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fb1e 	bl	8003902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_UART_IRQHandler+0x17a>
 80032ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d04f      	beq.n	8003392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa28 	bl	8003748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d041      	beq.n	800338a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800331c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800333e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800334a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1d9      	bne.n	8003306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d013      	beq.n	8003382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <HAL_UART_IRQHandler+0x3e0>)
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fafe 	bl	8001968 <HAL_DMA_Abort_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800337c:	4610      	mov	r0, r2
 800337e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e00e      	b.n	80033a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f993 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e00a      	b.n	80033a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f98f 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e006      	b.n	80033a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f98b 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800339e:	e175      	b.n	800368c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	bf00      	nop
    return;
 80033a2:	e173      	b.n	800368c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	f040 814f 	bne.w	800364c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8148 	beq.w	800364c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8141 	beq.w	800364c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80b6 	beq.w	800355c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8145 	beq.w	8003690 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800340a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800340e:	429a      	cmp	r2, r3
 8003410:	f080 813e 	bcs.w	8003690 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800341a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b20      	cmp	r3, #32
 8003424:	f000 8088 	beq.w	8003538 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800343e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003454:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003460:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800346c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1d9      	bne.n	8003428 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003498:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800349c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e1      	bne.n	8003474 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e3      	bne.n	80034b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003508:	f023 0310 	bic.w	r3, r3, #16
 800350c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800351a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800351c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e3      	bne.n	80034f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f9dc 	bl	80018f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003546:	b29b      	uxth	r3, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8b6 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003554:	e09c      	b.n	8003690 <HAL_UART_IRQHandler+0x518>
 8003556:	bf00      	nop
 8003558:	0800380d 	.word	0x0800380d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003564:	b29b      	uxth	r3, r3
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 808e 	beq.w	8003694 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8089 	beq.w	8003694 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e3      	bne.n	8003582 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035de:	633a      	str	r2, [r7, #48]	@ 0x30
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e3      	bne.n	80035ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003624:	61fa      	str	r2, [r7, #28]
 8003626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	617b      	str	r3, [r7, #20]
   return(result);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e3      	bne.n	8003600 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800363e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003642:	4619      	mov	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f83b 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800364a:	e023      	b.n	8003694 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_UART_IRQHandler+0x4f4>
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8e5 	bl	8003834 <UART_Transmit_IT>
    return;
 800366a:	e014      	b.n	8003696 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <HAL_UART_IRQHandler+0x51e>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f924 	bl	80038d2 <UART_EndTransmit_IT>
    return;
 800368a:	e004      	b.n	8003696 <HAL_UART_IRQHandler+0x51e>
    return;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <HAL_UART_IRQHandler+0x51e>
      return;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <HAL_UART_IRQHandler+0x51e>
      return;
 8003694:	bf00      	nop
  }
}
 8003696:	37e8      	adds	r7, #232	@ 0xe8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2222      	movs	r2, #34	@ 0x22
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b095      	sub	sp, #84	@ 0x54
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003770:	643a      	str	r2, [r7, #64]	@ 0x40
 8003772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	61fb      	str	r3, [r7, #28]
   return(result);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e0:	61ba      	str	r2, [r7, #24]
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003802:	bf00      	nop
 8003804:	3754      	adds	r7, #84	@ 0x54
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7ff ff41 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b21      	cmp	r3, #33	@ 0x21
 8003846:	d13e      	bne.n	80038c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003850:	d114      	bne.n	800387c <UART_Transmit_IT+0x48>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d110      	bne.n	800387c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]
 800387a:	e008      	b.n	800388e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6211      	str	r1, [r2, #32]
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4619      	mov	r1, r3
 800389c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fed2 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08c      	sub	sp, #48	@ 0x30
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b22      	cmp	r3, #34	@ 0x22
 8003914:	f040 80ae 	bne.w	8003a74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003920:	d117      	bne.n	8003952 <UART_Receive_IT+0x50>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	b29a      	uxth	r2, r3
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003950:	e026      	b.n	80039a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d007      	beq.n	8003976 <UART_Receive_IT+0x74>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <UART_Receive_IT+0x82>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e008      	b.n	8003996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003990:	b2da      	uxtb	r2, r3
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4619      	mov	r1, r3
 80039ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d15d      	bne.n	8003a70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0220 	bic.w	r2, r2, #32
 80039c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d135      	bne.n	8003a66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	623a      	str	r2, [r7, #32]
 8003a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d10a      	bne.n	8003a58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fe2e 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
 8003a64:	e002      	b.n	8003a6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc fd70 	bl	800054c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e002      	b.n	8003a76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3730      	adds	r7, #48	@ 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003aba:	f023 030c 	bic.w	r3, r3, #12
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <UART_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fe6e 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	e002      	b.n	8003af6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7fe fe56 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009a      	lsls	r2, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <UART_SetConfig+0x118>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	0119      	lsls	r1, r3, #4
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <UART_SetConfig+0x118>)
 8003b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2064      	movs	r0, #100	@ 0x64
 8003b36:	fb00 f303 	mul.w	r3, r0, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	3332      	adds	r3, #50	@ 0x32
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <UART_SetConfig+0x118>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b4c:	4419      	add	r1, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009a      	lsls	r2, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <UART_SetConfig+0x118>)
 8003b66:	fba3 0302 	umull	r0, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2064      	movs	r0, #100	@ 0x64
 8003b6e:	fb00 f303 	mul.w	r3, r0, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	3332      	adds	r3, #50	@ 0x32
 8003b78:	4a07      	ldr	r2, [pc, #28]	@ (8003b98 <UART_SetConfig+0x118>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	440a      	add	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40013800 	.word	0x40013800
 8003b98:	51eb851f 	.word	0x51eb851f

08003b9c <memset>:
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4402      	add	r2, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	2600      	movs	r6, #0
 8003bb0:	4d0c      	ldr	r5, [pc, #48]	@ (8003be4 <__libc_init_array+0x38>)
 8003bb2:	4c0d      	ldr	r4, [pc, #52]	@ (8003be8 <__libc_init_array+0x3c>)
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	f000 f822 	bl	8003c04 <_init>
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	4d0a      	ldr	r5, [pc, #40]	@ (8003bec <__libc_init_array+0x40>)
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf0 <__libc_init_array+0x44>)
 8003bc6:	1b64      	subs	r4, r4, r5
 8003bc8:	10a4      	asrs	r4, r4, #2
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08003c84 	.word	0x08003c84
 8003be8:	08003c84 	.word	0x08003c84
 8003bec:	08003c84 	.word	0x08003c84
 8003bf0:	08003c88 	.word	0x08003c88

08003bf4 <strcpy>:
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bfa:	f803 2b01 	strb.w	r2, [r3], #1
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	d1f9      	bne.n	8003bf6 <strcpy+0x2>
 8003c02:	4770      	bx	lr

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
